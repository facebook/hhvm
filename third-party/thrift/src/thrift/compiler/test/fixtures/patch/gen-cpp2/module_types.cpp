/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/patch/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/patch/gen-cpp2/module_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/patch/gen-cpp2/module_data.h"


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyData>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyData>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyData::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyData";
}

const folly::StringPiece MyData::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyData>::fields_names[folly::to_underlying(ord) - 1];
}

MyData::MyData(const MyData&) = default;
MyData& MyData::operator=(const MyData&) = default;
MyData::MyData(FOLLY_MAYBE_UNUSED MyData&& other) noexcept :
    __fbthrift_field_data1(std::move(other.__fbthrift_field_data1)),
    __fbthrift_field_data2(std::move(other.__fbthrift_field_data2)) {
}

MyData& MyData::operator=(FOLLY_MAYBE_UNUSED MyData&& other) noexcept {
    this->__fbthrift_field_data1 = std::move(other.__fbthrift_field_data1);
    this->__fbthrift_field_data2 = std::move(other.__fbthrift_field_data2);
    return *this;
}


MyData::MyData(apache::thrift::FragileConstructor, ::std::string data1__arg, ::std::int32_t data2__arg) :
    __fbthrift_field_data1(std::move(data1__arg)),
    __fbthrift_field_data2(std::move(data2__arg)) {
}


void MyData::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_data1 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_data2 = ::std::int32_t();
}

void MyData::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_data1 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_data2 = ::std::int32_t();
}

bool MyData::__fbthrift_is_empty() const {
  return ::apache::thrift::op::isEmpty<::apache::thrift::type::string_t>(this->__fbthrift_field_data1) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::i32_t>(this->__fbthrift_field_data2);
}

bool MyData::operator==(FOLLY_MAYBE_UNUSED const MyData& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.data1_ref() == rhs.data1_ref())) {
    return false;
  }
  if (!(lhs.data2_ref() == rhs.data2_ref())) {
    return false;
  }
  return true;
}

bool MyData::operator<(FOLLY_MAYBE_UNUSED const MyData& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.data1_ref() == rhs.data1_ref())) {
    return lhs.data1_ref() < rhs.data1_ref();
  }
  if (!(lhs.data2_ref() == rhs.data2_ref())) {
    return lhs.data2_ref() < rhs.data2_ref();
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED MyData& a, FOLLY_MAYBE_UNUSED MyData& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_data1, b.__fbthrift_field_data1);
  swap(a.__fbthrift_field_data2, b.__fbthrift_field_data2);
}

template void MyData::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyData::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyData::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyData::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyData::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyData::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyData::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyData::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::InnerUnion>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::InnerUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::size;
folly::Range<::test::fixtures::patch::InnerUnion::Type const*> const TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::values = folly::range(TEnumDataStorage<::test::fixtures::patch::InnerUnion::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::names = folly::range(TEnumDataStorage<::test::fixtures::patch::InnerUnion::Type>::names);

bool TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace test { namespace fixtures { namespace patch {

const char* InnerUnion::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/InnerUnion";
}

const folly::StringPiece InnerUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<InnerUnion>::fields_names[folly::to_underlying(ord) - 1];
}

void InnerUnion::__fbthrift_clear() {
  // clear all fields
  if (getType() == Type::__EMPTY__) { return; }
  switch(getType()) {
    case Type::innerOption:
      destruct(value_.innerOption);
      break;
    default:
      assert(false);
      break;
  }
  type_ = folly::to_underlying(Type::__EMPTY__);
}

bool InnerUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}

bool InnerUnion::operator==(const InnerUnion& rhs) const {
  if (getType() != rhs.getType()) { return false; }
  switch(getType()) {
    case Type::innerOption:
      return apache::thrift::StringTraits<std::string>::isEqual(
          value_.innerOption,
          rhs.value_.innerOption);
    default:
      return true;
  }
}

bool InnerUnion::operator<(FOLLY_MAYBE_UNUSED const InnerUnion& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (lhs.getType() != rhs.getType()) {
    return lhs.getType() < rhs.getType();
  }
  switch (lhs.getType()) {
    case Type::innerOption:
    return !apache::thrift::StringTraits<std::string>::isEqual(value_.innerOption, rhs.value_.innerOption) &&
      apache::thrift::StringTraits<std::string>::isLess(value_.innerOption, rhs.value_.innerOption);
    default:
      return false;
  }
}

void swap(InnerUnion& a, InnerUnion& b) {
  InnerUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void InnerUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t InnerUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t InnerUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t InnerUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void InnerUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t InnerUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t InnerUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t InnerUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyUnion>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::test::fixtures::patch::MyUnion::Type>::size;
folly::Range<::test::fixtures::patch::MyUnion::Type const*> const TEnumTraits<::test::fixtures::patch::MyUnion::Type>::values = folly::range(TEnumDataStorage<::test::fixtures::patch::MyUnion::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::patch::MyUnion::Type>::names = folly::range(TEnumDataStorage<::test::fixtures::patch::MyUnion::Type>::names);

bool TEnumTraits<::test::fixtures::patch::MyUnion::Type>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::patch::MyUnion::Type>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace test { namespace fixtures { namespace patch {

const char* MyUnion::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyUnion";
}

const folly::StringPiece MyUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnion>::fields_names[folly::to_underlying(ord) - 1];
}

void MyUnion::__fbthrift_clear() {
  // clear all fields
  if (getType() == Type::__EMPTY__) { return; }
  switch(getType()) {
    case Type::option1:
      destruct(value_.option1);
      break;
    case Type::option2:
      destruct(value_.option2);
      break;
    case Type::option3:
      destruct(value_.option3);
      break;
    default:
      assert(false);
      break;
  }
  type_ = folly::to_underlying(Type::__EMPTY__);
}

bool MyUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}

bool MyUnion::operator==(const MyUnion& rhs) const {
  if (getType() != rhs.getType()) { return false; }
  switch(getType()) {
    case Type::option1:
      return value_.option1 == rhs.value_.option1;
    case Type::option2:
      return value_.option2 == rhs.value_.option2;
    case Type::option3:
      return value_.option3 == rhs.value_.option3;
    default:
      return true;
  }
}

bool MyUnion::operator<(FOLLY_MAYBE_UNUSED const MyUnion& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (lhs.getType() != rhs.getType()) {
    return lhs.getType() < rhs.getType();
  }
  switch (lhs.getType()) {
    case Type::option1:
      return lhs.value_.option1 < rhs.value_.option1;
    case Type::option2:
      return lhs.value_.option2 < rhs.value_.option2;
    case Type::option3:
      return lhs.value_.option3 < rhs.value_.option3;
    default:
      return false;
  }
}

void swap(MyUnion& a, MyUnion& b) {
  MyUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void MyUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnion,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::InnerUnion>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStruct";
}

const folly::StringPiece MyStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyStruct::MyStruct(const MyStruct&) = default;
MyStruct& MyStruct::operator=(const MyStruct&) = default;
MyStruct::MyStruct() :
      __fbthrift_field_boolVal(),
      __fbthrift_field_byteVal(),
      __fbthrift_field_i16Val(),
      __fbthrift_field_i32Val(),
      __fbthrift_field_i64Val(),
      __fbthrift_field_floatVal(),
      __fbthrift_field_doubleVal(),
      __fbthrift_field_optBoolVal(),
      __fbthrift_field_optByteVal(),
      __fbthrift_field_optI16Val(),
      __fbthrift_field_optI32Val(),
      __fbthrift_field_optI64Val(),
      __fbthrift_field_optFloatVal(),
      __fbthrift_field_optDoubleVal() {
}


MyStruct::~MyStruct() {}

MyStruct::MyStruct(FOLLY_MAYBE_UNUSED MyStruct&& other) noexcept :
    __fbthrift_field_boolVal(std::move(other.__fbthrift_field_boolVal)),
    __fbthrift_field_byteVal(std::move(other.__fbthrift_field_byteVal)),
    __fbthrift_field_i16Val(std::move(other.__fbthrift_field_i16Val)),
    __fbthrift_field_i32Val(std::move(other.__fbthrift_field_i32Val)),
    __fbthrift_field_i64Val(std::move(other.__fbthrift_field_i64Val)),
    __fbthrift_field_floatVal(std::move(other.__fbthrift_field_floatVal)),
    __fbthrift_field_doubleVal(std::move(other.__fbthrift_field_doubleVal)),
    __fbthrift_field_stringVal(std::move(other.__fbthrift_field_stringVal)),
    __fbthrift_field_binaryVal(std::move(other.__fbthrift_field_binaryVal)),
    __fbthrift_field_structVal(std::move(other.__fbthrift_field_structVal)),
    __fbthrift_field_optBoolVal(std::move(other.__fbthrift_field_optBoolVal)),
    __fbthrift_field_optByteVal(std::move(other.__fbthrift_field_optByteVal)),
    __fbthrift_field_optI16Val(std::move(other.__fbthrift_field_optI16Val)),
    __fbthrift_field_optI32Val(std::move(other.__fbthrift_field_optI32Val)),
    __fbthrift_field_optI64Val(std::move(other.__fbthrift_field_optI64Val)),
    __fbthrift_field_optFloatVal(std::move(other.__fbthrift_field_optFloatVal)),
    __fbthrift_field_optDoubleVal(std::move(other.__fbthrift_field_optDoubleVal)),
    __fbthrift_field_optStringVal(std::move(other.__fbthrift_field_optStringVal)),
    __fbthrift_field_optBinaryVal(std::move(other.__fbthrift_field_optBinaryVal)),
    __fbthrift_field_optStructVal(std::move(other.__fbthrift_field_optStructVal)),
    __fbthrift_field_optListVal(std::move(other.__fbthrift_field_optListVal)),
    __fbthrift_field_optSetVal(std::move(other.__fbthrift_field_optSetVal)),
    __fbthrift_field_optMapVal(std::move(other.__fbthrift_field_optMapVal)),
    __fbthrift_field_unionVal(std::move(other.__fbthrift_field_unionVal)),
    __isset(other.__isset) {
}

MyStruct& MyStruct::operator=(FOLLY_MAYBE_UNUSED MyStruct&& other) noexcept {
    this->__fbthrift_field_boolVal = std::move(other.__fbthrift_field_boolVal);
    this->__fbthrift_field_byteVal = std::move(other.__fbthrift_field_byteVal);
    this->__fbthrift_field_i16Val = std::move(other.__fbthrift_field_i16Val);
    this->__fbthrift_field_i32Val = std::move(other.__fbthrift_field_i32Val);
    this->__fbthrift_field_i64Val = std::move(other.__fbthrift_field_i64Val);
    this->__fbthrift_field_floatVal = std::move(other.__fbthrift_field_floatVal);
    this->__fbthrift_field_doubleVal = std::move(other.__fbthrift_field_doubleVal);
    this->__fbthrift_field_stringVal = std::move(other.__fbthrift_field_stringVal);
    this->__fbthrift_field_binaryVal = std::move(other.__fbthrift_field_binaryVal);
    this->__fbthrift_field_structVal = std::move(other.__fbthrift_field_structVal);
    this->__fbthrift_field_optBoolVal = std::move(other.__fbthrift_field_optBoolVal);
    this->__fbthrift_field_optByteVal = std::move(other.__fbthrift_field_optByteVal);
    this->__fbthrift_field_optI16Val = std::move(other.__fbthrift_field_optI16Val);
    this->__fbthrift_field_optI32Val = std::move(other.__fbthrift_field_optI32Val);
    this->__fbthrift_field_optI64Val = std::move(other.__fbthrift_field_optI64Val);
    this->__fbthrift_field_optFloatVal = std::move(other.__fbthrift_field_optFloatVal);
    this->__fbthrift_field_optDoubleVal = std::move(other.__fbthrift_field_optDoubleVal);
    this->__fbthrift_field_optStringVal = std::move(other.__fbthrift_field_optStringVal);
    this->__fbthrift_field_optBinaryVal = std::move(other.__fbthrift_field_optBinaryVal);
    this->__fbthrift_field_optStructVal = std::move(other.__fbthrift_field_optStructVal);
    this->__fbthrift_field_optListVal = std::move(other.__fbthrift_field_optListVal);
    this->__fbthrift_field_optSetVal = std::move(other.__fbthrift_field_optSetVal);
    this->__fbthrift_field_optMapVal = std::move(other.__fbthrift_field_optMapVal);
    this->__fbthrift_field_unionVal = std::move(other.__fbthrift_field_unionVal);
    __isset = other.__isset;
    return *this;
}


MyStruct::MyStruct(apache::thrift::FragileConstructor, bool boolVal__arg, ::std::int8_t byteVal__arg, ::std::int16_t i16Val__arg, ::std::int32_t i32Val__arg, ::std::int64_t i64Val__arg, float floatVal__arg, double doubleVal__arg, ::std::string stringVal__arg, ::folly::IOBuf binaryVal__arg, ::test::fixtures::patch::MyData structVal__arg, bool optBoolVal__arg, ::std::int8_t optByteVal__arg, ::std::int16_t optI16Val__arg, ::std::int32_t optI32Val__arg, ::std::int64_t optI64Val__arg, float optFloatVal__arg, double optDoubleVal__arg, ::std::string optStringVal__arg, ::folly::IOBuf optBinaryVal__arg, ::test::fixtures::patch::MyData optStructVal__arg, ::std::vector<::std::int16_t> optListVal__arg, ::std::set<::std::string> optSetVal__arg, ::std::map<::std::string, ::std::string> optMapVal__arg, ::test::fixtures::patch::MyUnion unionVal__arg) :
    __fbthrift_field_boolVal(std::move(boolVal__arg)),
    __fbthrift_field_byteVal(std::move(byteVal__arg)),
    __fbthrift_field_i16Val(std::move(i16Val__arg)),
    __fbthrift_field_i32Val(std::move(i32Val__arg)),
    __fbthrift_field_i64Val(std::move(i64Val__arg)),
    __fbthrift_field_floatVal(std::move(floatVal__arg)),
    __fbthrift_field_doubleVal(std::move(doubleVal__arg)),
    __fbthrift_field_stringVal(std::move(stringVal__arg)),
    __fbthrift_field_binaryVal(std::move(binaryVal__arg)),
    __fbthrift_field_structVal(std::move(structVal__arg)),
    __fbthrift_field_optBoolVal(std::move(optBoolVal__arg)),
    __fbthrift_field_optByteVal(std::move(optByteVal__arg)),
    __fbthrift_field_optI16Val(std::move(optI16Val__arg)),
    __fbthrift_field_optI32Val(std::move(optI32Val__arg)),
    __fbthrift_field_optI64Val(std::move(optI64Val__arg)),
    __fbthrift_field_optFloatVal(std::move(optFloatVal__arg)),
    __fbthrift_field_optDoubleVal(std::move(optDoubleVal__arg)),
    __fbthrift_field_optStringVal(std::move(optStringVal__arg)),
    __fbthrift_field_optBinaryVal(std::move(optBinaryVal__arg)),
    __fbthrift_field_optStructVal(std::move(optStructVal__arg)),
    __fbthrift_field_optListVal(std::move(optListVal__arg)),
    __fbthrift_field_optSetVal(std::move(optSetVal__arg)),
    __fbthrift_field_optMapVal(std::move(optMapVal__arg)),
    __fbthrift_field_unionVal(std::move(unionVal__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
}


void MyStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_boolVal = bool();
  this->__fbthrift_field_byteVal = ::std::int8_t();
  this->__fbthrift_field_i16Val = ::std::int16_t();
  this->__fbthrift_field_i32Val = ::std::int32_t();
  this->__fbthrift_field_i64Val = ::std::int64_t();
  this->__fbthrift_field_floatVal = float();
  this->__fbthrift_field_doubleVal = double();
  this->__fbthrift_field_stringVal = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_binaryVal = apache::thrift::StringTraits<::folly::IOBuf>::fromStringLiteral("");
  ::apache::thrift::clear(this->__fbthrift_field_structVal);
  this->__fbthrift_field_optBoolVal = bool();
  this->__fbthrift_field_optByteVal = ::std::int8_t();
  this->__fbthrift_field_optI16Val = ::std::int16_t();
  this->__fbthrift_field_optI32Val = ::std::int32_t();
  this->__fbthrift_field_optI64Val = ::std::int64_t();
  this->__fbthrift_field_optFloatVal = float();
  this->__fbthrift_field_optDoubleVal = double();
  this->__fbthrift_field_optStringVal = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_optBinaryVal = apache::thrift::StringTraits<::folly::IOBuf>::fromStringLiteral("");
  ::apache::thrift::clear(this->__fbthrift_field_optStructVal);
  this->__fbthrift_field_optListVal.clear();
  this->__fbthrift_field_optSetVal.clear();
  this->__fbthrift_field_optMapVal.clear();
  ::apache::thrift::clear(this->__fbthrift_field_unionVal);
  __isset = {};
}

void MyStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_boolVal = bool();
  this->__fbthrift_field_byteVal = ::std::int8_t();
  this->__fbthrift_field_i16Val = ::std::int16_t();
  this->__fbthrift_field_i32Val = ::std::int32_t();
  this->__fbthrift_field_i64Val = ::std::int64_t();
  this->__fbthrift_field_floatVal = float();
  this->__fbthrift_field_doubleVal = double();
  this->__fbthrift_field_stringVal = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_binaryVal = apache::thrift::StringTraits<::folly::IOBuf>::fromStringLiteral("");
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_structVal);
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_unionVal);
}

bool MyStruct::__fbthrift_is_empty() const {
  return ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_boolVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::byte_t>(this->__fbthrift_field_byteVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::i16_t>(this->__fbthrift_field_i16Val) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::i32_t>(this->__fbthrift_field_i32Val) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::i64_t>(this->__fbthrift_field_i64Val) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::float_t>(this->__fbthrift_field_floatVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::double_t>(this->__fbthrift_field_doubleVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::string_t>(this->__fbthrift_field_stringVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::cpp_type<::folly::IOBuf, ::apache::thrift::type::binary_t>>(this->__fbthrift_field_binaryVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>>(this->__fbthrift_field_structVal) &&
 !(this->__isset.get(0)) &&
 !(this->__isset.get(1)) &&
 !(this->__isset.get(2)) &&
 !(this->__isset.get(3)) &&
 !(this->__isset.get(4)) &&
 !(this->__isset.get(5)) &&
 !(this->__isset.get(6)) &&
 !(this->__isset.get(7)) &&
 !(this->__isset.get(8)) &&
 !(this->__isset.get(9)) &&
 !(this->__isset.get(10)) &&
 !(this->__isset.get(11)) &&
 !(this->__isset.get(12)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>>(this->__fbthrift_field_unionVal);
}

bool MyStruct::operator==(FOLLY_MAYBE_UNUSED const MyStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.boolVal_ref() == rhs.boolVal_ref())) {
    return false;
  }
  if (!(lhs.byteVal_ref() == rhs.byteVal_ref())) {
    return false;
  }
  if (!(lhs.i16Val_ref() == rhs.i16Val_ref())) {
    return false;
  }
  if (!(lhs.i32Val_ref() == rhs.i32Val_ref())) {
    return false;
  }
  if (!(lhs.i64Val_ref() == rhs.i64Val_ref())) {
    return false;
  }
  if (!(lhs.floatVal_ref() == rhs.floatVal_ref())) {
    return false;
  }
  if (!(lhs.doubleVal_ref() == rhs.doubleVal_ref())) {
    return false;
  }
  if (!(lhs.stringVal_ref() == rhs.stringVal_ref())) {
    return false;
  }
  if (!apache::thrift::StringTraits<::folly::IOBuf>::isEqual(lhs.__fbthrift_field_binaryVal, rhs.__fbthrift_field_binaryVal)) {
    return false;
  }
  if (!(lhs.structVal_ref() == rhs.structVal_ref())) {
    return false;
  }
  if (!(lhs.optBoolVal_ref() == rhs.optBoolVal_ref())) {
    return false;
  }
  if (!(lhs.optByteVal_ref() == rhs.optByteVal_ref())) {
    return false;
  }
  if (!(lhs.optI16Val_ref() == rhs.optI16Val_ref())) {
    return false;
  }
  if (!(lhs.optI32Val_ref() == rhs.optI32Val_ref())) {
    return false;
  }
  if (!(lhs.optI64Val_ref() == rhs.optI64Val_ref())) {
    return false;
  }
  if (!(lhs.optFloatVal_ref() == rhs.optFloatVal_ref())) {
    return false;
  }
  if (!(lhs.optDoubleVal_ref() == rhs.optDoubleVal_ref())) {
    return false;
  }
  if (!(lhs.optStringVal_ref() == rhs.optStringVal_ref())) {
    return false;
  }
  if (lhs.optBinaryVal_ref().has_value() != rhs.optBinaryVal_ref().has_value() || (lhs.optBinaryVal_ref().has_value() && !apache::thrift::StringTraits<::folly::IOBuf>::isEqual(lhs.__fbthrift_field_optBinaryVal, rhs.__fbthrift_field_optBinaryVal))) {
    return false;
  }
  if (!(lhs.optStructVal_ref() == rhs.optStructVal_ref())) {
    return false;
  }
  if (!(lhs.optListVal_ref() == rhs.optListVal_ref())) {
    return false;
  }
  if (!(lhs.optSetVal_ref() == rhs.optSetVal_ref())) {
    return false;
  }
  if (!(lhs.optMapVal_ref() == rhs.optMapVal_ref())) {
    return false;
  }
  if (!(lhs.unionVal_ref() == rhs.unionVal_ref())) {
    return false;
  }
  return true;
}

bool MyStruct::operator<(FOLLY_MAYBE_UNUSED const MyStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.boolVal_ref() == rhs.boolVal_ref())) {
    return lhs.boolVal_ref() < rhs.boolVal_ref();
  }
  if (!(lhs.byteVal_ref() == rhs.byteVal_ref())) {
    return lhs.byteVal_ref() < rhs.byteVal_ref();
  }
  if (!(lhs.i16Val_ref() == rhs.i16Val_ref())) {
    return lhs.i16Val_ref() < rhs.i16Val_ref();
  }
  if (!(lhs.i32Val_ref() == rhs.i32Val_ref())) {
    return lhs.i32Val_ref() < rhs.i32Val_ref();
  }
  if (!(lhs.i64Val_ref() == rhs.i64Val_ref())) {
    return lhs.i64Val_ref() < rhs.i64Val_ref();
  }
  if (!(lhs.floatVal_ref() == rhs.floatVal_ref())) {
    return lhs.floatVal_ref() < rhs.floatVal_ref();
  }
  if (!(lhs.doubleVal_ref() == rhs.doubleVal_ref())) {
    return lhs.doubleVal_ref() < rhs.doubleVal_ref();
  }
  if (!(lhs.stringVal_ref() == rhs.stringVal_ref())) {
    return lhs.stringVal_ref() < rhs.stringVal_ref();
  }
  if (!apache::thrift::StringTraits<::folly::IOBuf>::isEqual(lhs.__fbthrift_field_binaryVal, rhs.__fbthrift_field_binaryVal)) {
    return apache::thrift::StringTraits<::folly::IOBuf>::isLess(lhs.__fbthrift_field_binaryVal, rhs.__fbthrift_field_binaryVal);
  }
  if (!(lhs.structVal_ref() == rhs.structVal_ref())) {
    return lhs.structVal_ref() < rhs.structVal_ref();
  }
  if (!(lhs.optBoolVal_ref() == rhs.optBoolVal_ref())) {
    return lhs.optBoolVal_ref() < rhs.optBoolVal_ref();
  }
  if (!(lhs.optByteVal_ref() == rhs.optByteVal_ref())) {
    return lhs.optByteVal_ref() < rhs.optByteVal_ref();
  }
  if (!(lhs.optI16Val_ref() == rhs.optI16Val_ref())) {
    return lhs.optI16Val_ref() < rhs.optI16Val_ref();
  }
  if (!(lhs.optI32Val_ref() == rhs.optI32Val_ref())) {
    return lhs.optI32Val_ref() < rhs.optI32Val_ref();
  }
  if (!(lhs.optI64Val_ref() == rhs.optI64Val_ref())) {
    return lhs.optI64Val_ref() < rhs.optI64Val_ref();
  }
  if (!(lhs.optFloatVal_ref() == rhs.optFloatVal_ref())) {
    return lhs.optFloatVal_ref() < rhs.optFloatVal_ref();
  }
  if (!(lhs.optDoubleVal_ref() == rhs.optDoubleVal_ref())) {
    return lhs.optDoubleVal_ref() < rhs.optDoubleVal_ref();
  }
  if (!(lhs.optStringVal_ref() == rhs.optStringVal_ref())) {
    return lhs.optStringVal_ref() < rhs.optStringVal_ref();
  }
  if (lhs.optBinaryVal_ref().has_value() != rhs.optBinaryVal_ref().has_value() || (lhs.optBinaryVal_ref().has_value() && !apache::thrift::StringTraits<::folly::IOBuf>::isEqual(lhs.__fbthrift_field_optBinaryVal, rhs.__fbthrift_field_optBinaryVal))) {
    return !lhs.optBinaryVal_ref().has_value() || (rhs.optBinaryVal_ref().has_value() && apache::thrift::StringTraits<::folly::IOBuf>::isLess(lhs.__fbthrift_field_optBinaryVal, rhs.__fbthrift_field_optBinaryVal));
  }
  if (!(lhs.optStructVal_ref() == rhs.optStructVal_ref())) {
    return lhs.optStructVal_ref() < rhs.optStructVal_ref();
  }
  if (!(lhs.optListVal_ref() == rhs.optListVal_ref())) {
    return lhs.optListVal_ref() < rhs.optListVal_ref();
  }
  if (!(lhs.optSetVal_ref() == rhs.optSetVal_ref())) {
    return lhs.optSetVal_ref() < rhs.optSetVal_ref();
  }
  if (!(lhs.optMapVal_ref() == rhs.optMapVal_ref())) {
    return lhs.optMapVal_ref() < rhs.optMapVal_ref();
  }
  if (!(lhs.unionVal_ref() == rhs.unionVal_ref())) {
    return lhs.unionVal_ref() < rhs.unionVal_ref();
  }
  return false;
}

const ::test::fixtures::patch::MyData& MyStruct::get_structVal() const& {
  return __fbthrift_field_structVal;
}

::test::fixtures::patch::MyData MyStruct::get_structVal() && {
  return std::move(__fbthrift_field_structVal);
}

const ::test::fixtures::patch::MyData* MyStruct::get_optStructVal() const& {
  return optStructVal_ref().has_value() ? std::addressof(__fbthrift_field_optStructVal) : nullptr;
}

::test::fixtures::patch::MyData* MyStruct::get_optStructVal() & {
  return optStructVal_ref().has_value() ? std::addressof(__fbthrift_field_optStructVal) : nullptr;
}

const ::std::vector<::std::int16_t>* MyStruct::get_optListVal() const& {
  return optListVal_ref().has_value() ? std::addressof(__fbthrift_field_optListVal) : nullptr;
}

::std::vector<::std::int16_t>* MyStruct::get_optListVal() & {
  return optListVal_ref().has_value() ? std::addressof(__fbthrift_field_optListVal) : nullptr;
}

const ::std::set<::std::string>* MyStruct::get_optSetVal() const& {
  return optSetVal_ref().has_value() ? std::addressof(__fbthrift_field_optSetVal) : nullptr;
}

::std::set<::std::string>* MyStruct::get_optSetVal() & {
  return optSetVal_ref().has_value() ? std::addressof(__fbthrift_field_optSetVal) : nullptr;
}

const ::std::map<::std::string, ::std::string>* MyStruct::get_optMapVal() const& {
  return optMapVal_ref().has_value() ? std::addressof(__fbthrift_field_optMapVal) : nullptr;
}

::std::map<::std::string, ::std::string>* MyStruct::get_optMapVal() & {
  return optMapVal_ref().has_value() ? std::addressof(__fbthrift_field_optMapVal) : nullptr;
}

const ::test::fixtures::patch::MyUnion& MyStruct::get_unionVal() const& {
  return __fbthrift_field_unionVal;
}

::test::fixtures::patch::MyUnion MyStruct::get_unionVal() && {
  return std::move(__fbthrift_field_unionVal);
}


void swap(FOLLY_MAYBE_UNUSED MyStruct& a, FOLLY_MAYBE_UNUSED MyStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_boolVal, b.__fbthrift_field_boolVal);
  swap(a.__fbthrift_field_byteVal, b.__fbthrift_field_byteVal);
  swap(a.__fbthrift_field_i16Val, b.__fbthrift_field_i16Val);
  swap(a.__fbthrift_field_i32Val, b.__fbthrift_field_i32Val);
  swap(a.__fbthrift_field_i64Val, b.__fbthrift_field_i64Val);
  swap(a.__fbthrift_field_floatVal, b.__fbthrift_field_floatVal);
  swap(a.__fbthrift_field_doubleVal, b.__fbthrift_field_doubleVal);
  swap(a.__fbthrift_field_stringVal, b.__fbthrift_field_stringVal);
  swap(a.__fbthrift_field_binaryVal, b.__fbthrift_field_binaryVal);
  swap(a.__fbthrift_field_structVal, b.__fbthrift_field_structVal);
  swap(a.__fbthrift_field_optBoolVal, b.__fbthrift_field_optBoolVal);
  swap(a.__fbthrift_field_optByteVal, b.__fbthrift_field_optByteVal);
  swap(a.__fbthrift_field_optI16Val, b.__fbthrift_field_optI16Val);
  swap(a.__fbthrift_field_optI32Val, b.__fbthrift_field_optI32Val);
  swap(a.__fbthrift_field_optI64Val, b.__fbthrift_field_optI64Val);
  swap(a.__fbthrift_field_optFloatVal, b.__fbthrift_field_optFloatVal);
  swap(a.__fbthrift_field_optDoubleVal, b.__fbthrift_field_optDoubleVal);
  swap(a.__fbthrift_field_optStringVal, b.__fbthrift_field_optStringVal);
  swap(a.__fbthrift_field_optBinaryVal, b.__fbthrift_field_optBinaryVal);
  swap(a.__fbthrift_field_optStructVal, b.__fbthrift_field_optStructVal);
  swap(a.__fbthrift_field_optListVal, b.__fbthrift_field_optListVal);
  swap(a.__fbthrift_field_optSetVal, b.__fbthrift_field_optSetVal);
  swap(a.__fbthrift_field_optMapVal, b.__fbthrift_field_optMapVal);
  swap(a.__fbthrift_field_unionVal, b.__fbthrift_field_unionVal);
  swap(a.__isset, b.__isset);
}

template void MyStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::MyUnion>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyDataFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyDataFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyDataFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyDataFieldPatch";
}

const folly::StringPiece MyDataFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyDataFieldPatchStruct::MyDataFieldPatchStruct(const MyDataFieldPatchStruct& srcObj) :
    __fbthrift_field_data1(srcObj.__fbthrift_field_data1),
    __fbthrift_field_data2(srcObj.__fbthrift_field_data2),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_data2, *this);
}

MyDataFieldPatchStruct& MyDataFieldPatchStruct::operator=(const MyDataFieldPatchStruct& other) {
  MyDataFieldPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MyDataFieldPatchStruct::MyDataFieldPatchStruct(FOLLY_MAYBE_UNUSED MyDataFieldPatchStruct&& other) noexcept :
    __fbthrift_field_data1(std::move(other.__fbthrift_field_data1)),
    __fbthrift_field_data2(std::move(other.__fbthrift_field_data2)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_data2, *this);
}

MyDataFieldPatchStruct& MyDataFieldPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyDataFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_data1 = std::move(other.__fbthrift_field_data1);
    this->__fbthrift_field_data2 = std::move(other.__fbthrift_field_data2);
    __isset = other.__isset;
    return *this;
}


MyDataFieldPatchStruct::MyDataFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::op::StringPatch data1__arg, ::apache::thrift::op::I32Patch data2__arg) :
    __fbthrift_field_data1(std::move(data1__arg)),
    __fbthrift_field_data2(std::move(data2__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_data2, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void MyDataFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_data2, *this);
  __isset = {};
}

void MyDataFieldPatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyDataFieldPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyDataFieldPatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyDataFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_data1, rhs.__fbthrift_field_data1)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_data2, rhs.__fbthrift_field_data2)) {
    return false;
  }
  return true;
}

bool MyDataFieldPatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyDataFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_data1, rhs.__fbthrift_field_data1)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_data1, rhs.__fbthrift_field_data1);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_data2, rhs.__fbthrift_field_data2)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_data2, rhs.__fbthrift_field_data2);
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED MyDataFieldPatchStruct& a, FOLLY_MAYBE_UNUSED MyDataFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_data1, b.__fbthrift_field_data1);
  swap(a.__fbthrift_field_data2, b.__fbthrift_field_data2);
  swap(a.__isset, b.__isset);
}

template void MyDataFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::StringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I32Patch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyDataPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyDataPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyDataPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyDataPatch";
}

const folly::StringPiece MyDataPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyDataPatchStruct::MyDataPatchStruct(const MyDataPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

MyDataPatchStruct& MyDataPatchStruct::operator=(const MyDataPatchStruct& other) {
  MyDataPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MyDataPatchStruct::MyDataPatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}


MyDataPatchStruct::~MyDataPatchStruct() {}

MyDataPatchStruct::MyDataPatchStruct(FOLLY_MAYBE_UNUSED MyDataPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

MyDataPatchStruct& MyDataPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyDataPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


MyDataPatchStruct::MyDataPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> assign__arg, bool clear__arg, ::test::fixtures::patch::MyDataFieldPatch patchPrior__arg, ::test::fixtures::patch::MyData ensure__arg, ::test::fixtures::patch::MyDataFieldPatch patch__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void MyDataPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset = {};
}

void MyDataPatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyDataPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyDataPatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyDataPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool MyDataPatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyDataPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.assign_ref(), rhs.assign_ref());
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}

const ::test::fixtures::patch::MyData& MyDataPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::MyData MyDataPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap(FOLLY_MAYBE_UNUSED MyDataPatchStruct& a, FOLLY_MAYBE_UNUSED MyDataPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void MyDataPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::OptionalMyDataPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::OptionalMyDataPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* OptionalMyDataPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/OptionalMyDataPatch";
}

const folly::StringPiece OptionalMyDataPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<OptionalMyDataPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

OptionalMyDataPatchStruct::OptionalMyDataPatchStruct(const OptionalMyDataPatchStruct& srcObj) :
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

OptionalMyDataPatchStruct& OptionalMyDataPatchStruct::operator=(const OptionalMyDataPatchStruct& other) {
  OptionalMyDataPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

OptionalMyDataPatchStruct::OptionalMyDataPatchStruct(FOLLY_MAYBE_UNUSED OptionalMyDataPatchStruct&& other) noexcept :
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

OptionalMyDataPatchStruct& OptionalMyDataPatchStruct::operator=(FOLLY_MAYBE_UNUSED OptionalMyDataPatchStruct&& other) noexcept {
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


OptionalMyDataPatchStruct::OptionalMyDataPatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyDataPatch patchPrior__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> ensure__arg, ::test::fixtures::patch::MyDataPatch patch__arg) :
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void OptionalMyDataPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  this->__fbthrift_field_ensure.reset();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StructPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset = {};
}

void OptionalMyDataPatchStruct::__fbthrift_clear_terse_fields() {
}

bool OptionalMyDataPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool OptionalMyDataPatchStruct::operator==(FOLLY_MAYBE_UNUSED const OptionalMyDataPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.ensure_ref(), rhs.ensure_ref()))) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool OptionalMyDataPatchStruct::operator<(FOLLY_MAYBE_UNUSED const OptionalMyDataPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior);
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.ensure_ref(), rhs.ensure_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.ensure_ref(), rhs.ensure_ref());
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED OptionalMyDataPatchStruct& a, FOLLY_MAYBE_UNUSED OptionalMyDataPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void OptionalMyDataPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalMyDataPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalMyDataPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalMyDataPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalMyDataPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalMyDataPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalMyDataPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalMyDataPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyDataPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyDataPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyDataPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::InnerUnionFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::InnerUnionFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* InnerUnionFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/InnerUnionFieldPatch";
}

const folly::StringPiece InnerUnionFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<InnerUnionFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

InnerUnionFieldPatchStruct::InnerUnionFieldPatchStruct(const InnerUnionFieldPatchStruct& srcObj) :
    __fbthrift_field_innerOption(srcObj.__fbthrift_field_innerOption),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, 1>(__fbthrift_field_innerOption, *this);
}

InnerUnionFieldPatchStruct& InnerUnionFieldPatchStruct::operator=(const InnerUnionFieldPatchStruct& other) {
  InnerUnionFieldPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

InnerUnionFieldPatchStruct::InnerUnionFieldPatchStruct(FOLLY_MAYBE_UNUSED InnerUnionFieldPatchStruct&& other) noexcept :
    __fbthrift_field_innerOption(std::move(other.__fbthrift_field_innerOption)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, 1>(__fbthrift_field_innerOption, *this);
}

InnerUnionFieldPatchStruct& InnerUnionFieldPatchStruct::operator=(FOLLY_MAYBE_UNUSED InnerUnionFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_innerOption = std::move(other.__fbthrift_field_innerOption);
    __isset = other.__isset;
    return *this;
}


InnerUnionFieldPatchStruct::InnerUnionFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::op::BinaryPatch innerOption__arg) :
    __fbthrift_field_innerOption(std::move(innerOption__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, 1>(__fbthrift_field_innerOption, *this);
  __isset.set(folly::index_constant<0>(), true);
}


void InnerUnionFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::AssignPatchAdapter, 1>(__fbthrift_field_innerOption, *this);
  __isset = {};
}

void InnerUnionFieldPatchStruct::__fbthrift_clear_terse_fields() {
}

bool InnerUnionFieldPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool InnerUnionFieldPatchStruct::operator==(FOLLY_MAYBE_UNUSED const InnerUnionFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_innerOption, rhs.__fbthrift_field_innerOption)) {
    return false;
  }
  return true;
}

bool InnerUnionFieldPatchStruct::operator<(FOLLY_MAYBE_UNUSED const InnerUnionFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_innerOption, rhs.__fbthrift_field_innerOption)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_innerOption, rhs.__fbthrift_field_innerOption);
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED InnerUnionFieldPatchStruct& a, FOLLY_MAYBE_UNUSED InnerUnionFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_innerOption, b.__fbthrift_field_innerOption);
  swap(a.__isset, b.__isset);
}

template void InnerUnionFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t InnerUnionFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t InnerUnionFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t InnerUnionFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void InnerUnionFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t InnerUnionFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t InnerUnionFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t InnerUnionFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BinaryPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::InnerUnionPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::InnerUnionPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* InnerUnionPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/InnerUnionPatch";
}

const folly::StringPiece InnerUnionPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<InnerUnionPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

InnerUnionPatchStruct::InnerUnionPatchStruct(const InnerUnionPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

InnerUnionPatchStruct& InnerUnionPatchStruct::operator=(const InnerUnionPatchStruct& other) {
  InnerUnionPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

InnerUnionPatchStruct::InnerUnionPatchStruct(FOLLY_MAYBE_UNUSED InnerUnionPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

InnerUnionPatchStruct& InnerUnionPatchStruct::operator=(FOLLY_MAYBE_UNUSED InnerUnionPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


InnerUnionPatchStruct::InnerUnionPatchStruct(apache::thrift::FragileConstructor, ::test::fixtures::patch::InnerUnion assign__arg, bool clear__arg, ::test::fixtures::patch::InnerUnionFieldPatch patchPrior__arg, ::test::fixtures::patch::InnerUnion ensure__arg, ::test::fixtures::patch::InnerUnionFieldPatch patch__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
}


void InnerUnionPatchStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_assign);
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset = {};
}

void InnerUnionPatchStruct::__fbthrift_clear_terse_fields() {
}

bool InnerUnionPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool InnerUnionPatchStruct::operator==(FOLLY_MAYBE_UNUSED const InnerUnionPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool InnerUnionPatchStruct::operator<(FOLLY_MAYBE_UNUSED const InnerUnionPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return lhs.assign_ref() < rhs.assign_ref();
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}

const ::test::fixtures::patch::InnerUnion& InnerUnionPatchStruct::get_assign() const& {
  return __fbthrift_field_assign;
}

::test::fixtures::patch::InnerUnion InnerUnionPatchStruct::get_assign() && {
  return std::move(__fbthrift_field_assign);
}

const ::test::fixtures::patch::InnerUnion& InnerUnionPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::InnerUnion InnerUnionPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap(FOLLY_MAYBE_UNUSED InnerUnionPatchStruct& a, FOLLY_MAYBE_UNUSED InnerUnionPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void InnerUnionPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t InnerUnionPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t InnerUnionPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t InnerUnionPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void InnerUnionPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t InnerUnionPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t InnerUnionPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t InnerUnionPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionPatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::InnerUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::InnerUnionFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionPatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::InnerUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::InnerUnionFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::OptionalInnerUnionPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::OptionalInnerUnionPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* OptionalInnerUnionPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/OptionalInnerUnionPatch";
}

const folly::StringPiece OptionalInnerUnionPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<OptionalInnerUnionPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

OptionalInnerUnionPatchStruct::OptionalInnerUnionPatchStruct(const OptionalInnerUnionPatchStruct& srcObj) :
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

OptionalInnerUnionPatchStruct& OptionalInnerUnionPatchStruct::operator=(const OptionalInnerUnionPatchStruct& other) {
  OptionalInnerUnionPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

OptionalInnerUnionPatchStruct::OptionalInnerUnionPatchStruct(FOLLY_MAYBE_UNUSED OptionalInnerUnionPatchStruct&& other) noexcept :
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

OptionalInnerUnionPatchStruct& OptionalInnerUnionPatchStruct::operator=(FOLLY_MAYBE_UNUSED OptionalInnerUnionPatchStruct&& other) noexcept {
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


OptionalInnerUnionPatchStruct::OptionalInnerUnionPatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::InnerUnionPatch patchPrior__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion> ensure__arg, ::test::fixtures::patch::InnerUnionPatch patch__arg) :
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void OptionalInnerUnionPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  this->__fbthrift_field_ensure.reset();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset = {};
}

void OptionalInnerUnionPatchStruct::__fbthrift_clear_terse_fields() {
}

bool OptionalInnerUnionPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool OptionalInnerUnionPatchStruct::operator==(FOLLY_MAYBE_UNUSED const OptionalInnerUnionPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.ensure_ref(), rhs.ensure_ref()))) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool OptionalInnerUnionPatchStruct::operator<(FOLLY_MAYBE_UNUSED const OptionalInnerUnionPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior);
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.ensure_ref(), rhs.ensure_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.ensure_ref(), rhs.ensure_ref());
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED OptionalInnerUnionPatchStruct& a, FOLLY_MAYBE_UNUSED OptionalInnerUnionPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void OptionalInnerUnionPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalInnerUnionPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalInnerUnionPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalInnerUnionPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalInnerUnionPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalInnerUnionPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalInnerUnionPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalInnerUnionPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalInnerUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::InnerUnionPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalInnerUnionPatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::InnerUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalInnerUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::InnerUnionPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyUnionFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyUnionFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyUnionFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyUnionFieldPatch";
}

const folly::StringPiece MyUnionFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnionFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyUnionFieldPatchStruct::MyUnionFieldPatchStruct(const MyUnionFieldPatchStruct& srcObj) :
    __fbthrift_field_option1(srcObj.__fbthrift_field_option1),
    __fbthrift_field_option2(srcObj.__fbthrift_field_option2),
    __fbthrift_field_option3(srcObj.__fbthrift_field_option3),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_option1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_option2, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_option3, *this);
}

MyUnionFieldPatchStruct& MyUnionFieldPatchStruct::operator=(const MyUnionFieldPatchStruct& other) {
  MyUnionFieldPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MyUnionFieldPatchStruct::MyUnionFieldPatchStruct(FOLLY_MAYBE_UNUSED MyUnionFieldPatchStruct&& other) noexcept :
    __fbthrift_field_option1(std::move(other.__fbthrift_field_option1)),
    __fbthrift_field_option2(std::move(other.__fbthrift_field_option2)),
    __fbthrift_field_option3(std::move(other.__fbthrift_field_option3)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_option1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_option2, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_option3, *this);
}

MyUnionFieldPatchStruct& MyUnionFieldPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyUnionFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_option1 = std::move(other.__fbthrift_field_option1);
    this->__fbthrift_field_option2 = std::move(other.__fbthrift_field_option2);
    this->__fbthrift_field_option3 = std::move(other.__fbthrift_field_option3);
    __isset = other.__isset;
    return *this;
}


MyUnionFieldPatchStruct::MyUnionFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::op::StringPatch option1__arg, ::apache::thrift::op::I32Patch option2__arg, ::test::fixtures::patch::InnerUnionPatch option3__arg) :
    __fbthrift_field_option1(std::move(option1__arg)),
    __fbthrift_field_option2(std::move(option2__arg)),
    __fbthrift_field_option3(std::move(option3__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_option1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_option2, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_option3, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void MyUnionFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_option1, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_option2, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_option3, *this);
  __isset = {};
}

void MyUnionFieldPatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyUnionFieldPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyUnionFieldPatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyUnionFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_option1, rhs.__fbthrift_field_option1)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_option2, rhs.__fbthrift_field_option2)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_option3, rhs.__fbthrift_field_option3)) {
    return false;
  }
  return true;
}

bool MyUnionFieldPatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyUnionFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_option1, rhs.__fbthrift_field_option1)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_option1, rhs.__fbthrift_field_option1);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_option2, rhs.__fbthrift_field_option2)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_option2, rhs.__fbthrift_field_option2);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_option3, rhs.__fbthrift_field_option3)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_option3, rhs.__fbthrift_field_option3);
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED MyUnionFieldPatchStruct& a, FOLLY_MAYBE_UNUSED MyUnionFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_option1, b.__fbthrift_field_option1);
  swap(a.__fbthrift_field_option2, b.__fbthrift_field_option2);
  swap(a.__fbthrift_field_option3, b.__fbthrift_field_option3);
  swap(a.__isset, b.__isset);
}

template void MyUnionFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyUnionFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyUnionFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyUnionFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyUnionFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyUnionFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyUnionFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyUnionFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::StringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I32Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::InnerUnionPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyUnionPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyUnionPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyUnionPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyUnionPatch";
}

const folly::StringPiece MyUnionPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnionPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyUnionPatchStruct::MyUnionPatchStruct(const MyUnionPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

MyUnionPatchStruct& MyUnionPatchStruct::operator=(const MyUnionPatchStruct& other) {
  MyUnionPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MyUnionPatchStruct::MyUnionPatchStruct(FOLLY_MAYBE_UNUSED MyUnionPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

MyUnionPatchStruct& MyUnionPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyUnionPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


MyUnionPatchStruct::MyUnionPatchStruct(apache::thrift::FragileConstructor, ::test::fixtures::patch::MyUnion assign__arg, bool clear__arg, ::test::fixtures::patch::MyUnionFieldPatch patchPrior__arg, ::test::fixtures::patch::MyUnion ensure__arg, ::test::fixtures::patch::MyUnionFieldPatch patch__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
}


void MyUnionPatchStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_assign);
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset = {};
}

void MyUnionPatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyUnionPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyUnionPatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyUnionPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool MyUnionPatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyUnionPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return lhs.assign_ref() < rhs.assign_ref();
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}

const ::test::fixtures::patch::MyUnion& MyUnionPatchStruct::get_assign() const& {
  return __fbthrift_field_assign;
}

::test::fixtures::patch::MyUnion MyUnionPatchStruct::get_assign() && {
  return std::move(__fbthrift_field_assign);
}

const ::test::fixtures::patch::MyUnion& MyUnionPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::MyUnion MyUnionPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap(FOLLY_MAYBE_UNUSED MyUnionPatchStruct& a, FOLLY_MAYBE_UNUSED MyUnionPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void MyUnionPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyUnionPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyUnionPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyUnionPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyUnionPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyUnionPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyUnionPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyUnionPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionPatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::MyUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyUnionFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionPatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::MyUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyUnionFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::OptionalMyUnionPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::OptionalMyUnionPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* OptionalMyUnionPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/OptionalMyUnionPatch";
}

const folly::StringPiece OptionalMyUnionPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<OptionalMyUnionPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

OptionalMyUnionPatchStruct::OptionalMyUnionPatchStruct(const OptionalMyUnionPatchStruct& srcObj) :
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

OptionalMyUnionPatchStruct& OptionalMyUnionPatchStruct::operator=(const OptionalMyUnionPatchStruct& other) {
  OptionalMyUnionPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

OptionalMyUnionPatchStruct::OptionalMyUnionPatchStruct(FOLLY_MAYBE_UNUSED OptionalMyUnionPatchStruct&& other) noexcept :
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

OptionalMyUnionPatchStruct& OptionalMyUnionPatchStruct::operator=(FOLLY_MAYBE_UNUSED OptionalMyUnionPatchStruct&& other) noexcept {
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


OptionalMyUnionPatchStruct::OptionalMyUnionPatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyUnionPatch patchPrior__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion> ensure__arg, ::test::fixtures::patch::MyUnionPatch patch__arg) :
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void OptionalMyUnionPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  this->__fbthrift_field_ensure.reset();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset = {};
}

void OptionalMyUnionPatchStruct::__fbthrift_clear_terse_fields() {
}

bool OptionalMyUnionPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool OptionalMyUnionPatchStruct::operator==(FOLLY_MAYBE_UNUSED const OptionalMyUnionPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.ensure_ref(), rhs.ensure_ref()))) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool OptionalMyUnionPatchStruct::operator<(FOLLY_MAYBE_UNUSED const OptionalMyUnionPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior);
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.ensure_ref(), rhs.ensure_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.ensure_ref(), rhs.ensure_ref());
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED OptionalMyUnionPatchStruct& a, FOLLY_MAYBE_UNUSED OptionalMyUnionPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void OptionalMyUnionPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalMyUnionPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalMyUnionPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalMyUnionPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalMyUnionPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalMyUnionPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalMyUnionPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalMyUnionPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyUnionPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyUnionPatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::MyUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyUnionPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField21PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField21PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField21PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField21Patch";
}

const folly::StringPiece MyStructField21PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField21PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyStructField21PatchStruct::MyStructField21PatchStruct(const MyStructField21PatchStruct&) = default;
MyStructField21PatchStruct& MyStructField21PatchStruct::operator=(const MyStructField21PatchStruct&) = default;
MyStructField21PatchStruct::MyStructField21PatchStruct(FOLLY_MAYBE_UNUSED MyStructField21PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_prepend(std::move(other.__fbthrift_field_prepend)),
    __fbthrift_field_append(std::move(other.__fbthrift_field_append)),
    __isset(other.__isset) {
}

MyStructField21PatchStruct& MyStructField21PatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructField21PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_prepend = std::move(other.__fbthrift_field_prepend);
    this->__fbthrift_field_append = std::move(other.__fbthrift_field_append);
    __isset = other.__isset;
    return *this;
}


MyStructField21PatchStruct::MyStructField21PatchStruct(apache::thrift::FragileConstructor, ::std::vector<::std::int16_t> assign__arg, bool clear__arg, ::std::vector<::std::int16_t> prepend__arg, ::std::vector<::std::int16_t> append__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_prepend(std::move(prepend__arg)),
    __fbthrift_field_append(std::move(append__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void MyStructField21PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_prepend.clear();
  this->__fbthrift_field_append.clear();
  __isset = {};
}

void MyStructField21PatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructField21PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructField21PatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructField21PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (!(lhs.prepend_ref() == rhs.prepend_ref())) {
    return false;
  }
  if (!(lhs.append_ref() == rhs.append_ref())) {
    return false;
  }
  return true;
}

bool MyStructField21PatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyStructField21PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return lhs.assign_ref() < rhs.assign_ref();
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (!(lhs.prepend_ref() == rhs.prepend_ref())) {
    return lhs.prepend_ref() < rhs.prepend_ref();
  }
  if (!(lhs.append_ref() == rhs.append_ref())) {
    return lhs.append_ref() < rhs.append_ref();
  }
  return false;
}

const ::std::vector<::std::int16_t>* MyStructField21PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::vector<::std::int16_t>* MyStructField21PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::vector<::std::int16_t>& MyStructField21PatchStruct::get_prepend() const& {
  return __fbthrift_field_prepend;
}

::std::vector<::std::int16_t> MyStructField21PatchStruct::get_prepend() && {
  return std::move(__fbthrift_field_prepend);
}

const ::std::vector<::std::int16_t>& MyStructField21PatchStruct::get_append() const& {
  return __fbthrift_field_append;
}

::std::vector<::std::int16_t> MyStructField21PatchStruct::get_append() && {
  return std::move(__fbthrift_field_append);
}


void swap(FOLLY_MAYBE_UNUSED MyStructField21PatchStruct& a, FOLLY_MAYBE_UNUSED MyStructField21PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_prepend, b.__fbthrift_field_prepend);
  swap(a.__fbthrift_field_append, b.__fbthrift_field_append);
  swap(a.__isset, b.__isset);
}

template void MyStructField21PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField21PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField21PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField21PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField21PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField21PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField21PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField21PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::OptionalMyStructField21PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::OptionalMyStructField21PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* OptionalMyStructField21PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/OptionalMyStructField21Patch";
}

const folly::StringPiece OptionalMyStructField21PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<OptionalMyStructField21PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

OptionalMyStructField21PatchStruct::OptionalMyStructField21PatchStruct(const OptionalMyStructField21PatchStruct& srcObj) :
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

OptionalMyStructField21PatchStruct& OptionalMyStructField21PatchStruct::operator=(const OptionalMyStructField21PatchStruct& other) {
  OptionalMyStructField21PatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

OptionalMyStructField21PatchStruct::OptionalMyStructField21PatchStruct(FOLLY_MAYBE_UNUSED OptionalMyStructField21PatchStruct&& other) noexcept :
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

OptionalMyStructField21PatchStruct& OptionalMyStructField21PatchStruct::operator=(FOLLY_MAYBE_UNUSED OptionalMyStructField21PatchStruct&& other) noexcept {
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


OptionalMyStructField21PatchStruct::OptionalMyStructField21PatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyStructField21Patch patchPrior__arg, ::std::vector<::std::int16_t> ensure__arg, ::test::fixtures::patch::MyStructField21Patch patch__arg) :
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void OptionalMyStructField21PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::ListPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  this->__fbthrift_field_ensure.clear();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::ListPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset = {};
}

void OptionalMyStructField21PatchStruct::__fbthrift_clear_terse_fields() {
}

bool OptionalMyStructField21PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool OptionalMyStructField21PatchStruct::operator==(FOLLY_MAYBE_UNUSED const OptionalMyStructField21PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::ListPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::ListPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool OptionalMyStructField21PatchStruct::operator<(FOLLY_MAYBE_UNUSED const OptionalMyStructField21PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::ListPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::ListPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::ListPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::ListPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}

const ::std::vector<::std::int16_t>* OptionalMyStructField21PatchStruct::get_ensure() const& {
  return ensure_ref().has_value() ? std::addressof(__fbthrift_field_ensure) : nullptr;
}

::std::vector<::std::int16_t>* OptionalMyStructField21PatchStruct::get_ensure() & {
  return ensure_ref().has_value() ? std::addressof(__fbthrift_field_ensure) : nullptr;
}


void swap(FOLLY_MAYBE_UNUSED OptionalMyStructField21PatchStruct& a, FOLLY_MAYBE_UNUSED OptionalMyStructField21PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void OptionalMyStructField21PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalMyStructField21PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalMyStructField21PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalMyStructField21PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalMyStructField21PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalMyStructField21PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalMyStructField21PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalMyStructField21PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructField21PatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField21Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructField21PatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField21Patch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField22PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField22PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField22PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField22Patch";
}

const folly::StringPiece MyStructField22PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField22PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyStructField22PatchStruct::MyStructField22PatchStruct(const MyStructField22PatchStruct&) = default;
MyStructField22PatchStruct& MyStructField22PatchStruct::operator=(const MyStructField22PatchStruct&) = default;
MyStructField22PatchStruct::MyStructField22PatchStruct(FOLLY_MAYBE_UNUSED MyStructField22PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)),
    __fbthrift_field_add(std::move(other.__fbthrift_field_add)),
    __isset(other.__isset) {
}

MyStructField22PatchStruct& MyStructField22PatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructField22PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    this->__fbthrift_field_add = std::move(other.__fbthrift_field_add);
    __isset = other.__isset;
    return *this;
}


MyStructField22PatchStruct::MyStructField22PatchStruct(apache::thrift::FragileConstructor, ::std::set<::std::string> assign__arg, bool clear__arg, ::std::set<::std::string> remove__arg, ::std::set<::std::string> add__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_remove(std::move(remove__arg)),
    __fbthrift_field_add(std::move(add__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void MyStructField22PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_add.clear();
  __isset = {};
}

void MyStructField22PatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructField22PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructField22PatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructField22PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (!(lhs.remove_ref() == rhs.remove_ref())) {
    return false;
  }
  if (!(lhs.add_ref() == rhs.add_ref())) {
    return false;
  }
  return true;
}

bool MyStructField22PatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyStructField22PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return lhs.assign_ref() < rhs.assign_ref();
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (!(lhs.remove_ref() == rhs.remove_ref())) {
    return lhs.remove_ref() < rhs.remove_ref();
  }
  if (!(lhs.add_ref() == rhs.add_ref())) {
    return lhs.add_ref() < rhs.add_ref();
  }
  return false;
}

const ::std::set<::std::string>* MyStructField22PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::set<::std::string>* MyStructField22PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::set<::std::string>& MyStructField22PatchStruct::get_remove() const& {
  return __fbthrift_field_remove;
}

::std::set<::std::string> MyStructField22PatchStruct::get_remove() && {
  return std::move(__fbthrift_field_remove);
}

const ::std::set<::std::string>& MyStructField22PatchStruct::get_add() const& {
  return __fbthrift_field_add;
}

::std::set<::std::string> MyStructField22PatchStruct::get_add() && {
  return std::move(__fbthrift_field_add);
}


void swap(FOLLY_MAYBE_UNUSED MyStructField22PatchStruct& a, FOLLY_MAYBE_UNUSED MyStructField22PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
  swap(a.__fbthrift_field_add, b.__fbthrift_field_add);
  swap(a.__isset, b.__isset);
}

template void MyStructField22PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField22PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField22PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField22PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField22PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField22PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField22PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField22PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::OptionalMyStructField22PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::OptionalMyStructField22PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* OptionalMyStructField22PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/OptionalMyStructField22Patch";
}

const folly::StringPiece OptionalMyStructField22PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<OptionalMyStructField22PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

OptionalMyStructField22PatchStruct::OptionalMyStructField22PatchStruct(const OptionalMyStructField22PatchStruct& srcObj) :
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

OptionalMyStructField22PatchStruct& OptionalMyStructField22PatchStruct::operator=(const OptionalMyStructField22PatchStruct& other) {
  OptionalMyStructField22PatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

OptionalMyStructField22PatchStruct::OptionalMyStructField22PatchStruct(FOLLY_MAYBE_UNUSED OptionalMyStructField22PatchStruct&& other) noexcept :
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

OptionalMyStructField22PatchStruct& OptionalMyStructField22PatchStruct::operator=(FOLLY_MAYBE_UNUSED OptionalMyStructField22PatchStruct&& other) noexcept {
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


OptionalMyStructField22PatchStruct::OptionalMyStructField22PatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyStructField22Patch patchPrior__arg, ::std::set<::std::string> ensure__arg, ::test::fixtures::patch::MyStructField22Patch patch__arg) :
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void OptionalMyStructField22PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::SetPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  this->__fbthrift_field_ensure.clear();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::SetPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset = {};
}

void OptionalMyStructField22PatchStruct::__fbthrift_clear_terse_fields() {
}

bool OptionalMyStructField22PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool OptionalMyStructField22PatchStruct::operator==(FOLLY_MAYBE_UNUSED const OptionalMyStructField22PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::SetPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::SetPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool OptionalMyStructField22PatchStruct::operator<(FOLLY_MAYBE_UNUSED const OptionalMyStructField22PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::SetPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::SetPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::SetPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::SetPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}

const ::std::set<::std::string>* OptionalMyStructField22PatchStruct::get_ensure() const& {
  return ensure_ref().has_value() ? std::addressof(__fbthrift_field_ensure) : nullptr;
}

::std::set<::std::string>* OptionalMyStructField22PatchStruct::get_ensure() & {
  return ensure_ref().has_value() ? std::addressof(__fbthrift_field_ensure) : nullptr;
}


void swap(FOLLY_MAYBE_UNUSED OptionalMyStructField22PatchStruct& a, FOLLY_MAYBE_UNUSED OptionalMyStructField22PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void OptionalMyStructField22PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalMyStructField22PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalMyStructField22PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalMyStructField22PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalMyStructField22PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalMyStructField22PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalMyStructField22PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalMyStructField22PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructField22PatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField22Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructField22PatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField22Patch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField23PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField23PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField23PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField23Patch";
}

const folly::StringPiece MyStructField23PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField23PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyStructField23PatchStruct::MyStructField23PatchStruct(const MyStructField23PatchStruct&) = default;
MyStructField23PatchStruct& MyStructField23PatchStruct::operator=(const MyStructField23PatchStruct&) = default;
MyStructField23PatchStruct::MyStructField23PatchStruct(FOLLY_MAYBE_UNUSED MyStructField23PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_add(std::move(other.__fbthrift_field_add)),
    __fbthrift_field_put(std::move(other.__fbthrift_field_put)),
    __isset(other.__isset) {
}

MyStructField23PatchStruct& MyStructField23PatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructField23PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_add = std::move(other.__fbthrift_field_add);
    this->__fbthrift_field_put = std::move(other.__fbthrift_field_put);
    __isset = other.__isset;
    return *this;
}


MyStructField23PatchStruct::MyStructField23PatchStruct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::string> assign__arg, bool clear__arg, ::std::map<::std::string, ::std::string> add__arg, ::std::map<::std::string, ::std::string> put__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_add(std::move(add__arg)),
    __fbthrift_field_put(std::move(put__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void MyStructField23PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_add.clear();
  this->__fbthrift_field_put.clear();
  __isset = {};
}

void MyStructField23PatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructField23PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructField23PatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructField23PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (!(lhs.add_ref() == rhs.add_ref())) {
    return false;
  }
  if (!(lhs.put_ref() == rhs.put_ref())) {
    return false;
  }
  return true;
}

bool MyStructField23PatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyStructField23PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return lhs.assign_ref() < rhs.assign_ref();
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (!(lhs.add_ref() == rhs.add_ref())) {
    return lhs.add_ref() < rhs.add_ref();
  }
  if (!(lhs.put_ref() == rhs.put_ref())) {
    return lhs.put_ref() < rhs.put_ref();
  }
  return false;
}

const ::std::map<::std::string, ::std::string>* MyStructField23PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::map<::std::string, ::std::string>* MyStructField23PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::map<::std::string, ::std::string>& MyStructField23PatchStruct::get_add() const& {
  return __fbthrift_field_add;
}

::std::map<::std::string, ::std::string> MyStructField23PatchStruct::get_add() && {
  return std::move(__fbthrift_field_add);
}

const ::std::map<::std::string, ::std::string>& MyStructField23PatchStruct::get_put() const& {
  return __fbthrift_field_put;
}

::std::map<::std::string, ::std::string> MyStructField23PatchStruct::get_put() && {
  return std::move(__fbthrift_field_put);
}


void swap(FOLLY_MAYBE_UNUSED MyStructField23PatchStruct& a, FOLLY_MAYBE_UNUSED MyStructField23PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_add, b.__fbthrift_field_add);
  swap(a.__fbthrift_field_put, b.__fbthrift_field_put);
  swap(a.__isset, b.__isset);
}

template void MyStructField23PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField23PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField23PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField23PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField23PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField23PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField23PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField23PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::OptionalMyStructField23PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::OptionalMyStructField23PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* OptionalMyStructField23PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/OptionalMyStructField23Patch";
}

const folly::StringPiece OptionalMyStructField23PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<OptionalMyStructField23PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

OptionalMyStructField23PatchStruct::OptionalMyStructField23PatchStruct(const OptionalMyStructField23PatchStruct& srcObj) :
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

OptionalMyStructField23PatchStruct& OptionalMyStructField23PatchStruct::operator=(const OptionalMyStructField23PatchStruct& other) {
  OptionalMyStructField23PatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

OptionalMyStructField23PatchStruct::OptionalMyStructField23PatchStruct(FOLLY_MAYBE_UNUSED OptionalMyStructField23PatchStruct&& other) noexcept :
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

OptionalMyStructField23PatchStruct& OptionalMyStructField23PatchStruct::operator=(FOLLY_MAYBE_UNUSED OptionalMyStructField23PatchStruct&& other) noexcept {
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


OptionalMyStructField23PatchStruct::OptionalMyStructField23PatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyStructField23Patch patchPrior__arg, ::std::map<::std::string, ::std::string> ensure__arg, ::test::fixtures::patch::MyStructField23Patch patch__arg) :
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void OptionalMyStructField23PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::MapPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  this->__fbthrift_field_ensure.clear();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::MapPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset = {};
}

void OptionalMyStructField23PatchStruct::__fbthrift_clear_terse_fields() {
}

bool OptionalMyStructField23PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool OptionalMyStructField23PatchStruct::operator==(FOLLY_MAYBE_UNUSED const OptionalMyStructField23PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::MapPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::MapPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool OptionalMyStructField23PatchStruct::operator<(FOLLY_MAYBE_UNUSED const OptionalMyStructField23PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::MapPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::MapPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::MapPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::MapPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}

const ::std::map<::std::string, ::std::string>* OptionalMyStructField23PatchStruct::get_ensure() const& {
  return ensure_ref().has_value() ? std::addressof(__fbthrift_field_ensure) : nullptr;
}

::std::map<::std::string, ::std::string>* OptionalMyStructField23PatchStruct::get_ensure() & {
  return ensure_ref().has_value() ? std::addressof(__fbthrift_field_ensure) : nullptr;
}


void swap(FOLLY_MAYBE_UNUSED OptionalMyStructField23PatchStruct& a, FOLLY_MAYBE_UNUSED OptionalMyStructField23PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void OptionalMyStructField23PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalMyStructField23PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalMyStructField23PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalMyStructField23PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalMyStructField23PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalMyStructField23PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalMyStructField23PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalMyStructField23PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructField23PatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField23Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructField23PatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField23Patch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructFieldPatch";
}

const folly::StringPiece MyStructFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyStructFieldPatchStruct::MyStructFieldPatchStruct(const MyStructFieldPatchStruct& srcObj) :
    __fbthrift_field_boolVal(srcObj.__fbthrift_field_boolVal),
    __fbthrift_field_byteVal(srcObj.__fbthrift_field_byteVal),
    __fbthrift_field_i16Val(srcObj.__fbthrift_field_i16Val),
    __fbthrift_field_i32Val(srcObj.__fbthrift_field_i32Val),
    __fbthrift_field_i64Val(srcObj.__fbthrift_field_i64Val),
    __fbthrift_field_floatVal(srcObj.__fbthrift_field_floatVal),
    __fbthrift_field_doubleVal(srcObj.__fbthrift_field_doubleVal),
    __fbthrift_field_stringVal(srcObj.__fbthrift_field_stringVal),
    __fbthrift_field_binaryVal(srcObj.__fbthrift_field_binaryVal),
    __fbthrift_field_structVal(srcObj.__fbthrift_field_structVal),
    __fbthrift_field_optBoolVal(srcObj.__fbthrift_field_optBoolVal),
    __fbthrift_field_optByteVal(srcObj.__fbthrift_field_optByteVal),
    __fbthrift_field_optI16Val(srcObj.__fbthrift_field_optI16Val),
    __fbthrift_field_optI32Val(srcObj.__fbthrift_field_optI32Val),
    __fbthrift_field_optI64Val(srcObj.__fbthrift_field_optI64Val),
    __fbthrift_field_optFloatVal(srcObj.__fbthrift_field_optFloatVal),
    __fbthrift_field_optDoubleVal(srcObj.__fbthrift_field_optDoubleVal),
    __fbthrift_field_optStringVal(srcObj.__fbthrift_field_optStringVal),
    __fbthrift_field_optBinaryVal(srcObj.__fbthrift_field_optBinaryVal),
    __fbthrift_field_optStructVal(srcObj.__fbthrift_field_optStructVal),
    __fbthrift_field_optListVal(srcObj.__fbthrift_field_optListVal),
    __fbthrift_field_optSetVal(srcObj.__fbthrift_field_optSetVal),
    __fbthrift_field_optMapVal(srcObj.__fbthrift_field_optMapVal),
    __fbthrift_field_unionVal(srcObj.__fbthrift_field_unionVal),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter, 1>(__fbthrift_field_boolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_byteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 3>(__fbthrift_field_i16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 4>(__fbthrift_field_i32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 5>(__fbthrift_field_i64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 6>(__fbthrift_field_floatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 7>(__fbthrift_field_doubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 8>(__fbthrift_field_stringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, 9>(__fbthrift_field_binaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 10>(__fbthrift_field_structVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 11>(__fbthrift_field_optBoolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 12>(__fbthrift_field_optByteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 13>(__fbthrift_field_optI16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 14>(__fbthrift_field_optI32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 15>(__fbthrift_field_optI64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 16>(__fbthrift_field_optFloatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 17>(__fbthrift_field_optDoubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 18>(__fbthrift_field_optStringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 19>(__fbthrift_field_optBinaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 20>(__fbthrift_field_optStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 21>(__fbthrift_field_optListVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 22>(__fbthrift_field_optSetVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 23>(__fbthrift_field_optMapVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 30>(__fbthrift_field_unionVal, *this);
}

MyStructFieldPatchStruct& MyStructFieldPatchStruct::operator=(const MyStructFieldPatchStruct& other) {
  MyStructFieldPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MyStructFieldPatchStruct::MyStructFieldPatchStruct(FOLLY_MAYBE_UNUSED MyStructFieldPatchStruct&& other) noexcept :
    __fbthrift_field_boolVal(std::move(other.__fbthrift_field_boolVal)),
    __fbthrift_field_byteVal(std::move(other.__fbthrift_field_byteVal)),
    __fbthrift_field_i16Val(std::move(other.__fbthrift_field_i16Val)),
    __fbthrift_field_i32Val(std::move(other.__fbthrift_field_i32Val)),
    __fbthrift_field_i64Val(std::move(other.__fbthrift_field_i64Val)),
    __fbthrift_field_floatVal(std::move(other.__fbthrift_field_floatVal)),
    __fbthrift_field_doubleVal(std::move(other.__fbthrift_field_doubleVal)),
    __fbthrift_field_stringVal(std::move(other.__fbthrift_field_stringVal)),
    __fbthrift_field_binaryVal(std::move(other.__fbthrift_field_binaryVal)),
    __fbthrift_field_structVal(std::move(other.__fbthrift_field_structVal)),
    __fbthrift_field_optBoolVal(std::move(other.__fbthrift_field_optBoolVal)),
    __fbthrift_field_optByteVal(std::move(other.__fbthrift_field_optByteVal)),
    __fbthrift_field_optI16Val(std::move(other.__fbthrift_field_optI16Val)),
    __fbthrift_field_optI32Val(std::move(other.__fbthrift_field_optI32Val)),
    __fbthrift_field_optI64Val(std::move(other.__fbthrift_field_optI64Val)),
    __fbthrift_field_optFloatVal(std::move(other.__fbthrift_field_optFloatVal)),
    __fbthrift_field_optDoubleVal(std::move(other.__fbthrift_field_optDoubleVal)),
    __fbthrift_field_optStringVal(std::move(other.__fbthrift_field_optStringVal)),
    __fbthrift_field_optBinaryVal(std::move(other.__fbthrift_field_optBinaryVal)),
    __fbthrift_field_optStructVal(std::move(other.__fbthrift_field_optStructVal)),
    __fbthrift_field_optListVal(std::move(other.__fbthrift_field_optListVal)),
    __fbthrift_field_optSetVal(std::move(other.__fbthrift_field_optSetVal)),
    __fbthrift_field_optMapVal(std::move(other.__fbthrift_field_optMapVal)),
    __fbthrift_field_unionVal(std::move(other.__fbthrift_field_unionVal)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter, 1>(__fbthrift_field_boolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_byteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 3>(__fbthrift_field_i16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 4>(__fbthrift_field_i32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 5>(__fbthrift_field_i64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 6>(__fbthrift_field_floatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 7>(__fbthrift_field_doubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 8>(__fbthrift_field_stringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, 9>(__fbthrift_field_binaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 10>(__fbthrift_field_structVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 11>(__fbthrift_field_optBoolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 12>(__fbthrift_field_optByteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 13>(__fbthrift_field_optI16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 14>(__fbthrift_field_optI32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 15>(__fbthrift_field_optI64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 16>(__fbthrift_field_optFloatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 17>(__fbthrift_field_optDoubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 18>(__fbthrift_field_optStringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 19>(__fbthrift_field_optBinaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 20>(__fbthrift_field_optStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 21>(__fbthrift_field_optListVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 22>(__fbthrift_field_optSetVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 23>(__fbthrift_field_optMapVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 30>(__fbthrift_field_unionVal, *this);
}

MyStructFieldPatchStruct& MyStructFieldPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_boolVal = std::move(other.__fbthrift_field_boolVal);
    this->__fbthrift_field_byteVal = std::move(other.__fbthrift_field_byteVal);
    this->__fbthrift_field_i16Val = std::move(other.__fbthrift_field_i16Val);
    this->__fbthrift_field_i32Val = std::move(other.__fbthrift_field_i32Val);
    this->__fbthrift_field_i64Val = std::move(other.__fbthrift_field_i64Val);
    this->__fbthrift_field_floatVal = std::move(other.__fbthrift_field_floatVal);
    this->__fbthrift_field_doubleVal = std::move(other.__fbthrift_field_doubleVal);
    this->__fbthrift_field_stringVal = std::move(other.__fbthrift_field_stringVal);
    this->__fbthrift_field_binaryVal = std::move(other.__fbthrift_field_binaryVal);
    this->__fbthrift_field_structVal = std::move(other.__fbthrift_field_structVal);
    this->__fbthrift_field_optBoolVal = std::move(other.__fbthrift_field_optBoolVal);
    this->__fbthrift_field_optByteVal = std::move(other.__fbthrift_field_optByteVal);
    this->__fbthrift_field_optI16Val = std::move(other.__fbthrift_field_optI16Val);
    this->__fbthrift_field_optI32Val = std::move(other.__fbthrift_field_optI32Val);
    this->__fbthrift_field_optI64Val = std::move(other.__fbthrift_field_optI64Val);
    this->__fbthrift_field_optFloatVal = std::move(other.__fbthrift_field_optFloatVal);
    this->__fbthrift_field_optDoubleVal = std::move(other.__fbthrift_field_optDoubleVal);
    this->__fbthrift_field_optStringVal = std::move(other.__fbthrift_field_optStringVal);
    this->__fbthrift_field_optBinaryVal = std::move(other.__fbthrift_field_optBinaryVal);
    this->__fbthrift_field_optStructVal = std::move(other.__fbthrift_field_optStructVal);
    this->__fbthrift_field_optListVal = std::move(other.__fbthrift_field_optListVal);
    this->__fbthrift_field_optSetVal = std::move(other.__fbthrift_field_optSetVal);
    this->__fbthrift_field_optMapVal = std::move(other.__fbthrift_field_optMapVal);
    this->__fbthrift_field_unionVal = std::move(other.__fbthrift_field_unionVal);
    __isset = other.__isset;
    return *this;
}


MyStructFieldPatchStruct::MyStructFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::op::BoolPatch boolVal__arg, ::apache::thrift::op::BytePatch byteVal__arg, ::apache::thrift::op::I16Patch i16Val__arg, ::apache::thrift::op::I32Patch i32Val__arg, ::apache::thrift::op::I64Patch i64Val__arg, ::apache::thrift::op::FloatPatch floatVal__arg, ::apache::thrift::op::DoublePatch doubleVal__arg, ::apache::thrift::op::StringPatch stringVal__arg, ::apache::thrift::op::BinaryPatch binaryVal__arg, ::test::fixtures::patch::MyDataPatch structVal__arg, ::apache::thrift::op::OptionalBoolPatch optBoolVal__arg, ::apache::thrift::op::OptionalBytePatch optByteVal__arg, ::apache::thrift::op::OptionalI16Patch optI16Val__arg, ::apache::thrift::op::OptionalI32Patch optI32Val__arg, ::apache::thrift::op::OptionalI64Patch optI64Val__arg, ::apache::thrift::op::OptionalFloatPatch optFloatVal__arg, ::apache::thrift::op::OptionalDoublePatch optDoubleVal__arg, ::apache::thrift::op::OptionalStringPatch optStringVal__arg, ::apache::thrift::op::OptionalBinaryPatch optBinaryVal__arg, ::test::fixtures::patch::OptionalMyDataPatch optStructVal__arg, ::test::fixtures::patch::OptionalMyStructField21Patch optListVal__arg, ::test::fixtures::patch::OptionalMyStructField22Patch optSetVal__arg, ::test::fixtures::patch::OptionalMyStructField23Patch optMapVal__arg, ::test::fixtures::patch::MyUnionPatch unionVal__arg) :
    __fbthrift_field_boolVal(std::move(boolVal__arg)),
    __fbthrift_field_byteVal(std::move(byteVal__arg)),
    __fbthrift_field_i16Val(std::move(i16Val__arg)),
    __fbthrift_field_i32Val(std::move(i32Val__arg)),
    __fbthrift_field_i64Val(std::move(i64Val__arg)),
    __fbthrift_field_floatVal(std::move(floatVal__arg)),
    __fbthrift_field_doubleVal(std::move(doubleVal__arg)),
    __fbthrift_field_stringVal(std::move(stringVal__arg)),
    __fbthrift_field_binaryVal(std::move(binaryVal__arg)),
    __fbthrift_field_structVal(std::move(structVal__arg)),
    __fbthrift_field_optBoolVal(std::move(optBoolVal__arg)),
    __fbthrift_field_optByteVal(std::move(optByteVal__arg)),
    __fbthrift_field_optI16Val(std::move(optI16Val__arg)),
    __fbthrift_field_optI32Val(std::move(optI32Val__arg)),
    __fbthrift_field_optI64Val(std::move(optI64Val__arg)),
    __fbthrift_field_optFloatVal(std::move(optFloatVal__arg)),
    __fbthrift_field_optDoubleVal(std::move(optDoubleVal__arg)),
    __fbthrift_field_optStringVal(std::move(optStringVal__arg)),
    __fbthrift_field_optBinaryVal(std::move(optBinaryVal__arg)),
    __fbthrift_field_optStructVal(std::move(optStructVal__arg)),
    __fbthrift_field_optListVal(std::move(optListVal__arg)),
    __fbthrift_field_optSetVal(std::move(optSetVal__arg)),
    __fbthrift_field_optMapVal(std::move(optMapVal__arg)),
    __fbthrift_field_unionVal(std::move(unionVal__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter, 1>(__fbthrift_field_boolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_byteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 3>(__fbthrift_field_i16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 4>(__fbthrift_field_i32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 5>(__fbthrift_field_i64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 6>(__fbthrift_field_floatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 7>(__fbthrift_field_doubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 8>(__fbthrift_field_stringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, 9>(__fbthrift_field_binaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 10>(__fbthrift_field_structVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 11>(__fbthrift_field_optBoolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 12>(__fbthrift_field_optByteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 13>(__fbthrift_field_optI16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 14>(__fbthrift_field_optI32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 15>(__fbthrift_field_optI64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 16>(__fbthrift_field_optFloatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 17>(__fbthrift_field_optDoubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 18>(__fbthrift_field_optStringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 19>(__fbthrift_field_optBinaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 20>(__fbthrift_field_optStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 21>(__fbthrift_field_optListVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 22>(__fbthrift_field_optSetVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 23>(__fbthrift_field_optMapVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 30>(__fbthrift_field_unionVal, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
  __isset.set(folly::index_constant<18>(), true);
  __isset.set(folly::index_constant<19>(), true);
  __isset.set(folly::index_constant<20>(), true);
  __isset.set(folly::index_constant<21>(), true);
  __isset.set(folly::index_constant<22>(), true);
  __isset.set(folly::index_constant<23>(), true);
}


void MyStructFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::BoolPatchAdapter, 1>(__fbthrift_field_boolVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_byteVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 3>(__fbthrift_field_i16Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 4>(__fbthrift_field_i32Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 5>(__fbthrift_field_i64Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 6>(__fbthrift_field_floatVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 7>(__fbthrift_field_doubleVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StringPatchAdapter, 8>(__fbthrift_field_stringVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::AssignPatchAdapter, 9>(__fbthrift_field_binaryVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StructPatchAdapter, 10>(__fbthrift_field_structVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 11>(__fbthrift_field_optBoolVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 12>(__fbthrift_field_optByteVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 13>(__fbthrift_field_optI16Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 14>(__fbthrift_field_optI32Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 15>(__fbthrift_field_optI64Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 16>(__fbthrift_field_optFloatVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 17>(__fbthrift_field_optDoubleVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 18>(__fbthrift_field_optStringVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 19>(__fbthrift_field_optBinaryVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 20>(__fbthrift_field_optStructVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 21>(__fbthrift_field_optListVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 22>(__fbthrift_field_optSetVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 23>(__fbthrift_field_optMapVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionPatchAdapter, 30>(__fbthrift_field_unionVal, *this);
  __isset = {};
}

void MyStructFieldPatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructFieldPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructFieldPatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::BoolPatchAdapter>(lhs.__fbthrift_field_boolVal, rhs.__fbthrift_field_boolVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_byteVal, rhs.__fbthrift_field_byteVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i16Val, rhs.__fbthrift_field_i16Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i32Val, rhs.__fbthrift_field_i32Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i64Val, rhs.__fbthrift_field_i64Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_floatVal, rhs.__fbthrift_field_floatVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_doubleVal, rhs.__fbthrift_field_doubleVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_stringVal, rhs.__fbthrift_field_stringVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_binaryVal, rhs.__fbthrift_field_binaryVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_structVal, rhs.__fbthrift_field_structVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optBoolVal, rhs.__fbthrift_field_optBoolVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optByteVal, rhs.__fbthrift_field_optByteVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI16Val, rhs.__fbthrift_field_optI16Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI32Val, rhs.__fbthrift_field_optI32Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI64Val, rhs.__fbthrift_field_optI64Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optFloatVal, rhs.__fbthrift_field_optFloatVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optDoubleVal, rhs.__fbthrift_field_optDoubleVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optStringVal, rhs.__fbthrift_field_optStringVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optBinaryVal, rhs.__fbthrift_field_optBinaryVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optStructVal, rhs.__fbthrift_field_optStructVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optListVal, rhs.__fbthrift_field_optListVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optSetVal, rhs.__fbthrift_field_optSetVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optMapVal, rhs.__fbthrift_field_optMapVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_unionVal, rhs.__fbthrift_field_unionVal)) {
    return false;
  }
  return true;
}

bool MyStructFieldPatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyStructFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::BoolPatchAdapter>(lhs.__fbthrift_field_boolVal, rhs.__fbthrift_field_boolVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::BoolPatchAdapter>(lhs.__fbthrift_field_boolVal, rhs.__fbthrift_field_boolVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_byteVal, rhs.__fbthrift_field_byteVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_byteVal, rhs.__fbthrift_field_byteVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i16Val, rhs.__fbthrift_field_i16Val)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i16Val, rhs.__fbthrift_field_i16Val);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i32Val, rhs.__fbthrift_field_i32Val)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i32Val, rhs.__fbthrift_field_i32Val);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i64Val, rhs.__fbthrift_field_i64Val)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i64Val, rhs.__fbthrift_field_i64Val);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_floatVal, rhs.__fbthrift_field_floatVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_floatVal, rhs.__fbthrift_field_floatVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_doubleVal, rhs.__fbthrift_field_doubleVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_doubleVal, rhs.__fbthrift_field_doubleVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_stringVal, rhs.__fbthrift_field_stringVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_stringVal, rhs.__fbthrift_field_stringVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_binaryVal, rhs.__fbthrift_field_binaryVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_binaryVal, rhs.__fbthrift_field_binaryVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_structVal, rhs.__fbthrift_field_structVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_structVal, rhs.__fbthrift_field_structVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optBoolVal, rhs.__fbthrift_field_optBoolVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optBoolVal, rhs.__fbthrift_field_optBoolVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optByteVal, rhs.__fbthrift_field_optByteVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optByteVal, rhs.__fbthrift_field_optByteVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI16Val, rhs.__fbthrift_field_optI16Val)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI16Val, rhs.__fbthrift_field_optI16Val);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI32Val, rhs.__fbthrift_field_optI32Val)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI32Val, rhs.__fbthrift_field_optI32Val);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI64Val, rhs.__fbthrift_field_optI64Val)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI64Val, rhs.__fbthrift_field_optI64Val);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optFloatVal, rhs.__fbthrift_field_optFloatVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optFloatVal, rhs.__fbthrift_field_optFloatVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optDoubleVal, rhs.__fbthrift_field_optDoubleVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optDoubleVal, rhs.__fbthrift_field_optDoubleVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optStringVal, rhs.__fbthrift_field_optStringVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optStringVal, rhs.__fbthrift_field_optStringVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optBinaryVal, rhs.__fbthrift_field_optBinaryVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optBinaryVal, rhs.__fbthrift_field_optBinaryVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optStructVal, rhs.__fbthrift_field_optStructVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optStructVal, rhs.__fbthrift_field_optStructVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optListVal, rhs.__fbthrift_field_optListVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optListVal, rhs.__fbthrift_field_optListVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optSetVal, rhs.__fbthrift_field_optSetVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optSetVal, rhs.__fbthrift_field_optSetVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optMapVal, rhs.__fbthrift_field_optMapVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optMapVal, rhs.__fbthrift_field_optMapVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_unionVal, rhs.__fbthrift_field_unionVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_unionVal, rhs.__fbthrift_field_unionVal);
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED MyStructFieldPatchStruct& a, FOLLY_MAYBE_UNUSED MyStructFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_boolVal, b.__fbthrift_field_boolVal);
  swap(a.__fbthrift_field_byteVal, b.__fbthrift_field_byteVal);
  swap(a.__fbthrift_field_i16Val, b.__fbthrift_field_i16Val);
  swap(a.__fbthrift_field_i32Val, b.__fbthrift_field_i32Val);
  swap(a.__fbthrift_field_i64Val, b.__fbthrift_field_i64Val);
  swap(a.__fbthrift_field_floatVal, b.__fbthrift_field_floatVal);
  swap(a.__fbthrift_field_doubleVal, b.__fbthrift_field_doubleVal);
  swap(a.__fbthrift_field_stringVal, b.__fbthrift_field_stringVal);
  swap(a.__fbthrift_field_binaryVal, b.__fbthrift_field_binaryVal);
  swap(a.__fbthrift_field_structVal, b.__fbthrift_field_structVal);
  swap(a.__fbthrift_field_optBoolVal, b.__fbthrift_field_optBoolVal);
  swap(a.__fbthrift_field_optByteVal, b.__fbthrift_field_optByteVal);
  swap(a.__fbthrift_field_optI16Val, b.__fbthrift_field_optI16Val);
  swap(a.__fbthrift_field_optI32Val, b.__fbthrift_field_optI32Val);
  swap(a.__fbthrift_field_optI64Val, b.__fbthrift_field_optI64Val);
  swap(a.__fbthrift_field_optFloatVal, b.__fbthrift_field_optFloatVal);
  swap(a.__fbthrift_field_optDoubleVal, b.__fbthrift_field_optDoubleVal);
  swap(a.__fbthrift_field_optStringVal, b.__fbthrift_field_optStringVal);
  swap(a.__fbthrift_field_optBinaryVal, b.__fbthrift_field_optBinaryVal);
  swap(a.__fbthrift_field_optStructVal, b.__fbthrift_field_optStructVal);
  swap(a.__fbthrift_field_optListVal, b.__fbthrift_field_optListVal);
  swap(a.__fbthrift_field_optSetVal, b.__fbthrift_field_optSetVal);
  swap(a.__fbthrift_field_optMapVal, b.__fbthrift_field_optMapVal);
  swap(a.__fbthrift_field_unionVal, b.__fbthrift_field_unionVal);
  swap(a.__isset, b.__isset);
}

template void MyStructFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BoolPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BytePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I16Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I32Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I64Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::FloatPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::DoublePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::StringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BinaryPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalBoolPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalBytePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalI16Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalI32Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalI64Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalFloatPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalDoublePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalStringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalBinaryPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::OptionalMyDataPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::OptionalMyStructField21Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::OptionalMyStructField22Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::OptionalMyStructField23Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyUnionPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructPatch";
}

const folly::StringPiece MyStructPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

MyStructPatchStruct::MyStructPatchStruct(const MyStructPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

MyStructPatchStruct& MyStructPatchStruct::operator=(const MyStructPatchStruct& other) {
  MyStructPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MyStructPatchStruct::MyStructPatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}


MyStructPatchStruct::~MyStructPatchStruct() {}

MyStructPatchStruct::MyStructPatchStruct(FOLLY_MAYBE_UNUSED MyStructPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

MyStructPatchStruct& MyStructPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


MyStructPatchStruct::MyStructPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct> assign__arg, bool clear__arg, ::test::fixtures::patch::MyStructFieldPatch patchPrior__arg, ::test::fixtures::patch::MyStruct ensure__arg, ::test::fixtures::patch::MyStructFieldPatch patch__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void MyStructPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset = {};
}

void MyStructPatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructPatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool MyStructPatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyStructPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.assign_ref(), rhs.assign_ref());
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::FieldPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}

const ::test::fixtures::patch::MyStruct& MyStructPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::MyStruct MyStructPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap(FOLLY_MAYBE_UNUSED MyStructPatchStruct& a, FOLLY_MAYBE_UNUSED MyStructPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void MyStructPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::OptionalMyStructPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::OptionalMyStructPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* OptionalMyStructPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/OptionalMyStructPatch";
}

const folly::StringPiece OptionalMyStructPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<OptionalMyStructPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}

OptionalMyStructPatchStruct::OptionalMyStructPatchStruct(const OptionalMyStructPatchStruct& srcObj) :
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

OptionalMyStructPatchStruct& OptionalMyStructPatchStruct::operator=(const OptionalMyStructPatchStruct& other) {
  OptionalMyStructPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

OptionalMyStructPatchStruct::OptionalMyStructPatchStruct(FOLLY_MAYBE_UNUSED OptionalMyStructPatchStruct&& other) noexcept :
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 6>(__fbthrift_field_patch, *this);
}

OptionalMyStructPatchStruct& OptionalMyStructPatchStruct::operator=(FOLLY_MAYBE_UNUSED OptionalMyStructPatchStruct&& other) noexcept {
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


OptionalMyStructPatchStruct::OptionalMyStructPatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyStructPatch patchPrior__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct> ensure__arg, ::test::fixtures::patch::MyStructPatch patch__arg) :
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void OptionalMyStructPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
  this->__fbthrift_field_ensure.reset();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StructPatchAdapter, 6>(__fbthrift_field_patch, *this);
  __isset = {};
}

void OptionalMyStructPatchStruct::__fbthrift_clear_terse_fields() {
}

bool OptionalMyStructPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool OptionalMyStructPatchStruct::operator==(FOLLY_MAYBE_UNUSED const OptionalMyStructPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.ensure_ref(), rhs.ensure_ref()))) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool OptionalMyStructPatchStruct::operator<(FOLLY_MAYBE_UNUSED const OptionalMyStructPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior);
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.ensure_ref(), rhs.ensure_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.ensure_ref(), rhs.ensure_ref());
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED OptionalMyStructPatchStruct& a, FOLLY_MAYBE_UNUSED OptionalMyStructPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__isset, b.__isset);
}

template void OptionalMyStructPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalMyStructPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalMyStructPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalMyStructPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalMyStructPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalMyStructPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalMyStructPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalMyStructPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace test { namespace fixtures { namespace patch { namespace {
FOLLY_MAYBE_UNUSED FOLLY_ERASE void validateAdapters() {
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StringPatchAdapter, 1, ::apache::thrift::op::StringPatchStruct, ::test::fixtures::patch::MyDataFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 2, ::apache::thrift::op::I32PatchStruct, ::test::fixtures::patch::MyDataFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 3, ::test::fixtures::patch::MyDataFieldPatchStruct, ::test::fixtures::patch::MyDataPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 6, ::test::fixtures::patch::MyDataFieldPatchStruct, ::test::fixtures::patch::MyDataPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter, 3, ::test::fixtures::patch::MyDataPatchStruct, ::test::fixtures::patch::OptionalMyDataPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter, 6, ::test::fixtures::patch::MyDataPatchStruct, ::test::fixtures::patch::OptionalMyDataPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::AssignPatchAdapter, 1, ::apache::thrift::op::BinaryPatchStruct, ::test::fixtures::patch::InnerUnionFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 3, ::test::fixtures::patch::InnerUnionFieldPatchStruct, ::test::fixtures::patch::InnerUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 6, ::test::fixtures::patch::InnerUnionFieldPatchStruct, ::test::fixtures::patch::InnerUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionPatchAdapter, 3, ::test::fixtures::patch::InnerUnionPatchStruct, ::test::fixtures::patch::OptionalInnerUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionPatchAdapter, 6, ::test::fixtures::patch::InnerUnionPatchStruct, ::test::fixtures::patch::OptionalInnerUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StringPatchAdapter, 1, ::apache::thrift::op::StringPatchStruct, ::test::fixtures::patch::MyUnionFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 2, ::apache::thrift::op::I32PatchStruct, ::test::fixtures::patch::MyUnionFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionPatchAdapter, 3, ::test::fixtures::patch::InnerUnionPatchStruct, ::test::fixtures::patch::MyUnionFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 3, ::test::fixtures::patch::MyUnionFieldPatchStruct, ::test::fixtures::patch::MyUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 6, ::test::fixtures::patch::MyUnionFieldPatchStruct, ::test::fixtures::patch::MyUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionPatchAdapter, 3, ::test::fixtures::patch::MyUnionPatchStruct, ::test::fixtures::patch::OptionalMyUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionPatchAdapter, 6, ::test::fixtures::patch::MyUnionPatchStruct, ::test::fixtures::patch::OptionalMyUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::ListPatchAdapter, 3, ::test::fixtures::patch::MyStructField21PatchStruct, ::test::fixtures::patch::OptionalMyStructField21PatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::ListPatchAdapter, 6, ::test::fixtures::patch::MyStructField21PatchStruct, ::test::fixtures::patch::OptionalMyStructField21PatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::SetPatchAdapter, 3, ::test::fixtures::patch::MyStructField22PatchStruct, ::test::fixtures::patch::OptionalMyStructField22PatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::SetPatchAdapter, 6, ::test::fixtures::patch::MyStructField22PatchStruct, ::test::fixtures::patch::OptionalMyStructField22PatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::MapPatchAdapter, 3, ::test::fixtures::patch::MyStructField23PatchStruct, ::test::fixtures::patch::OptionalMyStructField23PatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::MapPatchAdapter, 6, ::test::fixtures::patch::MyStructField23PatchStruct, ::test::fixtures::patch::OptionalMyStructField23PatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::BoolPatchAdapter, 1, ::apache::thrift::op::BoolPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 2, ::apache::thrift::op::BytePatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 3, ::apache::thrift::op::I16PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 4, ::apache::thrift::op::I32PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 5, ::apache::thrift::op::I64PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 6, ::apache::thrift::op::FloatPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 7, ::apache::thrift::op::DoublePatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StringPatchAdapter, 8, ::apache::thrift::op::StringPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::AssignPatchAdapter, 9, ::apache::thrift::op::BinaryPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter, 10, ::test::fixtures::patch::MyDataPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 11, ::apache::thrift::op::OptionalBoolPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 12, ::apache::thrift::op::OptionalBytePatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 13, ::apache::thrift::op::OptionalI16PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 14, ::apache::thrift::op::OptionalI32PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 15, ::apache::thrift::op::OptionalI64PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 16, ::apache::thrift::op::OptionalFloatPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 17, ::apache::thrift::op::OptionalDoublePatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 18, ::apache::thrift::op::OptionalStringPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 19, ::apache::thrift::op::OptionalBinaryPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 20, ::test::fixtures::patch::OptionalMyDataPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 21, ::test::fixtures::patch::OptionalMyStructField21PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 22, ::test::fixtures::patch::OptionalMyStructField22PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 23, ::test::fixtures::patch::OptionalMyStructField23PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionPatchAdapter, 30, ::test::fixtures::patch::MyUnionPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 3, ::test::fixtures::patch::MyStructFieldPatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter, 6, ::test::fixtures::patch::MyStructFieldPatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter, 3, ::test::fixtures::patch::MyStructPatchStruct, ::test::fixtures::patch::OptionalMyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter, 6, ::test::fixtures::patch::MyStructPatchStruct, ::test::fixtures::patch::OptionalMyStructPatchStruct>();
}
}}}} // test::fixtures::patch
