[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([3:10-34], "\\const_mutation_immvector");
      fd_fun =
      { f_span = [3:1-6:2]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_ret = ((void), (Some ([3:56-60], (Hprim Tvoid))));
        f_params =
        [{ param_annotation = (ImmVector<int>); param_type_hint = ((ImmVector<int>), (Some ([3:35-49], (Happly (([3:35-44], "\\HH\\ImmVector"), [([3:45-48], (Hprim Tint))])))));
           param_is_variadic = false; param_pos = [3:50-52]; param_name = "$x"; 
           param_expr = None; param_readonly = None; param_callconv = Pnormal; 
           param_user_attributes = []; param_visibility = None }
          ];
        f_ctxs = None; f_unsafe_ctxs = None;
        f_body =
        { fb_ast =
          [([5:3-13],
            (Expr
               ((int), [5:3-12],
                (Binop
                   { bop = (Eq None);
                     lhs =
                     ((int), [5:3-8],
                      (Array_get (((ImmVector<int>), [5:3-5], (Hole (((ImmVector<int>), [5:3-5], (Lvar ([5:3-5], $x))), (ImmVector<int>), (Vector<int>), Typing))), (Some (
                         (int), [5:6-7], (Int "0"))))));
                     rhs = ((int), [5:11-12], (Int "1")) }))))
            ]
          };
        f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
        f_doc_comment = None };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([8:10-36], "\\const_mutation_constvector");
       fd_fun =
       { f_span = [8:1-11:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((void), (Some ([8:60-64], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (ConstVector<int>); param_type_hint = ((ConstVector<int>), (Some ([8:37-53], (Happly (([8:37-48], "\\ConstVector"), [([8:49-52], (Hprim Tint))])))));
            param_is_variadic = false; param_pos = [8:54-56]; param_name = "$x"; 
            param_expr = None; param_readonly = None; param_callconv = Pnormal; 
            param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([10:3-13],
             (Expr
                ((int), [10:3-12],
                 (Binop
                    { bop = (Eq None);
                      lhs =
                      ((int), [10:3-8],
                       (Array_get (((ConstVector<int>), [10:3-5], (Hole (((ConstVector<int>), [10:3-5], (Lvar ([10:3-5], $x))), (ConstVector<int>), (Vector<int>), Typing))),
                          (Some ((int), [10:6-7], (Int "0"))))));
                      rhs = ((int), [10:11-12], (Int "1")) }))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] })