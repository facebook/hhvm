write foo.php
  <?hh
  class Foo {
    public function getSomething(): Bar {
      throw new Exception('not implemented');
    }
  }

write bar.php
  <?hh
  class Bar {
    public function someMethod(): int {
      return 3;
    }
  }

write baz.php
  <?hh
  class Baz {
    public function someMethod(): string {
      return 'baz';
    }
  }

write uses_foo.php
  <?hh
  function uses_foo(): int {
    $foo = new Foo();

    // There's an implicit dependency here that only arises from the definition
    // of `Foo::getSomething`.
    //
    // We don't change the contents of this file, and yet, when the definition
    // of `Foo` changes, the dependencies of this file can change!
    $something = $foo->getSomething();

    // Will return `int` at the saved-state, but `string` after the change
    // after the saved-state.
    return $something->someMethod();
  }

generate-saved-state
calculate-fanout foo.php
calculate-errors

write foo.php
  <?hh
  class Foo {
    // Return type now changed -- downstream users may have different
    // dependencies.
    public function getSomething(): Baz {
      throw new Exception('not implemented');
    }
  }
calculate-fanout foo.php
calculate-errors
