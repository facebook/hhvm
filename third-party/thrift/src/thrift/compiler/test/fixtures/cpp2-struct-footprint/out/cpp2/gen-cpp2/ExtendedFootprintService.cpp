/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#include "thrift/compiler/test/fixtures/cpp2-struct-footprint/gen-cpp2/ExtendedFootprintService.h"
#include "thrift/compiler/test/fixtures/cpp2-struct-footprint/gen-cpp2/ExtendedFootprintService.tcc"
#include "thrift/compiler/test/fixtures/cpp2-struct-footprint/gen-cpp2/module_metadata.h"
#include <thrift/lib/cpp2/gen/service_cpp.h>

std::unique_ptr<apache::thrift::AsyncProcessor> apache::thrift::ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService>::getProcessor() {
  return std::make_unique<::cpp2_struct_footprint::ExtendedFootprintServiceAsyncProcessor>(this);
}

apache::thrift::ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService>::CreateMethodMetadataResult apache::thrift::ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService>::createMethodMetadata() {
  return ::apache::thrift::detail::ap::createMethodMetadataMap<::cpp2_struct_footprint::ExtendedFootprintServiceAsyncProcessor>(getServiceRequestInfoMap().value().get());
}


std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> apache::thrift::ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService>::getServiceRequestInfoMap() const {
  return __fbthrift_serviceInfoHolder.requestInfoMap();
}

::cpp2_struct_footprint::ExtendedFootprintServiceServiceInfoHolder apache::thrift::ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService>::__fbthrift_serviceInfoHolder;

//
// Service Methods
//

//
// Method 'getComplexMap'
//

void apache::thrift::ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService>::getComplexMap(::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>& /*_return*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getComplexMap");
}

void apache::thrift::ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService>::sync_getComplexMap(::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>& _return) {
  return getComplexMap(_return);
}

folly::SemiFuture<std::unique_ptr<::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>>>
apache::thrift::ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService>::semifuture_getComplexMap() {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_getComplexMap.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  auto ret = std::make_unique<::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>>();
  sync_getComplexMap(*ret);
  return folly::makeSemiFuture(std::move(ret));
}

folly::Future<std::unique_ptr<::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>>>
apache::thrift::ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService>::future_getComplexMap() {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_getComplexMap.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  return apache::thrift::detail::si::future(
      semifuture_getComplexMap(),
      getInternalKeepAlive());
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<std::unique_ptr<::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>>>
apache::thrift::ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService>::co_getComplexMap() {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_getComplexMap.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Future,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<>());
}

folly::coro::Task<std::unique_ptr<::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>>> apache::thrift::ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService>::co_getComplexMap(
    apache::thrift::RequestParams /* params */) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_getComplexMap.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_getComplexMap();
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService>::async_tm_getComplexMap(
    apache::thrift::HandlerCallbackPtr<std::unique_ptr<::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>>> callback) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_getComplexMap.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_getComplexMap.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_getComplexMap(params);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_getComplexMap.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::Future,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::Future: {
        auto fut = future_getComplexMap();
        apache::thrift::detail::si::async_tm_future(
            std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_getComplexMap();
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_getComplexMap(params);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_getComplexMap();
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        ::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>> _return;
        sync_getComplexMap(_return);
        callback->result(std::move(_return));
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie() = std::move(ex).restoreArgs<>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'getComplexMap'
//

//
// End of Service Methods
//


namespace cpp2_struct_footprint {

void ExtendedFootprintServiceSvNull::getComplexMap(::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>& /*_return*/) {  }


std::string_view ExtendedFootprintServiceAsyncProcessor::getServiceName() {
  return "ExtendedFootprintService";
}

void ExtendedFootprintServiceAsyncProcessor::getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  ::apache::thrift::detail::md::ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService>>::gen(response);
}

void ExtendedFootprintServiceAsyncProcessor::processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, iface_, std::move(req), std::move(serializedRequest), methodMetadata, protType, context, eb, tm);
}

void ExtendedFootprintServiceAsyncProcessor::executeRequest(apache::thrift::ServerRequest&& request, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) {
  apache::thrift::detail::ap::execute(this, std::move(request), apache::thrift::detail::ServerRequestHelper::protocol(request), methodMetadata);
}

const ExtendedFootprintServiceAsyncProcessor::ProcessMap& ExtendedFootprintServiceAsyncProcessor::getOwnProcessMap() {
  return kOwnProcessMap_;
}

const ExtendedFootprintServiceAsyncProcessor::ProcessMap ExtendedFootprintServiceAsyncProcessor::kOwnProcessMap_ {
  {"getComplexMap",
    {&ExtendedFootprintServiceAsyncProcessor::setUpAndProcess_getComplexMap<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &ExtendedFootprintServiceAsyncProcessor::setUpAndProcess_getComplexMap<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &ExtendedFootprintServiceAsyncProcessor::executeRequest_getComplexMap<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &ExtendedFootprintServiceAsyncProcessor::executeRequest_getComplexMap<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
};

apache::thrift::ServiceRequestInfoMap const& ExtendedFootprintServiceServiceInfoHolder::requestInfoMap() const {
  static folly::Indestructible<apache::thrift::ServiceRequestInfoMap> requestInfoMap{staticRequestInfoMap()};
  return *requestInfoMap;
}

apache::thrift::ServiceRequestInfoMap ExtendedFootprintServiceServiceInfoHolder::staticRequestInfoMap() {
  apache::thrift::ServiceRequestInfoMap requestInfoMap = {
  {"getComplexMap",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
     "ExtendedFootprintService.getComplexMap",
     std::nullopt,
     apache::thrift::concurrency::NORMAL,
     std::nullopt}},
  };
  apache::thrift::ServiceRequestInfoMap parentMap = ::cpp2_struct_footprint::FootprintTestServiceServiceInfoHolder::staticRequestInfoMap();
  requestInfoMap.insert(std::begin(parentMap), std::end(parentMap));

  return requestInfoMap;
}
} // namespace cpp2_struct_footprint

namespace apache::thrift::detail {
}
