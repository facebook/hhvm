/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/lazy_deserialization/src/simple.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/lazy_deserialization/gen-cpp2/simple_types_custom_protocol.h"

namespace apache::thrift::test {

template void Foo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Foo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Foo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Foo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void LazyFoo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t LazyFoo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LazyFoo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LazyFoo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void OptionalFoo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalFoo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalFoo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalFoo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void OptionalLazyFoo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalLazyFoo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalLazyFoo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalLazyFoo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void OptionalBoxedLazyFoo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalBoxedLazyFoo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalBoxedLazyFoo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalBoxedLazyFoo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void LazyCppRef::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t LazyCppRef::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LazyCppRef::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LazyCppRef::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void IndexedFoo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t IndexedFoo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t IndexedFoo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t IndexedFoo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void OptionalIndexedFoo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalIndexedFoo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalIndexedFoo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalIndexedFoo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void Empty::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Empty::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Empty::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Empty::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // namespace apache::thrift::test
