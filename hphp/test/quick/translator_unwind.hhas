# Tests unwinding with dirty callee-saved registers that are mapped to
# execution stack locations.

.function thrower() {
  NewObjD "Exception"
  Dup
  NullUninit
  NullUninit
    String "hi"
  FCallCtor <LockWhileUnwinding> 1 1 "" - "" ""
  PopC
  LockObj
  Throw
}

.class DtorPrinter {
  .method [public] __construct($id) {
    String "ctor: "
    CGetL $id
    Concat
    String "\n"
    Concat
    Print
    PopC

    This
    CGetL $id
    BaseC 1 Define
    SetM 1 PT:"x"
    PopC
    Int 1
    RetC
  }

  .property [private] x;
}

.function make_obj($id) {
  NewObjD "DtorPrinter"
  Dup
  NullUninit
  NullUninit
    CGetL $id
  FCallCtor <LockWhileUnwinding> 1 1 "" - "" ""
  PopC
  LockObj
  RetC
}

# We do this in a separate scope to avoid
# having the $k_* locals in test_unwind_dirty_stack_regs()
# getting caught in the $context parameter to handler()
.function get_undefined_var() {
  CGetL $k_99  # undefined variable
  RetC
}

# This test is dependent on the register allocator implementation, but
# probably better than nothing and unlikely to significantly change.
# It seems fairly hard to get a EMIT_CALL to happen while a Stack
# location is in a dirty callee-saved register with our normal php
# emitter, but this accomplishes it by CGetL'ing everything to the
# stack.

.function test_unwind_dirty_stack_regs() {
  NullUninit
  NullUninit
  NullUninit
    Int 0
  FCallFuncD <> 1 1 "" - "" "make_obj"
  SetL $k_0
  PopC
  NullUninit
  NullUninit
  NullUninit
    Int 1
  FCallFuncD <> 1 1 "" - "" "make_obj"
  SetL $k_1
  PopC
  NullUninit
  NullUninit
  NullUninit
    Int 2
  FCallFuncD <> 1 1 "" - "" "make_obj"
  SetL $k_2
  PopC
  NullUninit
  NullUninit
  NullUninit
    Int 3
  FCallFuncD <> 1 1 "" - "" "make_obj"
  SetL $k_3
  PopC
  NullUninit
  NullUninit
  NullUninit
    Int 4
  FCallFuncD <> 1 1 "" - "" "make_obj"
  SetL $k_4
  PopC
  NullUninit
  NullUninit
  NullUninit
    Int 5
  FCallFuncD <> 1 1 "" - "" "make_obj"
  SetL $k_5
  PopC
  NullUninit
  NullUninit
  NullUninit
    Int 6
  FCallFuncD <> 1 1 "" - "" "make_obj"
  SetL $k_6
  PopC
  NullUninit
  NullUninit
  NullUninit
    Int 7
  FCallFuncD <> 1 1 "" - "" "make_obj"
  SetL $k_7
  PopC
  NullUninit
  NullUninit
  NullUninit
    Int 8
  FCallFuncD <> 1 1 "" - "" "make_obj"
  SetL $k_8
  PopC
  NullUninit
  NullUninit
  NullUninit
    Int 9
  FCallFuncD <> 1 1 "" - "" "make_obj"
  SetL $k_9
  PopC
  NullUninit
  NullUninit
  NullUninit
    Int 10
  FCallFuncD <> 1 1 "" - "" "make_obj"
  SetL $k_10
  PopC
  NullUninit
  NullUninit
  NullUninit
    Int 11
  FCallFuncD <> 1 1 "" - "" "make_obj"
  SetL $k_11
  PopC
  NullUninit
  NullUninit
  NullUninit
    Int 12
  FCallFuncD <> 1 1 "" - "" "make_obj"
  SetL $k_12
  PopC
  NullUninit
  NullUninit
  NullUninit
    Int 13
  FCallFuncD <> 1 1 "" - "" "make_obj"
  SetL $k_13
  PopC
  NullUninit
  NullUninit
  NullUninit
    Int 14
  FCallFuncD <> 1 1 "" - "" "make_obj"
  SetL $k_14
  PopC

  CGetL $k_0
  CGetL $k_1
  CGetL $k_2
  CGetL $k_3
  CGetL $k_4
  CGetL $k_5
  CGetL $k_6
  CGetL $k_7
  CGetL $k_8
  CGetL $k_9
  CGetL $k_10
  CGetL $k_11
  CGetL $k_12
  CGetL $k_13
  CGetL $k_14

  NullUninit
  NullUninit
  NullUninit
  FCallFuncD <> 0 1 "" - "" "get_undefined_var"
  PopC

  # This code isn't reached---but let's Pop this junk just so
  # theoretically we could pass verification some day.
  PopC # k_0
  PopC
  PopC
  PopC
  PopC # k_4

  PopC
  PopC
  PopC
  PopC
  PopC # k_9

  PopC
  PopC
  PopC
  PopC
  PopC # k_14

  Int 1
  RetC
}

.function ["__EntryPoint"("""y:0:{}""")] main() {
  NullUninit
  NullUninit
  NullUninit
    String "thrower"
  FCallFuncD <> 1 1 "" - "" "set_error_handler"
  PopC

  # If get_undefined_var is inlined then the context passed to handler will
  # contain the locals from test_unwind_dirty_stack_regs in an array which will
  # be stored along wtih other arguments inside the exception unless we pass
  # ignore args. If this happens the exception will keep the DtorPrinter objects
  # alive past the end of test_unwind_dirty_stack_regs.
  NullUninit
  NullUninit
  NullUninit
    CnsE "DEBUG_BACKTRACE_IGNORE_ARGS"
  FCallClsMethodD <> 1 1 "" - "" "" "Exception" "setTraceOptions"
  PopC

  .try {
    NullUninit
    NullUninit
    NullUninit
    FCallFuncD <> 0 1 "" - "" "test_unwind_dirty_stack_regs"
    RetC
  } .catch {
    SetL _1
    PopC
    String "Received exception:  "
    PushL _1
    NullUninit
    NullUninit
    FCallObjMethodD <> 0 1 "" - "" "" NullThrows "getMessage"
    Concat
    String "\n"
    Concat
    Print
    PopC
    Int 1
    RetC
  } 
}
