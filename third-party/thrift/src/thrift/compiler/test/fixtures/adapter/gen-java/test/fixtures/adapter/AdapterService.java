/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.adapter;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.service.*;
import com.facebook.thrift.client.*;
import com.google.common.util.concurrent.ListenableFuture;
import java.io.*;
import java.util.*;
import reactor.core.publisher.Mono;

@SwiftGenerated
@com.facebook.swift.service.ThriftService("AdapterService")
public interface AdapterService extends java.io.Closeable, com.facebook.thrift.util.BlockingService {
    static com.facebook.thrift.server.RpcServerHandlerBuilder<AdapterService> serverHandlerBuilder(AdapterService _serverImpl) {
        return new com.facebook.thrift.server.RpcServerHandlerBuilder<AdapterService>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                return new AdapterServiceRpcServerHandler(impl, eventHandlers);
            }
        };
    }

    static com.facebook.thrift.client.ClientBuilder<AdapterService> clientBuilder() {
        return new ClientBuilder<AdapterService>() {
            @java.lang.Override
            public AdapterService build(Mono<RpcClient> rpcClientMono) {
                AdapterService.Reactive _delegate =
                    new AdapterServiceReactiveClient(protocolId, rpcClientMono, headers, persistentHeaders);
                return new AdapterServiceReactiveBlockingWrapper(_delegate);
            }
        };
    }

    @com.facebook.swift.service.ThriftService("AdapterService")
    public interface Async extends java.io.Closeable, com.facebook.thrift.util.AsyncService {
        static com.facebook.thrift.server.RpcServerHandlerBuilder<AdapterService.Async> serverHandlerBuilder(AdapterService.Async _serverImpl) {
            return new com.facebook.thrift.server.RpcServerHandlerBuilder<AdapterService.Async>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                    return new AdapterServiceRpcServerHandler(impl, eventHandlers);
                }
            };
        }

        static com.facebook.thrift.client.ClientBuilder<AdapterService.Async> clientBuilder() {
            return new ClientBuilder<AdapterService.Async>() {
                @java.lang.Override
                public AdapterService.Async build(Mono<RpcClient> rpcClientMono) {
                    AdapterService.Reactive _delegate =
                        new AdapterServiceReactiveClient(protocolId, rpcClientMono, headers, persistentHeaders);
                    return new AdapterServiceReactiveAsyncWrapper(_delegate);
                }
            };
        }

        @java.lang.Override void close();

        @ThriftMethod(value = "count")
        ListenableFuture<test.fixtures.adapter.CountingStruct> count();

        default ListenableFuture<test.fixtures.adapter.CountingStruct> count(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default ListenableFuture<ResponseWrapper<test.fixtures.adapter.CountingStruct>> countWrapper(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @ThriftMethod(value = "adaptedTypes")
        ListenableFuture<test.fixtures.adapter.HeapAllocated> adaptedTypes(
            @com.facebook.swift.codec.ThriftField(value=1, name="arg", requiredness=Requiredness.NONE) final test.fixtures.adapter.HeapAllocated arg);

        default ListenableFuture<test.fixtures.adapter.HeapAllocated> adaptedTypes(
            @com.facebook.swift.codec.ThriftField(value=1, name="arg", requiredness=Requiredness.NONE) final test.fixtures.adapter.HeapAllocated arg,
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default ListenableFuture<ResponseWrapper<test.fixtures.adapter.HeapAllocated>> adaptedTypesWrapper(
            @com.facebook.swift.codec.ThriftField(value=1, name="arg", requiredness=Requiredness.NONE) final test.fixtures.adapter.HeapAllocated arg,
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }
    }
    @java.lang.Override void close();

    @ThriftMethod(value = "count")
    test.fixtures.adapter.CountingStruct count() throws org.apache.thrift.TException;

    default test.fixtures.adapter.CountingStruct count(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    default ResponseWrapper<test.fixtures.adapter.CountingStruct> countWrapper(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    @ThriftMethod(value = "adaptedTypes")
    test.fixtures.adapter.HeapAllocated adaptedTypes(
        @com.facebook.swift.codec.ThriftField(value=1, name="arg", requiredness=Requiredness.NONE) final test.fixtures.adapter.HeapAllocated arg) throws org.apache.thrift.TException;

    default test.fixtures.adapter.HeapAllocated adaptedTypes(
        @com.facebook.swift.codec.ThriftField(value=1, name="arg", requiredness=Requiredness.NONE) final test.fixtures.adapter.HeapAllocated arg,
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    default ResponseWrapper<test.fixtures.adapter.HeapAllocated> adaptedTypesWrapper(
        @com.facebook.swift.codec.ThriftField(value=1, name="arg", requiredness=Requiredness.NONE) final test.fixtures.adapter.HeapAllocated arg,
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    @com.facebook.swift.service.ThriftService("AdapterService")
    interface Reactive extends reactor.core.Disposable, com.facebook.thrift.util.ReactiveService {
        static com.facebook.thrift.server.RpcServerHandlerBuilder<AdapterService.Reactive> serverHandlerBuilder(AdapterService.Reactive _serverImpl) {
            return new com.facebook.thrift.server.RpcServerHandlerBuilder<AdapterService.Reactive>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                    return new AdapterServiceRpcServerHandler(impl, eventHandlers);
                }
            };
        }

        static com.facebook.thrift.client.ClientBuilder<AdapterService.Reactive> clientBuilder() {
            return new ClientBuilder<AdapterService.Reactive>() {
                @java.lang.Override
                public AdapterService.Reactive build(Mono<RpcClient> rpcClientMono) {
                    return new AdapterServiceReactiveClient(protocolId, rpcClientMono, headers, persistentHeaders);
                }
            };
        }

        @ThriftMethod(value = "count")
        reactor.core.publisher.Mono<test.fixtures.adapter.CountingStruct> count();

        default reactor.core.publisher.Mono<test.fixtures.adapter.CountingStruct> count(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Mono<ResponseWrapper<test.fixtures.adapter.CountingStruct>> countWrapper(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @ThriftMethod(value = "adaptedTypes")
        reactor.core.publisher.Mono<test.fixtures.adapter.HeapAllocated> adaptedTypes(final test.fixtures.adapter.HeapAllocated arg);

        default reactor.core.publisher.Mono<test.fixtures.adapter.HeapAllocated> adaptedTypes(final test.fixtures.adapter.HeapAllocated arg, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Mono<ResponseWrapper<test.fixtures.adapter.HeapAllocated>> adaptedTypesWrapper(final test.fixtures.adapter.HeapAllocated arg, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

    }
}
