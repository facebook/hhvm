{
  "__fbthrift": "@generated",
  "thrift_module" : "cpp",
  "includes": {
    "scope": "thrift/annotation/scope.thrift",
    "thrift": "thrift/annotation/thrift.thrift"
  },
  "namespaces": {
    "go": "thrift.annotation.cpp",
    "java": "com.facebook.thrift.annotation.cpp_deprecated",
    "js": "thrift.annotation.cpp",
    "py": "thrift.annotation.cpp",
    "py.asyncio": "facebook_thrift_asyncio.annotation.cpp"
  },
  "enumerations" :
  {
      "RefType" : {
        "name" : "RefType",
        "constants" : {
          "Unique" : {
            "name" : "Unique",
            "lineno" : 40,
            "value" : 0
          },
          "Shared" : {
            "name" : "Shared",
            "lineno" : 41,
            "value" : 1
          },
          "SharedMutable" : {
            "name" : "SharedMutable",
            "lineno" : 42,
            "value" : 2
          }
        },
        "lineno" : 39
      },
      "EnumUnderlyingType" : {
        "name" : "EnumUnderlyingType",
        "constants" : {
          "I8" : {
            "name" : "I8",
            "docstring" : "::std::int8_t\n",
            "lineno" : 213,
            "value" : 0
          },
          "U8" : {
            "name" : "U8",
            "docstring" : "::std::uint8_t\n",
            "lineno" : 215,
            "value" : 1
          },
          "I16" : {
            "name" : "I16",
            "docstring" : "::std::int16_t\n",
            "lineno" : 217,
            "value" : 2
          },
          "U16" : {
            "name" : "U16",
            "docstring" : "::std::uint16_t\n",
            "lineno" : 219,
            "value" : 3
          },
          "U32" : {
            "name" : "U32",
            "docstring" : "::std::uint32_t\n",
            "lineno" : 221,
            "value" : 4
          }
        },
        "docstring" : "Enum in C++ by default uses signed 32 bit integer. There is no need to specify\nunderlying type for signed 32 bit integer.\n",
        "lineno" : 211
      }
      },
  "structs" :
  {
      "Type" : {
        "name" : "Type",
        "structured_annotations": {
          "scope.Typedef" : {
        "type" : {
  "type" : "struct",
  "name" : "Typedef",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Changes the native type of a Thrift object.\n`name` and `template` correspond to `cpp.type` and `cpp.template` respecively.\n",
        "fields" : {
          "name" : {
            "name" : "name",
            "key" : 1,
            "lineno" : 35,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "template" : {
            "name" : "template",
            "key" : 2,
            "lineno" : 36,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 32
      },
      "Ref" : {
        "name" : "Ref",
        "structured_annotations": {
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "fields" : {
          "type" : {
            "name" : "type",
            "key" : 1,
            "lineno" : 47,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "enum",
  "name" : "RefType"
}
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 45
      },
      "Lazy" : {
        "name" : "Lazy",
        "structured_annotations": {
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "fields" : {
          "ref" : {
            "name" : "ref",
            "default_value" : 0,
            "key" : 1,
            "lineno" : 53,
            "required" : "opt-in-req-out",
            "type" : "bool"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 50
      },
      "DisableLazyChecksum" : {
        "name" : "DisableLazyChecksum",
        "structured_annotations": {
          "scope.Struct" : {
        "type" : {
  "type" : "struct",
  "name" : "Struct",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 56
      },
      "Adapter" : {
        "name" : "Adapter",
        "structured_annotations": {
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Typedef" : {
        "type" : {
  "type" : "struct",
  "name" : "Typedef",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Structured" : {
        "type" : {
  "type" : "struct",
  "name" : "Structured",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Const" : {
        "type" : {
  "type" : "struct",
  "name" : "Const",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "An annotation that applies a C++ adapter to typedef, field, or struct.\n\nFor example:\n\n  @cpp.Adapter{name = \"::ns::IdAdapter\"}\n  typedef i64 MyI64;\n\nHere the type `MyI64` has the C++ adapter `IdAdapter`.\n\n  struct User {\n    @cpp.Adapter{name = \"::ns::IdAdapter\"}\n    1: i64 id;\n  }\n\nHere the field `id` has the C++ adapter `IdAdapter`.\n",
        "fields" : {
          "name" : {
            "name" : "name",
            "docstring" : "The name of a C++ adapter type used to convert between Thrift and native\nC++ representation.\n\nThe adapter can be either a Type or Field adapter, providing either of the following APIs:\n\n    struct ThriftTypeAdapter {\n      static AdaptedType fromThrift(ThriftType thrift);\n      static {const ThriftType& | ThriftType} toThrift(const AdaptedType& native);\n    };\n\n    struct ThriftFieldAdapter {\n      // Context is an instantiation of apache::thrift::FieldContext\n      template <class Context>\n      static void construct(AdaptedType& field, Context ctx);\n\n      template <class Context>\n      static AdaptedType fromThriftField(ThriftType value, Context ctx);\n\n      template <class Context>\n      static {const ThriftType& | ThriftType} toThrift(const AdaptedType& adapted, Context ctx);\n    };\n",
            "key" : 1,
            "lineno" : 104,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "adaptedType" : {
            "name" : "adaptedType",
            "docstring" : "It is sometimes necessary to specify AdaptedType here (in case the codegen would\nhave a circular depdenceny, which will cause the C++ build to fail).\n",
            "key" : 2,
            "lineno" : 110,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "underlyingName" : {
            "name" : "underlyingName",
            "docstring" : "The name and/or extra namespace to use when directly adapting a type\n(as opposed a typedef).\n\nIn this case, the IDL name of the type will refer to the adapted type in\nC++ and the underlying thrift type will be generated in a nested\nnamespace and/or with a different name.\n\nIf neither `underlyingName` or `extraNamespace` is provided, the\nunderlying type will be generated in a nested 'detail' namespace with\nthe same name.\n",
            "key" : 3,
            "lineno" : 124,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "extraNamespace" : {
            "name" : "extraNamespace",
            "key" : 4,
            "lineno" : 125,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "moveOnly" : {
            "name" : "moveOnly",
            "docstring" : "Must set to true when adapted type is not copyable.\n",
            "key" : 5,
            "lineno" : 128,
            "required" : "opt-in-req-out",
            "type" : "bool"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 76
      },
      "PackIsset" : {
        "name" : "PackIsset",
        "structured_annotations": {
          "scope.Struct" : {
        "type" : {
  "type" : "struct",
  "name" : "Struct",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "fields" : {
          "atomic" : {
            "name" : "atomic",
            "default_value" : 1,
            "key" : 1,
            "lineno" : 133,
            "required" : "opt-in-req-out",
            "type" : "bool"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 131
      },
      "MinimizePadding" : {
        "name" : "MinimizePadding",
        "structured_annotations": {
          "scope.Struct" : {
        "type" : {
  "type" : "struct",
  "name" : "Struct",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 136
      },
      "TriviallyRelocatable" : {
        "name" : "TriviallyRelocatable",
        "structured_annotations": {
          "scope.Struct" : {
        "type" : {
  "type" : "struct",
  "name" : "Struct",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 139
      },
      "ScopedEnumAsUnionType" : {
        "name" : "ScopedEnumAsUnionType",
        "structured_annotations": {
          "scope.Union" : {
        "type" : {
  "type" : "struct",
  "name" : "Union",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 142
      },
      "StrongType" : {
        "name" : "StrongType",
        "structured_annotations": {
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental",
  "path" : "thrift/annotation/thrift.thrift"
},
        "value" : {}
      },
          "scope.Typedef" : {
        "type" : {
  "type" : "struct",
  "name" : "Typedef",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates a typedef should be 'strong', and require an explicit cast to\nthe underlying type.\n\nCurrently only works for integer typedefs, for example:\n\n    @cpp.StrongType\n    typedef i32 MyId;\n\nWill cause an enum class to be used instead of a typedef in the genearte code, for example:\n\n    enum class MyId : ::std::int32_t {};\n\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 159
      },
      "FieldInterceptor" : {
        "name" : "FieldInterceptor",
        "structured_annotations": {
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental",
  "path" : "thrift/annotation/thrift.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "An annotation that intercepts field access with C++ field interceptor.\nUse with *caution* since this may introduce substantial performance overhead on each field access.\n\nFor example:\n\n    struct Foo {\n      @cpp.FieldInterceptor{name = \"MyFieldInterceptor\"}\n      1: i64 id;\n    }\n\nThe field interceptor `MyFieldInterceptor` will intercept with `interceptThriftFieldAccess`\nwhen the field `id` is accessed.\n",
        "fields" : {
          "name" : {
            "name" : "name",
            "docstring" : "The name of a field interceptor.\n\nThe field interceptor provides the following API:\n\n    struct ThriftFieldInterceptor {\n      template <typename T, typename Struct, int16_t FieldId>\n      static void interceptThriftFieldAccess(T&& field,\n                                             apache::thrift::FieldContext<Struct, FieldId>&& ctx);\n    };\n\nThe field interceptor intercepts with the field value and the field context.\nIt enforces an easily searchable function name `interceptThriftFieldAccess`.\n",
            "key" : 1,
            "lineno" : 194,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "noinline" : {
            "name" : "noinline",
            "docstring" : "Setting to true makes compiler not inline and erase function signature for\nthe intercepting field accessor.\n",
            "key" : 2,
            "lineno" : 200,
            "required" : "opt-in-req-out",
            "type" : "bool"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 177
      },
      "UseOpEncode" : {
        "name" : "UseOpEncode",
        "structured_annotations": {
          "scope.Program" : {
        "type" : {
  "type" : "struct",
  "name" : "Program",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Structured" : {
        "type" : {
  "type" : "struct",
  "name" : "Structured",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 203
      },
      "EnumType" : {
        "name" : "EnumType",
        "structured_annotations": {
          "scope.Enum" : {
        "type" : {
  "type" : "struct",
  "name" : "Enum",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates an integer type for C++ to use as the underlying type of enum, for example:\n\n    @cpp.EnumType{type = cpp.EnumUnderlyingType.I8}\n    enum Fruit {\n      Apple = 0,\n      Banana = 1,\n    }\n\nwill be generated into the following:\n\n    enum class Fruit : ::std::int8_t {\n      Apple = 0,\n      Banana = 1,\n    };\n\n",
        "fields" : {
          "type" : {
            "name" : "type",
            "key" : 1,
            "lineno" : 243,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "enum",
  "name" : "EnumUnderlyingType"
}
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 241
      },
      "Frozen2Exclude" : {
        "name" : "Frozen2Exclude",
        "structured_annotations": {
          "scope.Structured" : {
        "type" : {
  "type" : "struct",
  "name" : "Structured",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates that frozen types should not be generated for a given struct.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 249
      },
      "Frozen2RequiresCompleteContainerParams" : {
        "name" : "Frozen2RequiresCompleteContainerParams",
        "structured_annotations": {
          "scope.Typedef" : {
        "type" : {
  "type" : "struct",
  "name" : "Typedef",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates that the container params must be complete at the time this type is instantiated.\nOnly required in rare cases where the build fails with a frozen-related assert failure.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 256
      }
      },
  "source_path" : "thrift/annotation/cpp",
  "py_namespace" : "thrift.annotation.cpp"
}
