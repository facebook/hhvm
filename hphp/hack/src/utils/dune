; splitted utils:utils
(library
  (name trie)
  (wrapped false)
  (modules
    trie)
  (libraries
    utils_core))

(library
  (name utils_find)
  (wrapped false)
  (modules
    findUtils)
  (libraries
    ignore
    relative_path))

(library
  (name utils_php_escape)
  (wrapped false)
  (modules
    php_escaping))

(library
  (name utils_scheduler)
  (wrapped false)
  (modules
    scheduler)
  (libraries
    utils_core))

(library
  (name utils_www_root)
  (wrapped false)
  (modules
    wwwroot)
  (libraries
    sys_utils))

(library
  (name temp_file)
  (wrapped false)
  (modules
    tempfile)
  (libraries
    sys_utils))

(library
  (name mutable_accumulator)
  (wrapped false)
  (modules
    mutable_accumulator))
; end of splitted utils:utils

(library
  (name relative_path)
  (wrapped false)
  (modules
    relative_path)
  (libraries
    collections
    sys_utils)
  (preprocess
    (pps lwt_ppx ppx_deriving.std ppx_deriving.enum)))

(library
  (name cli_args)
  (wrapped false)
  (modules
    cli_args
    cli_args_sig)
  (libraries
    collections
    hh_json
    relative_path
    sys_utils
    utils_core))

(library
  (name pos)
  (wrapped false)
  (modules
    file_pos_large
    file_pos_small
    line_break_map
    pos
    pos_embedded
    pos_source)
  (libraries
    relative_path))

(library
  (name stack_utils)
  (wrapped false)
  (modules
    stack_utils))

(library
  (name utils_ocaml_overrides)
  (wrapped false)
  (modules
    ocaml_overrides)
  (libraries
    disk))

(library
  (name symbol)
  (wrapped false)
  (modules
    symbolDefinition
    symbolOccurrence)
  (libraries
    naming_special_names
    pos))

(copy_files core/config/build-id.c)

(library
  (name compiler_id)
  (wrapped false)
  (modules
    compiler_id)
  (c_names
    compiler_id_impl
    build-id)
  (c_flags (:standard -I%{env:CMAKE_SOURCE_DIR=xxx})))

(library
  (name server_load_flag)
  (wrapped false)
  (modules
    serverLoadFlag))

(library
  (name lwt_utils)
  (wrapped false)
  (modules
    lwt_utils)
  (libraries
    lwt
    lwt.unix
    core_kernel
    utils_core)
  (preprocess
    (pps lwt_ppx ppx_deriving.std ppx_deriving.enum)))
