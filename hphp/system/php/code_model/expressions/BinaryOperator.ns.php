<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {


/** The kinds of operations that IBinaryOpExpressions can perform. */

class BinaryOperators /* extends Enum<BinaryOperator> */ {
  /** x &= y */
  const BinaryOperator PHP_AND_ASSIGN = 1;
  /** x & y */
  const BinaryOperator PHP_AND = 2;
  /** x[y] */
  const BinaryOperator PHP_ARRAY_ELEMENT = 3;
  /** x => y */
  const BinaryOperator PHP_ARRAY_PAIR = 4;
  /** x = y */
  const BinaryOperator PHP_ASSIGNMENT = 5;
  /** x && y */
  const BinaryOperator PHP_BOOLEAN_AND = 6;
  /** x || y */
  const BinaryOperator PHP_BOOLEAN_OR = 7;
  /** x .= y */
  const BinaryOperator PHP_CONCAT_ASSIGN = 8;
  /** x . y */
  const BinaryOperator PHP_CONCAT = 9;
  /** x ?: y */
  const BinaryOperator PHP_CONDITIONAL = 10;
  /** x /= y */
  const BinaryOperator PHP_DIVIDE_ASSIGN = 11;
  /** x / y */
  const BinaryOperator PHP_DIVIDE = 12;
  /** x instanceof y */
  const BinaryOperator PHP_INSTANCEOF = 13;
  /** x == y */
  const BinaryOperator PHP_IS_EQUAL = 14;
  /** x > y */
  const BinaryOperator PHP_IS_GREATER = 15;
  /** x >= y */
  const BinaryOperator PHP_IS_GREATER_OR_EQUAL = 16;
  /** x === y */
  const BinaryOperator PHP_IS_IDENTICAL = 17;
  /** x !== y */
  const BinaryOperator PHP_IS_NOT_IDENTICAL = 18;
  /** x != y */
  const BinaryOperator PHP_IS_NOT_EQUAL = 19;
  /** x < y */
  const BinaryOperator PHP_IS_SMALLER = 20;
  /** x <= */
  const BinaryOperator PHP_IS_SMALLER_OR_EQUAL = 21;
  /** x and y */
  const BinaryOperator PHP_LOGICAL_AND = 22;
  /** x or y */
  const BinaryOperator PHP_LOGICAL_OR = 23;
  /** x xor y */
  const BinaryOperator PHP_LOGICAL_XOR = 24;
  /** x -= y */
  const BinaryOperator PHP_MINUS_ASSIGN = 25;
  /** x - y */
  const BinaryOperator PHP_MINUS = 26;
  /** x %= y */
  const BinaryOperator PHP_MODULUS_ASSIGN = 27;
  /** x % y */
  const BinaryOperator PHP_MODULUS = 28;
  /** x *= y */
  const BinaryOperator PHP_MULTIPLY_ASSIGN = 29;
  /** x * y */
  const BinaryOperator PHP_MULTIPLY = 30;
  /** x |= y */
  const BinaryOperator PHP_OR_ASSIGN = 31;
  /** x | y */
  const BinaryOperator PHP_OR = 32;
  /** x += y */
  const BinaryOperator PHP_PLUS_ASSIGN = 33;
  /** x + y */
  const BinaryOperator PHP_PLUS = 34;
  /** x <<= y */
  const BinaryOperator PHP_SHIFT_LEFT_ASSIGN = 35;
  /** x << y */
  const BinaryOperator PHP_SHIFT_LEFT = 36;
  /** x >>= y */
  const BinaryOperator PHP_SHIFT_RIGHT_ASSIGN = 37;
  /** x >> y */
  const BinaryOperator PHP_SHIFT_RIGHT = 38;
  /** x ^= y */
  const BinaryOperator PHP_XOR_ASSIGN = 39;
  /** x ^ y */
  const BinaryOperator PHP_XOR = 40;

  public static function hasPriority(
    /*BinaryOperator*/ $op1, /*BinaryOperator*/ $op2) : bool {
    switch ($op1) {
      case BinaryOperators::PHP_AND_ASSIGN:
      case BinaryOperators::PHP_ARRAY_PAIR:
      case BinaryOperators::PHP_ASSIGNMENT:
      case BinaryOperators::PHP_CONCAT_ASSIGN:
      case BinaryOperators::PHP_DIVIDE_ASSIGN:
      case BinaryOperators::PHP_MINUS_ASSIGN:
      case BinaryOperators::PHP_MODULUS_ASSIGN:
      case BinaryOperators::PHP_MULTIPLY_ASSIGN:
      case BinaryOperators::PHP_OR_ASSIGN:
      case BinaryOperators::PHP_PLUS_ASSIGN:
      case BinaryOperators::PHP_SHIFT_LEFT_ASSIGN:
      case BinaryOperators::PHP_SHIFT_RIGHT_ASSIGN:
      case BinaryOperators::PHP_XOR_ASSIGN:
        switch ($op2) {
          case BinaryOperators::PHP_LOGICAL_AND:
          case BinaryOperators::PHP_LOGICAL_OR:
          case BinaryOperators::PHP_LOGICAL_XOR:
            return true;
        }
        return false;
      case BinaryOperators::PHP_AND:
        switch ($op2) {
          case BinaryOperators::PHP_AND_ASSIGN:
          case BinaryOperators::PHP_ARRAY_PAIR:
          case BinaryOperators::PHP_ASSIGNMENT:
          case BinaryOperators::PHP_BOOLEAN_AND:
          case BinaryOperators::PHP_BOOLEAN_OR:
          case BinaryOperators::PHP_CONCAT_ASSIGN:
          case BinaryOperators::PHP_DIVIDE_ASSIGN:
          case BinaryOperators::PHP_LOGICAL_AND:
          case BinaryOperators::PHP_LOGICAL_OR:
          case BinaryOperators::PHP_LOGICAL_XOR:
          case BinaryOperators::PHP_MINUS_ASSIGN:
          case BinaryOperators::PHP_MODULUS_ASSIGN:
          case BinaryOperators::PHP_MULTIPLY_ASSIGN:
          case BinaryOperators::PHP_OR:
          case BinaryOperators::PHP_OR_ASSIGN:
          case BinaryOperators::PHP_PLUS_ASSIGN:
          case BinaryOperators::PHP_SHIFT_LEFT_ASSIGN:
          case BinaryOperators::PHP_SHIFT_RIGHT_ASSIGN:
          case BinaryOperators::PHP_XOR_ASSIGN:
          case BinaryOperators::PHP_XOR:
            return true;
        }
        return false;
      case BinaryOperators::PHP_ARRAY_ELEMENT:
        return true;
      case BinaryOperators::PHP_BOOLEAN_AND:
        switch ($op2) {
          case BinaryOperators::PHP_AND_ASSIGN:
          case BinaryOperators::PHP_ARRAY_PAIR:
          case BinaryOperators::PHP_ASSIGNMENT:
          case BinaryOperators::PHP_BOOLEAN_OR:
          case BinaryOperators::PHP_CONCAT_ASSIGN:
          case BinaryOperators::PHP_CONDITIONAL:
          case BinaryOperators::PHP_DIVIDE_ASSIGN:
          case BinaryOperators::PHP_LOGICAL_AND:
          case BinaryOperators::PHP_LOGICAL_OR:
          case BinaryOperators::PHP_LOGICAL_XOR:
          case BinaryOperators::PHP_MINUS_ASSIGN:
          case BinaryOperators::PHP_MODULUS_ASSIGN:
          case BinaryOperators::PHP_MULTIPLY_ASSIGN:
          case BinaryOperators::PHP_OR_ASSIGN:
          case BinaryOperators::PHP_PLUS_ASSIGN:
          case BinaryOperators::PHP_SHIFT_LEFT_ASSIGN:
          case BinaryOperators::PHP_SHIFT_RIGHT_ASSIGN:
          case BinaryOperators::PHP_XOR_ASSIGN:
            return true;
        }
        return false;
      case BinaryOperators::PHP_BOOLEAN_OR:
        switch ($op2) {
          case BinaryOperators::PHP_AND_ASSIGN:
          case BinaryOperators::PHP_ARRAY_PAIR:
          case BinaryOperators::PHP_ASSIGNMENT:
          case BinaryOperators::PHP_CONCAT_ASSIGN:
          case BinaryOperators::PHP_CONDITIONAL:
          case BinaryOperators::PHP_DIVIDE_ASSIGN:
          case BinaryOperators::PHP_LOGICAL_AND:
          case BinaryOperators::PHP_LOGICAL_OR:
          case BinaryOperators::PHP_LOGICAL_XOR:
          case BinaryOperators::PHP_MINUS_ASSIGN:
          case BinaryOperators::PHP_MODULUS_ASSIGN:
          case BinaryOperators::PHP_MULTIPLY_ASSIGN:
          case BinaryOperators::PHP_OR_ASSIGN:
          case BinaryOperators::PHP_PLUS_ASSIGN:
          case BinaryOperators::PHP_SHIFT_LEFT_ASSIGN:
          case BinaryOperators::PHP_SHIFT_RIGHT_ASSIGN:
          case BinaryOperators::PHP_XOR_ASSIGN:
            return true;
        }
        return false;
      case BinaryOperators::PHP_CONCAT:
      case BinaryOperators::PHP_MINUS:
      case BinaryOperators::PHP_PLUS:
        switch ($op2) {
          case BinaryOperators::PHP_ARRAY_ELEMENT:
          case BinaryOperators::PHP_CONCAT:
          case BinaryOperators::PHP_DIVIDE:
          case BinaryOperators::PHP_INSTANCEOF:
          case BinaryOperators::PHP_MINUS:
          case BinaryOperators::PHP_MODULUS:
          case BinaryOperators::PHP_MULTIPLY:
          case BinaryOperators::PHP_PLUS:
            return false;
        }
        return true;
      case BinaryOperators::PHP_DIVIDE:
      case BinaryOperators::PHP_MODULUS:
      case BinaryOperators::PHP_MULTIPLY:
        switch ($op2) {
          case BinaryOperators::PHP_ARRAY_ELEMENT:
          case BinaryOperators::PHP_DIVIDE:
          case BinaryOperators::PHP_INSTANCEOF:
          case BinaryOperators::PHP_MODULUS:
          case BinaryOperators::PHP_MULTIPLY:
            return false;
        }
        return true;
      case BinaryOperators::PHP_INSTANCEOF:
        switch ($op2) {
          case BinaryOperators::PHP_ARRAY_ELEMENT:
          case BinaryOperators::PHP_INSTANCEOF:
            return false;
        }
        return true;
      case BinaryOperators::PHP_IS_EQUAL:
      case BinaryOperators::PHP_IS_IDENTICAL:
      case BinaryOperators::PHP_IS_NOT_IDENTICAL:
      case BinaryOperators::PHP_IS_NOT_EQUAL:
        switch ($op2) {
          case BinaryOperators::PHP_ARRAY_ELEMENT:
          case BinaryOperators::PHP_CONCAT:
          case BinaryOperators::PHP_DIVIDE:
          case BinaryOperators::PHP_INSTANCEOF:
          case BinaryOperators::PHP_IS_EQUAL:
          case BinaryOperators::PHP_IS_GREATER:
          case BinaryOperators::PHP_IS_GREATER_OR_EQUAL:
          case BinaryOperators::PHP_IS_IDENTICAL:
          case BinaryOperators::PHP_IS_NOT_IDENTICAL:
          case BinaryOperators::PHP_IS_NOT_EQUAL:
          case BinaryOperators::PHP_IS_SMALLER:
          case BinaryOperators::PHP_IS_SMALLER_OR_EQUAL:
          case BinaryOperators::PHP_MINUS:
          case BinaryOperators::PHP_MODULUS:
          case BinaryOperators::PHP_MULTIPLY:
          case BinaryOperators::PHP_PLUS:
          case BinaryOperators::PHP_SHIFT_LEFT:
          case BinaryOperators::PHP_SHIFT_RIGHT:
            return false;
        }
        return true;
      case BinaryOperators::PHP_IS_GREATER:
      case BinaryOperators::PHP_IS_GREATER_OR_EQUAL:
      case BinaryOperators::PHP_IS_SMALLER:
      case BinaryOperators::PHP_IS_SMALLER_OR_EQUAL:
        switch ($op2) {
          case BinaryOperators::PHP_ARRAY_ELEMENT:
          case BinaryOperators::PHP_CONCAT:
          case BinaryOperators::PHP_DIVIDE:
          case BinaryOperators::PHP_INSTANCEOF:
          case BinaryOperators::PHP_IS_GREATER:
          case BinaryOperators::PHP_IS_GREATER_OR_EQUAL:
          case BinaryOperators::PHP_IS_SMALLER:
          case BinaryOperators::PHP_IS_SMALLER_OR_EQUAL:
          case BinaryOperators::PHP_MINUS:
          case BinaryOperators::PHP_MODULUS:
          case BinaryOperators::PHP_MULTIPLY:
          case BinaryOperators::PHP_PLUS:
          case BinaryOperators::PHP_SHIFT_LEFT:
          case BinaryOperators::PHP_SHIFT_RIGHT:
            return false;
        }
        return true;
      case BinaryOperators::PHP_LOGICAL_AND:
        switch ($op2) {
          case BinaryOperators::PHP_LOGICAL_OR:
          case BinaryOperators::PHP_LOGICAL_XOR:
            return true;
        }
        return false;
      case BinaryOperators::PHP_LOGICAL_OR:
        return false;
      case BinaryOperators::PHP_LOGICAL_XOR:
        switch ($op2) {
          case BinaryOperators::PHP_LOGICAL_OR:
            return true;
        }
        return false;
      case BinaryOperators::PHP_OR:
        switch ($op2) {
          case BinaryOperators::PHP_AND_ASSIGN:
          case BinaryOperators::PHP_ARRAY_PAIR:
          case BinaryOperators::PHP_ASSIGNMENT:
          case BinaryOperators::PHP_BOOLEAN_AND:
          case BinaryOperators::PHP_BOOLEAN_OR:
          case BinaryOperators::PHP_CONCAT_ASSIGN:
          case BinaryOperators::PHP_CONDITIONAL:
          case BinaryOperators::PHP_DIVIDE_ASSIGN:
          case BinaryOperators::PHP_LOGICAL_AND:
          case BinaryOperators::PHP_LOGICAL_OR:
          case BinaryOperators::PHP_LOGICAL_XOR:
          case BinaryOperators::PHP_MINUS_ASSIGN:
          case BinaryOperators::PHP_MODULUS_ASSIGN:
          case BinaryOperators::PHP_MULTIPLY_ASSIGN:
          case BinaryOperators::PHP_OR_ASSIGN:
          case BinaryOperators::PHP_PLUS_ASSIGN:
          case BinaryOperators::PHP_SHIFT_LEFT_ASSIGN:
          case BinaryOperators::PHP_SHIFT_RIGHT_ASSIGN:
          case BinaryOperators::PHP_XOR_ASSIGN:
            return true;
        }
        return false;
      case BinaryOperators::PHP_SHIFT_LEFT:
      case BinaryOperators::PHP_SHIFT_RIGHT:
        switch ($op2) {
          case BinaryOperators::PHP_ARRAY_ELEMENT:
          case BinaryOperators::PHP_CONCAT:
          case BinaryOperators::PHP_DIVIDE:
          case BinaryOperators::PHP_INSTANCEOF:
          case BinaryOperators::PHP_MINUS:
          case BinaryOperators::PHP_MODULUS:
          case BinaryOperators::PHP_MULTIPLY:
          case BinaryOperators::PHP_OR:
          case BinaryOperators::PHP_PLUS:
          case BinaryOperators::PHP_SHIFT_LEFT:
          case BinaryOperators::PHP_SHIFT_RIGHT:
            return false;
        }
        return true;
      case BinaryOperators::PHP_XOR:
        switch ($op2) {
          case BinaryOperators::PHP_AND_ASSIGN:
          case BinaryOperators::PHP_ARRAY_PAIR:
          case BinaryOperators::PHP_ASSIGNMENT:
          case BinaryOperators::PHP_BOOLEAN_AND:
          case BinaryOperators::PHP_BOOLEAN_OR:
          case BinaryOperators::PHP_CONCAT_ASSIGN:
          case BinaryOperators::PHP_CONDITIONAL:
          case BinaryOperators::PHP_DIVIDE_ASSIGN:
          case BinaryOperators::PHP_LOGICAL_AND:
          case BinaryOperators::PHP_LOGICAL_OR:
          case BinaryOperators::PHP_LOGICAL_XOR:
          case BinaryOperators::PHP_MINUS_ASSIGN:
          case BinaryOperators::PHP_MODULUS_ASSIGN:
          case BinaryOperators::PHP_MULTIPLY_ASSIGN:
          case BinaryOperators::PHP_OR_ASSIGN:
          case BinaryOperators::PHP_PLUS_ASSIGN:
          case BinaryOperators::PHP_SHIFT_LEFT_ASSIGN:
          case BinaryOperators::PHP_SHIFT_RIGHT_ASSIGN:
          case BinaryOperators::PHP_XOR_ASSIGN:
            return true;
        }
        return false;
    }
    return false;
  }
}
}
