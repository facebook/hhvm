/**
 * Autogenerated by Thrift for /home/fbthrift/thrift/lib/thrift/reflection.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/visitation/visit_by_thrift_field_metadata.h>
#include "thrift/lib/thrift/gen-cpp2/reflection_metadata.h"

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitByThriftId<::apache::thrift::reflection::StructField> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).isRequired_ref());
    case 2:
      return f(1, static_cast<T&&>(t).type_ref());
    case 3:
      return f(2, static_cast<T&&>(t).name_ref());
    case 4:
      return f(3, static_cast<T&&>(t).annotations_ref());
    case 5:
      return f(4, static_cast<T&&>(t).order_ref());
    default:
      throwInvalidThriftId(id, "::apache::thrift::reflection::StructField");
    }
  }
};

template <>
struct VisitByThriftId<::apache::thrift::reflection::DataType> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).name_ref());
    case 2:
      return f(1, static_cast<T&&>(t).fields_ref());
    case 3:
      return f(2, static_cast<T&&>(t).mapKeyType_ref());
    case 4:
      return f(3, static_cast<T&&>(t).valueType_ref());
    case 5:
      return f(4, static_cast<T&&>(t).enumValues_ref());
    default:
      throwInvalidThriftId(id, "::apache::thrift::reflection::DataType");
    }
  }
};

template <>
struct VisitByThriftId<::apache::thrift::reflection::Schema> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).dataTypes_ref());
    case 2:
      return f(1, static_cast<T&&>(t).names_ref());
    default:
      throwInvalidThriftId(id, "::apache::thrift::reflection::Schema");
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
