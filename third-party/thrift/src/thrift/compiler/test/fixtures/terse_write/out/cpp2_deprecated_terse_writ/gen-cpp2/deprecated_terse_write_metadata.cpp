/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/terse_write/src/deprecated_terse_write.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include <thrift/lib/cpp2/gen/module_metadata_cpp.h>
#include "thrift/compiler/test/fixtures/terse_write/gen-cpp2/deprecated_terse_write_metadata.h"

// some of these functions can be so large that the compiler gives up optimizing
// them - and issues a warning which may be treated as an error!
//
// these functions are so rarely called that it is probably okay for them not to
// be optimized in practice
FOLLY_CLANG_DISABLE_WARNING("-Wignored-optimization-argument")

namespace apache {
namespace thrift {
namespace detail {
namespace md {
using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;
using ThriftPrimitiveType = ::apache::thrift::metadata::ThriftPrimitiveType;
using ThriftType = ::apache::thrift::metadata::ThriftType;
using ThriftService = ::apache::thrift::metadata::ThriftService;
using ThriftServiceContext = ::apache::thrift::metadata::ThriftServiceContext;
using ThriftFunctionGenerator = void (*)(ThriftMetadata&, ThriftService&);

void EnumMetadata<::facebook::thrift::test::terse_write::deprecated::MyEnum>::gen(ThriftMetadata& metadata) {
  auto res = genEnumMetadata<::facebook::thrift::test::terse_write::deprecated::MyEnum>(metadata);
  if (res.preExists) {
    return;
  }
}

const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::thrift::test::terse_write::deprecated::MyStruct>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::facebook::thrift::test::terse_write::deprecated::MyStruct>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& deprecated_terse_write_MyStruct = res.metadata;
  deprecated_terse_write_MyStruct.is_union() = false;
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::thrift::test::terse_write::deprecated::MyUnion>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::facebook::thrift::test::terse_write::deprecated::MyUnion>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& deprecated_terse_write_MyUnion = res.metadata;
  deprecated_terse_write_MyUnion.is_union() = true;
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::thrift::test::terse_write::deprecated::StructLevelTerseStruct>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::facebook::thrift::test::terse_write::deprecated::StructLevelTerseStruct>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& deprecated_terse_write_StructLevelTerseStruct = res.metadata;
  deprecated_terse_write_StructLevelTerseStruct.is_union() = false;
  static const auto* const
  deprecated_terse_write_StructLevelTerseStruct_fields = new std::array<EncodedThriftField, 15>{ {
    { 1, "bool_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "byte_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "short_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "int_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "long_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},    { 6, "float_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_FLOAT_TYPE), std::vector<ThriftConstStruct>{ }},    { 7, "double_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 8, "string_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 9, "binary_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{ }},    { 10, "enum_field", false, std::make_unique<Enum<::facebook::thrift::test::terse_write::deprecated::MyEnum>>("deprecated_terse_write.MyEnum"), std::vector<ThriftConstStruct>{ }},    { 11, "list_field", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)), std::vector<ThriftConstStruct>{ }},    { 12, "set_field", false, std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)), std::vector<ThriftConstStruct>{ }},    { 13, "map_field", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)), std::vector<ThriftConstStruct>{ }},    { 14, "struct_field", false, std::make_unique<Struct<::facebook::thrift::test::terse_write::deprecated::MyStruct>>("deprecated_terse_write.MyStruct"), std::vector<ThriftConstStruct>{ }},    { 15, "union_field", false, std::make_unique<Union<::facebook::thrift::test::terse_write::deprecated::MyUnion>>("deprecated_terse_write.MyUnion"), std::vector<ThriftConstStruct>{ }},  }};
  std::size_t i = 0;
  for (const auto& f : *deprecated_terse_write_StructLevelTerseStruct_fields) {
    auto& field = deprecated_terse_write_StructLevelTerseStruct.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    deprecated_terse_write_StructLevelTerseStruct.fields()[i++].type() = std::move(type);
  }
  deprecated_terse_write_StructLevelTerseStruct.structured_annotations()->push_back(*cvStruct("thrift.TerseWrite", {  }).cv_struct());
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::thrift::test::terse_write::deprecated::FieldLevelTerseStruct>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::facebook::thrift::test::terse_write::deprecated::FieldLevelTerseStruct>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& deprecated_terse_write_FieldLevelTerseStruct = res.metadata;
  deprecated_terse_write_FieldLevelTerseStruct.is_union() = false;
  static const auto* const
  deprecated_terse_write_FieldLevelTerseStruct_fields = new std::array<EncodedThriftField, 30>{ {
    { 1, "terse_bool_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("thrift.TerseWrite", {  }).cv_struct(), }},    { 2, "terse_byte_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("thrift.TerseWrite", {  }).cv_struct(), }},    { 3, "terse_short_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("thrift.TerseWrite", {  }).cv_struct(), }},    { 4, "terse_int_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("thrift.TerseWrite", {  }).cv_struct(), }},    { 5, "terse_long_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("thrift.TerseWrite", {  }).cv_struct(), }},    { 6, "terse_float_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_FLOAT_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("thrift.TerseWrite", {  }).cv_struct(), }},    { 7, "terse_double_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("thrift.TerseWrite", {  }).cv_struct(), }},    { 8, "terse_string_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("thrift.TerseWrite", {  }).cv_struct(), }},    { 9, "terse_binary_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("thrift.TerseWrite", {  }).cv_struct(), }},    { 10, "terse_enum_field", false, std::make_unique<Enum<::facebook::thrift::test::terse_write::deprecated::MyEnum>>("deprecated_terse_write.MyEnum"), std::vector<ThriftConstStruct>{ *cvStruct("thrift.TerseWrite", {  }).cv_struct(), }},    { 11, "terse_list_field", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)), std::vector<ThriftConstStruct>{ *cvStruct("thrift.TerseWrite", {  }).cv_struct(), }},    { 12, "terse_set_field", false, std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)), std::vector<ThriftConstStruct>{ *cvStruct("thrift.TerseWrite", {  }).cv_struct(), }},    { 13, "terse_map_field", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)), std::vector<ThriftConstStruct>{ *cvStruct("thrift.TerseWrite", {  }).cv_struct(), }},    { 14, "terse_struct_field", false, std::make_unique<Struct<::facebook::thrift::test::terse_write::deprecated::MyStruct>>("deprecated_terse_write.MyStruct"), std::vector<ThriftConstStruct>{ *cvStruct("thrift.TerseWrite", {  }).cv_struct(), }},    { 15, "bool_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 16, "byte_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 17, "short_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 18, "int_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 19, "long_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 20, "float_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_FLOAT_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 21, "double_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 22, "string_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 23, "binary_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 24, "enum_field", false, std::make_unique<Enum<::facebook::thrift::test::terse_write::deprecated::MyEnum>>("deprecated_terse_write.MyEnum"), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 25, "list_field", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 26, "set_field", false, std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 27, "map_field", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 28, "struct_field", false, std::make_unique<Struct<::facebook::thrift::test::terse_write::deprecated::MyStruct>>("deprecated_terse_write.MyStruct"), std::vector<ThriftConstStruct>{ }},    { 29, "union_field", false, std::make_unique<Union<::facebook::thrift::test::terse_write::deprecated::MyUnion>>("deprecated_terse_write.MyUnion"), std::vector<ThriftConstStruct>{ }},    { 30, "iobuf_ptr_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), *cvStruct("cpp.Type", { {"name", cvString("std::unique_ptr<folly::IOBuf>") } }).cv_struct(), }},  }};
  std::size_t i = 0;
  for (const auto& f : *deprecated_terse_write_FieldLevelTerseStruct_fields) {
    auto& field = deprecated_terse_write_FieldLevelTerseStruct.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    deprecated_terse_write_FieldLevelTerseStruct.fields()[i++].type() = std::move(type);
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::thrift::test::terse_write::deprecated::CppRefStructFields>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::facebook::thrift::test::terse_write::deprecated::CppRefStructFields>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& deprecated_terse_write_CppRefStructFields = res.metadata;
  deprecated_terse_write_CppRefStructFields.is_union() = false;
  static const auto* const
  deprecated_terse_write_CppRefStructFields_fields = new std::array<EncodedThriftField, 2>{ {
    { 1, "primitive_ref_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.AllowLegacyNonOptionalRef", {  }).cv_struct(), *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), *cvStruct("cpp.AllowLegacyDeprecatedTerseWritesRef", {  }).cv_struct(), *cvStruct("cpp.Ref", { {"type", cvInteger(0) } }).cv_struct(), }},    { 2, "struct_ref_field", false, std::make_unique<Struct<::facebook::thrift::test::terse_write::deprecated::MyStruct>>("deprecated_terse_write.MyStruct"), std::vector<ThriftConstStruct>{ *cvStruct("cpp.AllowLegacyNonOptionalRef", {  }).cv_struct(), *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), *cvStruct("cpp.AllowLegacyDeprecatedTerseWritesRef", {  }).cv_struct(), *cvStruct("cpp.Ref", { {"type", cvInteger(0) } }).cv_struct(), }},  }};
  std::size_t i = 0;
  for (const auto& f : *deprecated_terse_write_CppRefStructFields_fields) {
    auto& field = deprecated_terse_write_CppRefStructFields.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    deprecated_terse_write_CppRefStructFields.fields()[i++].type() = std::move(type);
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& deprecated_terse_write_DeprecatedTerseWriteWithCustomDefault = res.metadata;
  deprecated_terse_write_DeprecatedTerseWriteWithCustomDefault.is_union() = false;
  static const auto* const
  deprecated_terse_write_DeprecatedTerseWriteWithCustomDefault_fields = new std::array<EncodedThriftField, 13>{ {
    { 1, "bool_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 2, "byte_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 3, "short_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 4, "int_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 5, "long_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 6, "float_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_FLOAT_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 7, "double_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 8, "string_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 9, "binary_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 10, "enum_field", false, std::make_unique<Enum<::facebook::thrift::test::terse_write::deprecated::MyEnum>>("deprecated_terse_write.MyEnum"), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 11, "list_field", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 12, "set_field", false, std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 13, "map_field", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},  }};
  std::size_t i = 0;
  for (const auto& f : *deprecated_terse_write_DeprecatedTerseWriteWithCustomDefault_fields) {
    auto& field = deprecated_terse_write_DeprecatedTerseWriteWithCustomDefault.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    deprecated_terse_write_DeprecatedTerseWriteWithCustomDefault.fields()[i++].type() = std::move(type);
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithRedundantCustomDefault>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithRedundantCustomDefault>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& deprecated_terse_write_DeprecatedTerseWriteWithRedundantCustomDefault = res.metadata;
  deprecated_terse_write_DeprecatedTerseWriteWithRedundantCustomDefault.is_union() = false;
  static const auto* const
  deprecated_terse_write_DeprecatedTerseWriteWithRedundantCustomDefault_fields = new std::array<EncodedThriftField, 13>{ {
    { 1, "bool_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 2, "byte_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 3, "short_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 4, "int_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 5, "long_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 6, "float_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_FLOAT_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 7, "double_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 8, "string_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 9, "binary_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 10, "enum_field", false, std::make_unique<Enum<::facebook::thrift::test::terse_write::deprecated::MyEnum>>("deprecated_terse_write.MyEnum"), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 11, "list_field", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 12, "set_field", false, std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},    { 13, "map_field", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)), std::vector<ThriftConstStruct>{ *cvStruct("cpp.DeprecatedTerseWrite", {  }).cv_struct(), }},  }};
  std::size_t i = 0;
  for (const auto& f : *deprecated_terse_write_DeprecatedTerseWriteWithRedundantCustomDefault_fields) {
    auto& field = deprecated_terse_write_DeprecatedTerseWriteWithRedundantCustomDefault.fields()[i];
    DCHECK_EQ(*field.id(), f.id);
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    field.structured_annotations().emplace().assign(
        f.structured_annotations.begin(),
        f.structured_annotations.end());

    // writeAndGenType will modify metadata, which might invalidate `field` reference
    // We need to store the result in a separate `type` variable.
    apache::thrift::metadata::ThriftType type;
    f.metadata_type_interface->writeAndGenType(type, metadata);
    deprecated_terse_write_DeprecatedTerseWriteWithRedundantCustomDefault.fields()[i++].type() = std::move(type);
  }
  return res.metadata;
}

} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
