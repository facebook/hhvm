Parsed decls:

{ Direct_decl_parser.classes =
  { "\\:foo" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = true; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([4:7-11], "\\:foo"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = []; sc_consts = []; sc_typeconsts = [];
      sc_pu_enums = []; sc_props = []; sc_sprops = []; sc_constructor = None;
      sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
      sc_enum_type = None; sc_decl_errors = <opaque> };
    "\\:foo-baz" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = true; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([6:7-15], "\\:foo-baz"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = []; sc_consts = []; sc_typeconsts = [];
      sc_pu_enums = []; sc_props = []; sc_sprops = []; sc_constructor = None;
      sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
      sc_enum_type = None; sc_decl_errors = <opaque> };
    "\\:foo:bar" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = true; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([5:7-15], "\\:foo:bar"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = []; sc_consts = []; sc_typeconsts = [];
      sc_pu_enums = []; sc_props = []; sc_sprops = []; sc_constructor = None;
      sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
      sc_enum_type = None; sc_decl_errors = <opaque> };
    "\\xhp" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([3:7-10], "\\xhp"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = []; sc_consts = []; sc_typeconsts = [];
      sc_pu_enums = []; sc_props = []; sc_sprops = []; sc_constructor = None;
      sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
      sc_enum_type = None; sc_decl_errors = <opaque> } };
  funs =
  { "\\xhp_is_valid_class_name" ->
    { fe_pos = [7:10-33];
      fe_type =
      (Rwitness (root|xhp.php line 7, characters 10-32),
       (Tfun
          { ft_arity = (Fstandard ()); ft_tparams = [];
            ft_where_constraints = [];
            ft_params =
            [{ fp_pos = [7:38-40]; fp_name = (Some "$x");
               fp_type =
               { et_enforced = false;
                 et_type =
                 (Rhint (root|xhp.php line 7, characters 34-36),
                  (Tapply (([7:34-37], "\\xhp"), [])))
                 };
               fp_flags =
               (make_fp_flags ~mutability:none ~accept_disposable:false
                 ~has_default:false ~mode:FPnormal);
                }
              ];
            ft_implicit_params =
            { capability =
              (Rhint (root|xhp.php line 7, characters 10-32), (Tunion [])) };
            ft_ret =
            { et_enforced = false;
              et_type =
              (Rhint (root|xhp.php line 7, characters 43-46), (Tprim Tvoid))
              };
            ft_flags =
            (make_ft_flags sync none ~return_disposable:false
              ~returns_mutable:false ~returns_void_to_rx:false);
            ft_reactive = Nonreactive }));
      fe_deprecated = None;  } };
  typedefs = {}; consts = {} }

They matched!
