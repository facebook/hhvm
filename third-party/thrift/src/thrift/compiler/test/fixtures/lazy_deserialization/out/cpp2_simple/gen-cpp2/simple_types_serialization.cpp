/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/lazy_deserialization/src/simple.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/lazy_deserialization/gen-cpp2/simple_types_custom_protocol.h"
#include "thrift/compiler/test/fixtures/lazy_deserialization/gen-cpp2/simple_data.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::Foo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::Foo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::LazyFoo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::LazyFoo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::OptionalFoo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::OptionalFoo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::OptionalLazyFoo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::OptionalLazyFoo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::OptionalBoxedLazyFoo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::OptionalBoxedLazyFoo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::LazyCppRef>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::LazyCppRef>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::IndexedFoo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::IndexedFoo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::OptionalIndexedFoo>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::OptionalIndexedFoo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::Empty>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::Empty>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache::thrift::test {






const ::std::vector<double>& LazyFoo::__fbthrift_read_field_field3() const {
  const auto isDeserialized = __fbthrift_isDeserialized_.field3.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field3_slow();
  }
  return __fbthrift_field_field3;
}

::std::vector<double>& LazyFoo::__fbthrift_read_field_field3() {
  const auto isDeserialized = __fbthrift_isDeserialized_.field3.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field3_slow();
  } else if (isDeserialized & ::apache::thrift::detail::LazyDeserializationState::UNTAINTED) {
    __fbthrift_isDeserialized_.field3 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
  }
  return __fbthrift_field_field3;
}

void LazyFoo::__fbthrift_read_field_field3_slow() const {
  auto lock = std::unique_lock(__fbthrift_deserializationMutex_);
  if (__fbthrift_isDeserialized_.field3 & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED) {
    return;
  }
  switch (__fbthrift_protocol_) {
    case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
      __fbthrift_read_field_field3_impl<::apache::thrift::CompactProtocolReader>();
      break;
    case ::apache::thrift::protocol::T_BINARY_PROTOCOL:
      __fbthrift_read_field_field3_impl<::apache::thrift::BinaryProtocolReader>();
      break;
    default:
      CHECK(false) << int(__fbthrift_protocol_);
  }
  __fbthrift_serializedData_.field3 = {};
  __fbthrift_isDeserialized_.field3 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
}

const ::std::vector<::std::int32_t>& LazyFoo::__fbthrift_read_field_field4() const {
  const auto isDeserialized = __fbthrift_isDeserialized_.field4.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field4_slow();
  }
  return __fbthrift_field_field4;
}

::std::vector<::std::int32_t>& LazyFoo::__fbthrift_read_field_field4() {
  const auto isDeserialized = __fbthrift_isDeserialized_.field4.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field4_slow();
  } else if (isDeserialized & ::apache::thrift::detail::LazyDeserializationState::UNTAINTED) {
    __fbthrift_isDeserialized_.field4 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
  }
  return __fbthrift_field_field4;
}

void LazyFoo::__fbthrift_read_field_field4_slow() const {
  auto lock = std::unique_lock(__fbthrift_deserializationMutex_);
  if (__fbthrift_isDeserialized_.field4 & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED) {
    return;
  }
  switch (__fbthrift_protocol_) {
    case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
      __fbthrift_read_field_field4_impl<::apache::thrift::CompactProtocolReader>();
      break;
    case ::apache::thrift::protocol::T_BINARY_PROTOCOL:
      __fbthrift_read_field_field4_impl<::apache::thrift::BinaryProtocolReader>();
      break;
    default:
      CHECK(false) << int(__fbthrift_protocol_);
  }
  __fbthrift_serializedData_.field4 = {};
  __fbthrift_isDeserialized_.field4 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
}







const ::std::vector<double>& OptionalLazyFoo::__fbthrift_read_field_field3() const {
  const auto isDeserialized = __fbthrift_isDeserialized_.field3.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field3_slow();
  }
  return __fbthrift_field_field3;
}

::std::vector<double>& OptionalLazyFoo::__fbthrift_read_field_field3() {
  const auto isDeserialized = __fbthrift_isDeserialized_.field3.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field3_slow();
  } else if (isDeserialized & ::apache::thrift::detail::LazyDeserializationState::UNTAINTED) {
    __fbthrift_isDeserialized_.field3 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
  }
  return __fbthrift_field_field3;
}

void OptionalLazyFoo::__fbthrift_read_field_field3_slow() const {
  auto lock = std::unique_lock(__fbthrift_deserializationMutex_);
  if (__fbthrift_isDeserialized_.field3 & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED) {
    return;
  }
  switch (__fbthrift_protocol_) {
    case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
      __fbthrift_read_field_field3_impl<::apache::thrift::CompactProtocolReader>();
      break;
    case ::apache::thrift::protocol::T_BINARY_PROTOCOL:
      __fbthrift_read_field_field3_impl<::apache::thrift::BinaryProtocolReader>();
      break;
    default:
      CHECK(false) << int(__fbthrift_protocol_);
  }
  __fbthrift_serializedData_.field3 = {};
  __fbthrift_isDeserialized_.field3 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
}

const ::std::vector<::std::int32_t>& OptionalLazyFoo::__fbthrift_read_field_field4() const {
  const auto isDeserialized = __fbthrift_isDeserialized_.field4.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field4_slow();
  }
  return __fbthrift_field_field4;
}

::std::vector<::std::int32_t>& OptionalLazyFoo::__fbthrift_read_field_field4() {
  const auto isDeserialized = __fbthrift_isDeserialized_.field4.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field4_slow();
  } else if (isDeserialized & ::apache::thrift::detail::LazyDeserializationState::UNTAINTED) {
    __fbthrift_isDeserialized_.field4 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
  }
  return __fbthrift_field_field4;
}

void OptionalLazyFoo::__fbthrift_read_field_field4_slow() const {
  auto lock = std::unique_lock(__fbthrift_deserializationMutex_);
  if (__fbthrift_isDeserialized_.field4 & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED) {
    return;
  }
  switch (__fbthrift_protocol_) {
    case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
      __fbthrift_read_field_field4_impl<::apache::thrift::CompactProtocolReader>();
      break;
    case ::apache::thrift::protocol::T_BINARY_PROTOCOL:
      __fbthrift_read_field_field4_impl<::apache::thrift::BinaryProtocolReader>();
      break;
    default:
      CHECK(false) << int(__fbthrift_protocol_);
  }
  __fbthrift_serializedData_.field4 = {};
  __fbthrift_isDeserialized_.field4 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
}




const ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>>& OptionalBoxedLazyFoo::__fbthrift_read_field_field3() const {
  const auto isDeserialized = __fbthrift_isDeserialized_.field3.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field3_slow();
  }
  return __fbthrift_field_field3;
}

::apache::thrift::detail::boxed_value_ptr<::std::vector<double>>& OptionalBoxedLazyFoo::__fbthrift_read_field_field3() {
  const auto isDeserialized = __fbthrift_isDeserialized_.field3.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field3_slow();
  } else if (isDeserialized & ::apache::thrift::detail::LazyDeserializationState::UNTAINTED) {
    __fbthrift_isDeserialized_.field3 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
  }
  return __fbthrift_field_field3;
}

void OptionalBoxedLazyFoo::__fbthrift_read_field_field3_slow() const {
  auto lock = std::unique_lock(__fbthrift_deserializationMutex_);
  if (__fbthrift_isDeserialized_.field3 & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED) {
    return;
  }
  switch (__fbthrift_protocol_) {
    case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
      __fbthrift_read_field_field3_impl<::apache::thrift::CompactProtocolReader>();
      break;
    case ::apache::thrift::protocol::T_BINARY_PROTOCOL:
      __fbthrift_read_field_field3_impl<::apache::thrift::BinaryProtocolReader>();
      break;
    default:
      CHECK(false) << int(__fbthrift_protocol_);
  }
  __fbthrift_serializedData_.field3 = {};
  __fbthrift_isDeserialized_.field3 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
}

const ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>>& OptionalBoxedLazyFoo::__fbthrift_read_field_field4() const {
  const auto isDeserialized = __fbthrift_isDeserialized_.field4.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field4_slow();
  }
  return __fbthrift_field_field4;
}

::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>>& OptionalBoxedLazyFoo::__fbthrift_read_field_field4() {
  const auto isDeserialized = __fbthrift_isDeserialized_.field4.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field4_slow();
  } else if (isDeserialized & ::apache::thrift::detail::LazyDeserializationState::UNTAINTED) {
    __fbthrift_isDeserialized_.field4 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
  }
  return __fbthrift_field_field4;
}

void OptionalBoxedLazyFoo::__fbthrift_read_field_field4_slow() const {
  auto lock = std::unique_lock(__fbthrift_deserializationMutex_);
  if (__fbthrift_isDeserialized_.field4 & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED) {
    return;
  }
  switch (__fbthrift_protocol_) {
    case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
      __fbthrift_read_field_field4_impl<::apache::thrift::CompactProtocolReader>();
      break;
    case ::apache::thrift::protocol::T_BINARY_PROTOCOL:
      __fbthrift_read_field_field4_impl<::apache::thrift::BinaryProtocolReader>();
      break;
    default:
      CHECK(false) << int(__fbthrift_protocol_);
  }
  __fbthrift_serializedData_.field4 = {};
  __fbthrift_isDeserialized_.field4 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
}




const ::std::unique_ptr<::std::vector<::std::int32_t>>& LazyCppRef::__fbthrift_read_field_field1() const {
  const auto isDeserialized = __fbthrift_isDeserialized_.field1.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field1_slow();
  }
  return __fbthrift_field_field1;
}

::std::unique_ptr<::std::vector<::std::int32_t>>& LazyCppRef::__fbthrift_read_field_field1() {
  const auto isDeserialized = __fbthrift_isDeserialized_.field1.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field1_slow();
  } else if (isDeserialized & ::apache::thrift::detail::LazyDeserializationState::UNTAINTED) {
    __fbthrift_isDeserialized_.field1 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
  }
  return __fbthrift_field_field1;
}

void LazyCppRef::__fbthrift_read_field_field1_slow() const {
  auto lock = std::unique_lock(__fbthrift_deserializationMutex_);
  if (__fbthrift_isDeserialized_.field1 & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED) {
    return;
  }
  switch (__fbthrift_protocol_) {
    case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
      __fbthrift_read_field_field1_impl<::apache::thrift::CompactProtocolReader>();
      break;
    case ::apache::thrift::protocol::T_BINARY_PROTOCOL:
      __fbthrift_read_field_field1_impl<::apache::thrift::BinaryProtocolReader>();
      break;
    default:
      CHECK(false) << int(__fbthrift_protocol_);
  }
  __fbthrift_serializedData_.field1 = {};
  __fbthrift_isDeserialized_.field1 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
}

const ::std::shared_ptr<::std::vector<::std::int32_t>>& LazyCppRef::__fbthrift_read_field_field2() const {
  const auto isDeserialized = __fbthrift_isDeserialized_.field2.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field2_slow();
  }
  return __fbthrift_field_field2;
}

::std::shared_ptr<::std::vector<::std::int32_t>>& LazyCppRef::__fbthrift_read_field_field2() {
  const auto isDeserialized = __fbthrift_isDeserialized_.field2.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field2_slow();
  } else if (isDeserialized & ::apache::thrift::detail::LazyDeserializationState::UNTAINTED) {
    __fbthrift_isDeserialized_.field2 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
  }
  return __fbthrift_field_field2;
}

void LazyCppRef::__fbthrift_read_field_field2_slow() const {
  auto lock = std::unique_lock(__fbthrift_deserializationMutex_);
  if (__fbthrift_isDeserialized_.field2 & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED) {
    return;
  }
  switch (__fbthrift_protocol_) {
    case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
      __fbthrift_read_field_field2_impl<::apache::thrift::CompactProtocolReader>();
      break;
    case ::apache::thrift::protocol::T_BINARY_PROTOCOL:
      __fbthrift_read_field_field2_impl<::apache::thrift::BinaryProtocolReader>();
      break;
    default:
      CHECK(false) << int(__fbthrift_protocol_);
  }
  __fbthrift_serializedData_.field2 = {};
  __fbthrift_isDeserialized_.field2 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
}

const ::std::shared_ptr<const ::std::vector<::std::int32_t>>& LazyCppRef::__fbthrift_read_field_field3() const {
  const auto isDeserialized = __fbthrift_isDeserialized_.field3.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field3_slow();
  }
  return __fbthrift_field_field3;
}

::std::shared_ptr<const ::std::vector<::std::int32_t>>& LazyCppRef::__fbthrift_read_field_field3() {
  const auto isDeserialized = __fbthrift_isDeserialized_.field3.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field3_slow();
  } else if (isDeserialized & ::apache::thrift::detail::LazyDeserializationState::UNTAINTED) {
    __fbthrift_isDeserialized_.field3 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
  }
  return __fbthrift_field_field3;
}

void LazyCppRef::__fbthrift_read_field_field3_slow() const {
  auto lock = std::unique_lock(__fbthrift_deserializationMutex_);
  if (__fbthrift_isDeserialized_.field3 & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED) {
    return;
  }
  switch (__fbthrift_protocol_) {
    case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
      __fbthrift_read_field_field3_impl<::apache::thrift::CompactProtocolReader>();
      break;
    case ::apache::thrift::protocol::T_BINARY_PROTOCOL:
      __fbthrift_read_field_field3_impl<::apache::thrift::BinaryProtocolReader>();
      break;
    default:
      CHECK(false) << int(__fbthrift_protocol_);
  }
  __fbthrift_serializedData_.field3 = {};
  __fbthrift_isDeserialized_.field3 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
}

const ::std::unique_ptr<::std::vector<::std::int32_t>>& LazyCppRef::__fbthrift_read_field_field4() const {
  const auto isDeserialized = __fbthrift_isDeserialized_.field4.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field4_slow();
  }
  return __fbthrift_field_field4;
}

::std::unique_ptr<::std::vector<::std::int32_t>>& LazyCppRef::__fbthrift_read_field_field4() {
  const auto isDeserialized = __fbthrift_isDeserialized_.field4.load(std::memory_order_relaxed);
  if (!(isDeserialized & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED)) {
    __fbthrift_read_field_field4_slow();
  } else if (isDeserialized & ::apache::thrift::detail::LazyDeserializationState::UNTAINTED) {
    __fbthrift_isDeserialized_.field4 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
  }
  return __fbthrift_field_field4;
}

void LazyCppRef::__fbthrift_read_field_field4_slow() const {
  auto lock = std::unique_lock(__fbthrift_deserializationMutex_);
  if (__fbthrift_isDeserialized_.field4 & ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED) {
    return;
  }
  switch (__fbthrift_protocol_) {
    case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
      __fbthrift_read_field_field4_impl<::apache::thrift::CompactProtocolReader>();
      break;
    case ::apache::thrift::protocol::T_BINARY_PROTOCOL:
      __fbthrift_read_field_field4_impl<::apache::thrift::BinaryProtocolReader>();
      break;
    default:
      CHECK(false) << int(__fbthrift_protocol_);
  }
  __fbthrift_serializedData_.field4 = {};
  __fbthrift_isDeserialized_.field4 = ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED;
}











} // namespace apache::thrift::test
