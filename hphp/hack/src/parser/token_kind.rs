/**
 * Copyright (c) 2016, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the "hack" directory of this source tree. An additional
 * directory.
 *
 **
 *
 * THIS FILE IS @generated; DO NOT EDIT IT
 * To regenerate this file, run
 *
 *   buck run //hphp/hack/src:generate_full_fidelity
 *
 **
 *
 */

use std::num::NonZeroUsize;

use ocamlrep::{FromOcamlRep, ToOcamlRep};

#[allow(non_camel_case_types)] // allow Include_once and Require_once
#[derive(Debug, Copy, Clone, PartialEq, Ord, Eq, PartialOrd, FromOcamlRep, ToOcamlRep)]
#[repr(u8)]
pub enum TokenKind {
    // No text tokens
    EndOfFile = 0,
    // Given text tokens
    Abstract = 1,
    Arraykey = 2,
    As = 3,
    Async = 4,
    Attribute = 5,
    Await = 6,
    Backslash = 7,
    Binary = 8,
    Bool = 9,
    Boolean = 10,
    Break = 11,
    Case = 12,
    Catch = 13,
    Category = 14,
    Children = 15,
    Class = 16,
    Classname = 17,
    Clone = 18,
    Concurrent = 19,
    Const = 20,
    Construct = 21,
    Continue = 22,
    Ctx = 23,
    Darray = 24,
    Default = 25,
    Dict = 26,
    Do = 27,
    Double = 28,
    Echo = 29,
    Else = 30,
    Empty = 31,
    Endif = 32,
    Enum = 33,
    Eval = 34,
    Exports = 35,
    Extends = 36,
    Fallthrough = 37,
    Float = 38,
    File = 39,
    Final = 40,
    Finally = 41,
    For = 42,
    Foreach = 43,
    Function = 44,
    Global = 45,
    If = 46,
    Implements = 47,
    Imports = 48,
    Include = 49,
    Include_once = 50,
    Inout = 51,
    Instanceof = 52,
    Insteadof = 53,
    Int = 54,
    Integer = 55,
    Interface = 56,
    Is = 57,
    Isset = 58,
    Keyset = 59,
    Lateinit = 60,
    List = 61,
    Mixed = 62,
    Module = 63,
    Namespace = 64,
    New = 65,
    Newctx = 66,
    Newtype = 67,
    Noreturn = 68,
    Num = 69,
    Parent = 70,
    Print = 71,
    Private = 72,
    Protected = 73,
    Public = 74,
    Real = 75,
    Reify = 76,
    Require = 77,
    Require_once = 78,
    Required = 79,
    Resource = 80,
    Return = 81,
    SelfToken = 82,
    Shape = 83,
    Static = 84,
    String = 85,
    Super = 86,
    Switch = 87,
    This = 88,
    Throw = 89,
    Trait = 90,
    Try = 91,
    Tuple = 92,
    Type = 93,
    Unset = 94,
    Upcast = 95,
    Use = 96,
    Using = 97,
    Var = 98,
    Varray = 99,
    Vec = 100,
    Void = 101,
    With = 102,
    Where = 103,
    While = 104,
    Yield = 105,
    NullLiteral = 106,
    LeftBracket = 107,
    RightBracket = 108,
    LeftParen = 109,
    RightParen = 110,
    LeftBrace = 111,
    RightBrace = 112,
    Dot = 113,
    MinusGreaterThan = 114,
    PlusPlus = 115,
    MinusMinus = 116,
    StarStar = 117,
    Star = 118,
    Plus = 119,
    Minus = 120,
    Tilde = 121,
    Exclamation = 122,
    Dollar = 123,
    Slash = 124,
    Percent = 125,
    LessThanEqualGreaterThan = 126,
    LessThanLessThan = 127,
    GreaterThanGreaterThan = 128,
    LessThan = 129,
    GreaterThan = 130,
    LessThanEqual = 131,
    GreaterThanEqual = 132,
    EqualEqual = 133,
    EqualEqualEqual = 134,
    ExclamationEqual = 135,
    ExclamationEqualEqual = 136,
    Carat = 137,
    Bar = 138,
    Ampersand = 139,
    AmpersandAmpersand = 140,
    BarBar = 141,
    Question = 142,
    QuestionAs = 143,
    QuestionColon = 144,
    QuestionQuestion = 145,
    QuestionQuestionEqual = 146,
    Colon = 147,
    Semicolon = 148,
    Equal = 149,
    StarStarEqual = 150,
    StarEqual = 151,
    SlashEqual = 152,
    PercentEqual = 153,
    PlusEqual = 154,
    MinusEqual = 155,
    DotEqual = 156,
    LessThanLessThanEqual = 157,
    GreaterThanGreaterThanEqual = 158,
    AmpersandEqual = 159,
    CaratEqual = 160,
    BarEqual = 161,
    Comma = 162,
    At = 163,
    ColonColon = 164,
    EqualGreaterThan = 165,
    EqualEqualGreaterThan = 166,
    QuestionMinusGreaterThan = 167,
    DotDotDot = 168,
    DollarDollar = 169,
    BarGreaterThan = 170,
    SlashGreaterThan = 171,
    LessThanSlash = 172,
    LessThanQuestion = 173,
    Backtick = 174,
    XHP = 175,
    Hash = 176,
    Readonly = 177,
    Internal = 178,
    Package = 179,
    // Variable text tokens
    ErrorToken = 180,
    Name = 181,
    Variable = 182,
    DecimalLiteral = 183,
    OctalLiteral = 184,
    HexadecimalLiteral = 185,
    BinaryLiteral = 186,
    FloatingLiteral = 187,
    SingleQuotedStringLiteral = 188,
    DoubleQuotedStringLiteral = 189,
    DoubleQuotedStringLiteralHead = 190,
    StringLiteralBody = 191,
    DoubleQuotedStringLiteralTail = 192,
    HeredocStringLiteral = 193,
    HeredocStringLiteralHead = 194,
    HeredocStringLiteralTail = 195,
    NowdocStringLiteral = 196,
    BooleanLiteral = 197,
    XHPCategoryName = 198,
    XHPElementName = 199,
    XHPClassName = 200,
    XHPStringLiteral = 201,
    XHPBody = 202,
    XHPComment = 203,
    Hashbang = 204,
}

impl TokenKind {
    pub fn to_string(self) -> &'static str {
        match self {
            // No text tokens
            TokenKind::EndOfFile => "end_of_file",
            // Given text tokens
            TokenKind::Abstract => "abstract",
            TokenKind::Arraykey => "arraykey",
            TokenKind::As => "as",
            TokenKind::Async => "async",
            TokenKind::Attribute => "attribute",
            TokenKind::Await => "await",
            TokenKind::Backslash => "\\",
            TokenKind::Binary => "binary",
            TokenKind::Bool => "bool",
            TokenKind::Boolean => "boolean",
            TokenKind::Break => "break",
            TokenKind::Case => "case",
            TokenKind::Catch => "catch",
            TokenKind::Category => "category",
            TokenKind::Children => "children",
            TokenKind::Class => "class",
            TokenKind::Classname => "classname",
            TokenKind::Clone => "clone",
            TokenKind::Concurrent => "concurrent",
            TokenKind::Const => "const",
            TokenKind::Construct => "__construct",
            TokenKind::Continue => "continue",
            TokenKind::Ctx => "ctx",
            TokenKind::Darray => "darray",
            TokenKind::Default => "default",
            TokenKind::Dict => "dict",
            TokenKind::Do => "do",
            TokenKind::Double => "double",
            TokenKind::Echo => "echo",
            TokenKind::Else => "else",
            TokenKind::Empty => "empty",
            TokenKind::Endif => "endif",
            TokenKind::Enum => "enum",
            TokenKind::Eval => "eval",
            TokenKind::Exports => "exports",
            TokenKind::Extends => "extends",
            TokenKind::Fallthrough => "fallthrough",
            TokenKind::Float => "float",
            TokenKind::File => "file",
            TokenKind::Final => "final",
            TokenKind::Finally => "finally",
            TokenKind::For => "for",
            TokenKind::Foreach => "foreach",
            TokenKind::Function => "function",
            TokenKind::Global => "global",
            TokenKind::If => "if",
            TokenKind::Implements => "implements",
            TokenKind::Imports => "imports",
            TokenKind::Include => "include",
            TokenKind::Include_once => "include_once",
            TokenKind::Inout => "inout",
            TokenKind::Instanceof => "instanceof",
            TokenKind::Insteadof => "insteadof",
            TokenKind::Int => "int",
            TokenKind::Integer => "integer",
            TokenKind::Interface => "interface",
            TokenKind::Is => "is",
            TokenKind::Isset => "isset",
            TokenKind::Keyset => "keyset",
            TokenKind::Lateinit => "lateinit",
            TokenKind::List => "list",
            TokenKind::Mixed => "mixed",
            TokenKind::Module => "module",
            TokenKind::Namespace => "namespace",
            TokenKind::New => "new",
            TokenKind::Newctx => "newctx",
            TokenKind::Newtype => "newtype",
            TokenKind::Noreturn => "noreturn",
            TokenKind::Num => "num",
            TokenKind::Parent => "parent",
            TokenKind::Print => "print",
            TokenKind::Private => "private",
            TokenKind::Protected => "protected",
            TokenKind::Public => "public",
            TokenKind::Real => "real",
            TokenKind::Reify => "reify",
            TokenKind::Require => "require",
            TokenKind::Require_once => "require_once",
            TokenKind::Required => "required",
            TokenKind::Resource => "resource",
            TokenKind::Return => "return",
            TokenKind::SelfToken => "self",
            TokenKind::Shape => "shape",
            TokenKind::Static => "static",
            TokenKind::String => "string",
            TokenKind::Super => "super",
            TokenKind::Switch => "switch",
            TokenKind::This => "this",
            TokenKind::Throw => "throw",
            TokenKind::Trait => "trait",
            TokenKind::Try => "try",
            TokenKind::Tuple => "tuple",
            TokenKind::Type => "type",
            TokenKind::Unset => "unset",
            TokenKind::Upcast => "upcast",
            TokenKind::Use => "use",
            TokenKind::Using => "using",
            TokenKind::Var => "var",
            TokenKind::Varray => "varray",
            TokenKind::Vec => "vec",
            TokenKind::Void => "void",
            TokenKind::With => "with",
            TokenKind::Where => "where",
            TokenKind::While => "while",
            TokenKind::Yield => "yield",
            TokenKind::NullLiteral => "null",
            TokenKind::LeftBracket => "[",
            TokenKind::RightBracket => "]",
            TokenKind::LeftParen => "(",
            TokenKind::RightParen => ")",
            TokenKind::LeftBrace => "{",
            TokenKind::RightBrace => "}",
            TokenKind::Dot => ".",
            TokenKind::MinusGreaterThan => "->",
            TokenKind::PlusPlus => "++",
            TokenKind::MinusMinus => "--",
            TokenKind::StarStar => "**",
            TokenKind::Star => "*",
            TokenKind::Plus => "+",
            TokenKind::Minus => "-",
            TokenKind::Tilde => "~",
            TokenKind::Exclamation => "!",
            TokenKind::Dollar => "$",
            TokenKind::Slash => "/",
            TokenKind::Percent => "%",
            TokenKind::LessThanEqualGreaterThan => "<=>",
            TokenKind::LessThanLessThan => "<<",
            TokenKind::GreaterThanGreaterThan => ">>",
            TokenKind::LessThan => "<",
            TokenKind::GreaterThan => ">",
            TokenKind::LessThanEqual => "<=",
            TokenKind::GreaterThanEqual => ">=",
            TokenKind::EqualEqual => "==",
            TokenKind::EqualEqualEqual => "===",
            TokenKind::ExclamationEqual => "!=",
            TokenKind::ExclamationEqualEqual => "!==",
            TokenKind::Carat => "^",
            TokenKind::Bar => "|",
            TokenKind::Ampersand => "&",
            TokenKind::AmpersandAmpersand => "&&",
            TokenKind::BarBar => "||",
            TokenKind::Question => "?",
            TokenKind::QuestionAs => "?as",
            TokenKind::QuestionColon => "?:",
            TokenKind::QuestionQuestion => "??",
            TokenKind::QuestionQuestionEqual => "??=",
            TokenKind::Colon => ":",
            TokenKind::Semicolon => ";",
            TokenKind::Equal => "=",
            TokenKind::StarStarEqual => "**=",
            TokenKind::StarEqual => "*=",
            TokenKind::SlashEqual => "/=",
            TokenKind::PercentEqual => "%=",
            TokenKind::PlusEqual => "+=",
            TokenKind::MinusEqual => "-=",
            TokenKind::DotEqual => ".=",
            TokenKind::LessThanLessThanEqual => "<<=",
            TokenKind::GreaterThanGreaterThanEqual => ">>=",
            TokenKind::AmpersandEqual => "&=",
            TokenKind::CaratEqual => "^=",
            TokenKind::BarEqual => "|=",
            TokenKind::Comma => ",",
            TokenKind::At => "@",
            TokenKind::ColonColon => "::",
            TokenKind::EqualGreaterThan => "=>",
            TokenKind::EqualEqualGreaterThan => "==>",
            TokenKind::QuestionMinusGreaterThan => "?->",
            TokenKind::DotDotDot => "...",
            TokenKind::DollarDollar => "$$",
            TokenKind::BarGreaterThan => "|>",
            TokenKind::SlashGreaterThan => "/>",
            TokenKind::LessThanSlash => "</",
            TokenKind::LessThanQuestion => "<?",
            TokenKind::Backtick => "`",
            TokenKind::XHP => "xhp",
            TokenKind::Hash => "#",
            TokenKind::Readonly => "readonly",
            TokenKind::Internal => "internal",
            TokenKind::Package => "package",
            // Variable text tokes
            TokenKind::ErrorToken => "error_token",
            TokenKind::Name => "name",
            TokenKind::Variable => "variable",
            TokenKind::DecimalLiteral => "decimal_literal",
            TokenKind::OctalLiteral => "octal_literal",
            TokenKind::HexadecimalLiteral => "hexadecimal_literal",
            TokenKind::BinaryLiteral => "binary_literal",
            TokenKind::FloatingLiteral => "floating_literal",
            TokenKind::SingleQuotedStringLiteral => "single_quoted_string_literal",
            TokenKind::DoubleQuotedStringLiteral => "double_quoted_string_literal",
            TokenKind::DoubleQuotedStringLiteralHead => "double_quoted_string_literal_head",
            TokenKind::StringLiteralBody => "string_literal_body",
            TokenKind::DoubleQuotedStringLiteralTail => "double_quoted_string_literal_tail",
            TokenKind::HeredocStringLiteral => "heredoc_string_literal",
            TokenKind::HeredocStringLiteralHead => "heredoc_string_literal_head",
            TokenKind::HeredocStringLiteralTail => "heredoc_string_literal_tail",
            TokenKind::NowdocStringLiteral => "nowdoc_string_literal",
            TokenKind::BooleanLiteral => "boolean_literal",
            TokenKind::XHPCategoryName => "XHP_category_name",
            TokenKind::XHPElementName => "XHP_element_name",
            TokenKind::XHPClassName => "XHP_class_name",
            TokenKind::XHPStringLiteral => "XHP_string_literal",
            TokenKind::XHPBody => "XHP_body",
            TokenKind::XHPComment => "XHP_comment",
            TokenKind::Hashbang => "hashbang",
        }
    }

    pub fn from_string(
        keyword: &[u8],
        only_reserved: bool,
    ) -> Option<Self> {
        let keyword = unsafe { std::str::from_utf8_unchecked(keyword) };
        match keyword {
            "true" if !only_reserved => Some(TokenKind::BooleanLiteral),
            "false" if !only_reserved => Some(TokenKind::BooleanLiteral),
            "abstract" => Some(TokenKind::Abstract),
            "arraykey" if !only_reserved => Some(TokenKind::Arraykey),
            "as" => Some(TokenKind::As),
            "async" => Some(TokenKind::Async),
            "attribute" if !only_reserved => Some(TokenKind::Attribute),
            "await" => Some(TokenKind::Await),
            "\\" => Some(TokenKind::Backslash),
            "binary" if !only_reserved => Some(TokenKind::Binary),
            "bool" if !only_reserved => Some(TokenKind::Bool),
            "boolean" if !only_reserved => Some(TokenKind::Boolean),
            "break" => Some(TokenKind::Break),
            "case" => Some(TokenKind::Case),
            "catch" => Some(TokenKind::Catch),
            "category" if !only_reserved => Some(TokenKind::Category),
            "children" if !only_reserved => Some(TokenKind::Children),
            "class" => Some(TokenKind::Class),
            "classname" if !only_reserved => Some(TokenKind::Classname),
            "clone" => Some(TokenKind::Clone),
            "concurrent" => Some(TokenKind::Concurrent),
            "const" => Some(TokenKind::Const),
            "__construct" => Some(TokenKind::Construct),
            "continue" => Some(TokenKind::Continue),
            "ctx" => Some(TokenKind::Ctx),
            "darray" if !only_reserved => Some(TokenKind::Darray),
            "default" => Some(TokenKind::Default),
            "dict" if !only_reserved => Some(TokenKind::Dict),
            "do" => Some(TokenKind::Do),
            "double" if !only_reserved => Some(TokenKind::Double),
            "echo" => Some(TokenKind::Echo),
            "else" => Some(TokenKind::Else),
            "empty" => Some(TokenKind::Empty),
            "endif" => Some(TokenKind::Endif),
            "enum" if !only_reserved => Some(TokenKind::Enum),
            "eval" => Some(TokenKind::Eval),
            "exports" if !only_reserved => Some(TokenKind::Exports),
            "extends" => Some(TokenKind::Extends),
            "fallthrough" if !only_reserved => Some(TokenKind::Fallthrough),
            "float" if !only_reserved => Some(TokenKind::Float),
            "file" if !only_reserved => Some(TokenKind::File),
            "final" => Some(TokenKind::Final),
            "finally" => Some(TokenKind::Finally),
            "for" => Some(TokenKind::For),
            "foreach" => Some(TokenKind::Foreach),
            "function" => Some(TokenKind::Function),
            "global" => Some(TokenKind::Global),
            "if" => Some(TokenKind::If),
            "implements" => Some(TokenKind::Implements),
            "imports" if !only_reserved => Some(TokenKind::Imports),
            "include" => Some(TokenKind::Include),
            "include_once" => Some(TokenKind::Include_once),
            "inout" => Some(TokenKind::Inout),
            "instanceof" => Some(TokenKind::Instanceof),
            "insteadof" => Some(TokenKind::Insteadof),
            "int" if !only_reserved => Some(TokenKind::Int),
            "integer" if !only_reserved => Some(TokenKind::Integer),
            "interface" => Some(TokenKind::Interface),
            "is" if !only_reserved => Some(TokenKind::Is),
            "isset" => Some(TokenKind::Isset),
            "keyset" if !only_reserved => Some(TokenKind::Keyset),
            "lateinit" => Some(TokenKind::Lateinit),
            "list" => Some(TokenKind::List),
            "mixed" if !only_reserved => Some(TokenKind::Mixed),
            "module" => Some(TokenKind::Module),
            "namespace" => Some(TokenKind::Namespace),
            "new" => Some(TokenKind::New),
            "newctx" if !only_reserved => Some(TokenKind::Newctx),
            "newtype" if !only_reserved => Some(TokenKind::Newtype),
            "noreturn" if !only_reserved => Some(TokenKind::Noreturn),
            "num" if !only_reserved => Some(TokenKind::Num),
            "parent" if !only_reserved => Some(TokenKind::Parent),
            "print" => Some(TokenKind::Print),
            "private" => Some(TokenKind::Private),
            "protected" => Some(TokenKind::Protected),
            "public" => Some(TokenKind::Public),
            "real" if !only_reserved => Some(TokenKind::Real),
            "reify" if !only_reserved => Some(TokenKind::Reify),
            "require" => Some(TokenKind::Require),
            "require_once" => Some(TokenKind::Require_once),
            "required" => Some(TokenKind::Required),
            "resource" if !only_reserved => Some(TokenKind::Resource),
            "return" => Some(TokenKind::Return),
            "self" if !only_reserved => Some(TokenKind::SelfToken),
            "shape" => Some(TokenKind::Shape),
            "static" => Some(TokenKind::Static),
            "string" if !only_reserved => Some(TokenKind::String),
            "super" if !only_reserved => Some(TokenKind::Super),
            "switch" => Some(TokenKind::Switch),
            "this" if !only_reserved => Some(TokenKind::This),
            "throw" => Some(TokenKind::Throw),
            "trait" => Some(TokenKind::Trait),
            "try" => Some(TokenKind::Try),
            "tuple" => Some(TokenKind::Tuple),
            "type" if !only_reserved => Some(TokenKind::Type),
            "unset" => Some(TokenKind::Unset),
            "upcast" if !only_reserved => Some(TokenKind::Upcast),
            "use" => Some(TokenKind::Use),
            "using" => Some(TokenKind::Using),
            "var" => Some(TokenKind::Var),
            "varray" if !only_reserved => Some(TokenKind::Varray),
            "vec" if !only_reserved => Some(TokenKind::Vec),
            "void" if !only_reserved => Some(TokenKind::Void),
            "with" if !only_reserved => Some(TokenKind::With),
            "where" if !only_reserved => Some(TokenKind::Where),
            "while" => Some(TokenKind::While),
            "yield" => Some(TokenKind::Yield),
            "null" if !only_reserved => Some(TokenKind::NullLiteral),
            "[" => Some(TokenKind::LeftBracket),
            "]" => Some(TokenKind::RightBracket),
            "(" => Some(TokenKind::LeftParen),
            ")" => Some(TokenKind::RightParen),
            "{" => Some(TokenKind::LeftBrace),
            "}" => Some(TokenKind::RightBrace),
            "." => Some(TokenKind::Dot),
            "->" => Some(TokenKind::MinusGreaterThan),
            "++" => Some(TokenKind::PlusPlus),
            "--" => Some(TokenKind::MinusMinus),
            "**" => Some(TokenKind::StarStar),
            "*" => Some(TokenKind::Star),
            "+" => Some(TokenKind::Plus),
            "-" => Some(TokenKind::Minus),
            "~" => Some(TokenKind::Tilde),
            "!" => Some(TokenKind::Exclamation),
            "$" => Some(TokenKind::Dollar),
            "/" => Some(TokenKind::Slash),
            "%" => Some(TokenKind::Percent),
            "<=>" => Some(TokenKind::LessThanEqualGreaterThan),
            "<<" => Some(TokenKind::LessThanLessThan),
            ">>" => Some(TokenKind::GreaterThanGreaterThan),
            "<" => Some(TokenKind::LessThan),
            ">" => Some(TokenKind::GreaterThan),
            "<=" => Some(TokenKind::LessThanEqual),
            ">=" => Some(TokenKind::GreaterThanEqual),
            "==" => Some(TokenKind::EqualEqual),
            "===" => Some(TokenKind::EqualEqualEqual),
            "!=" => Some(TokenKind::ExclamationEqual),
            "!==" => Some(TokenKind::ExclamationEqualEqual),
            "^" => Some(TokenKind::Carat),
            "|" => Some(TokenKind::Bar),
            "&" => Some(TokenKind::Ampersand),
            "&&" => Some(TokenKind::AmpersandAmpersand),
            "||" => Some(TokenKind::BarBar),
            "?" => Some(TokenKind::Question),
            "?as" => Some(TokenKind::QuestionAs),
            "?:" => Some(TokenKind::QuestionColon),
            "??" => Some(TokenKind::QuestionQuestion),
            "??=" => Some(TokenKind::QuestionQuestionEqual),
            ":" => Some(TokenKind::Colon),
            ";" => Some(TokenKind::Semicolon),
            "=" => Some(TokenKind::Equal),
            "**=" => Some(TokenKind::StarStarEqual),
            "*=" => Some(TokenKind::StarEqual),
            "/=" => Some(TokenKind::SlashEqual),
            "%=" => Some(TokenKind::PercentEqual),
            "+=" => Some(TokenKind::PlusEqual),
            "-=" => Some(TokenKind::MinusEqual),
            ".=" => Some(TokenKind::DotEqual),
            "<<=" => Some(TokenKind::LessThanLessThanEqual),
            ">>=" => Some(TokenKind::GreaterThanGreaterThanEqual),
            "&=" => Some(TokenKind::AmpersandEqual),
            "^=" => Some(TokenKind::CaratEqual),
            "|=" => Some(TokenKind::BarEqual),
            "," => Some(TokenKind::Comma),
            "@" => Some(TokenKind::At),
            "::" => Some(TokenKind::ColonColon),
            "=>" => Some(TokenKind::EqualGreaterThan),
            "==>" => Some(TokenKind::EqualEqualGreaterThan),
            "?->" => Some(TokenKind::QuestionMinusGreaterThan),
            "..." => Some(TokenKind::DotDotDot),
            "$$" => Some(TokenKind::DollarDollar),
            "|>" => Some(TokenKind::BarGreaterThan),
            "/>" => Some(TokenKind::SlashGreaterThan),
            "</" => Some(TokenKind::LessThanSlash),
            "<?" => Some(TokenKind::LessThanQuestion),
            "`" => Some(TokenKind::Backtick),
            "xhp" if !only_reserved => Some(TokenKind::XHP),
            "#" => Some(TokenKind::Hash),
            "readonly" => Some(TokenKind::Readonly),
            "internal" if !only_reserved => Some(TokenKind::Internal),
            "package" if !only_reserved => Some(TokenKind::Package),
            _ => None,
        }
    }

    pub fn ocaml_tag(self) -> u8 {
        match self {
            TokenKind::EndOfFile => 0,
            TokenKind::Abstract => 1,
            TokenKind::Arraykey => 2,
            TokenKind::As => 3,
            TokenKind::Async => 4,
            TokenKind::Attribute => 5,
            TokenKind::Await => 6,
            TokenKind::Backslash => 7,
            TokenKind::Binary => 8,
            TokenKind::Bool => 9,
            TokenKind::Boolean => 10,
            TokenKind::Break => 11,
            TokenKind::Case => 12,
            TokenKind::Catch => 13,
            TokenKind::Category => 14,
            TokenKind::Children => 15,
            TokenKind::Class => 16,
            TokenKind::Classname => 17,
            TokenKind::Clone => 18,
            TokenKind::Concurrent => 19,
            TokenKind::Const => 20,
            TokenKind::Construct => 21,
            TokenKind::Continue => 22,
            TokenKind::Ctx => 23,
            TokenKind::Darray => 24,
            TokenKind::Default => 25,
            TokenKind::Dict => 26,
            TokenKind::Do => 27,
            TokenKind::Double => 28,
            TokenKind::Echo => 29,
            TokenKind::Else => 30,
            TokenKind::Empty => 31,
            TokenKind::Endif => 32,
            TokenKind::Enum => 33,
            TokenKind::Eval => 34,
            TokenKind::Exports => 35,
            TokenKind::Extends => 36,
            TokenKind::Fallthrough => 37,
            TokenKind::Float => 38,
            TokenKind::File => 39,
            TokenKind::Final => 40,
            TokenKind::Finally => 41,
            TokenKind::For => 42,
            TokenKind::Foreach => 43,
            TokenKind::Function => 44,
            TokenKind::Global => 45,
            TokenKind::If => 46,
            TokenKind::Implements => 47,
            TokenKind::Imports => 48,
            TokenKind::Include => 49,
            TokenKind::Include_once => 50,
            TokenKind::Inout => 51,
            TokenKind::Instanceof => 52,
            TokenKind::Insteadof => 53,
            TokenKind::Int => 54,
            TokenKind::Integer => 55,
            TokenKind::Interface => 56,
            TokenKind::Is => 57,
            TokenKind::Isset => 58,
            TokenKind::Keyset => 59,
            TokenKind::Lateinit => 60,
            TokenKind::List => 61,
            TokenKind::Mixed => 62,
            TokenKind::Module => 63,
            TokenKind::Namespace => 64,
            TokenKind::New => 65,
            TokenKind::Newctx => 66,
            TokenKind::Newtype => 67,
            TokenKind::Noreturn => 68,
            TokenKind::Num => 69,
            TokenKind::Parent => 70,
            TokenKind::Print => 71,
            TokenKind::Private => 72,
            TokenKind::Protected => 73,
            TokenKind::Public => 74,
            TokenKind::Real => 75,
            TokenKind::Reify => 76,
            TokenKind::Require => 77,
            TokenKind::Require_once => 78,
            TokenKind::Required => 79,
            TokenKind::Resource => 80,
            TokenKind::Return => 81,
            TokenKind::SelfToken => 82,
            TokenKind::Shape => 83,
            TokenKind::Static => 84,
            TokenKind::String => 85,
            TokenKind::Super => 86,
            TokenKind::Switch => 87,
            TokenKind::This => 88,
            TokenKind::Throw => 89,
            TokenKind::Trait => 90,
            TokenKind::Try => 91,
            TokenKind::Tuple => 92,
            TokenKind::Type => 93,
            TokenKind::Unset => 94,
            TokenKind::Upcast => 95,
            TokenKind::Use => 96,
            TokenKind::Using => 97,
            TokenKind::Var => 98,
            TokenKind::Varray => 99,
            TokenKind::Vec => 100,
            TokenKind::Void => 101,
            TokenKind::With => 102,
            TokenKind::Where => 103,
            TokenKind::While => 104,
            TokenKind::Yield => 105,
            TokenKind::NullLiteral => 106,
            TokenKind::LeftBracket => 107,
            TokenKind::RightBracket => 108,
            TokenKind::LeftParen => 109,
            TokenKind::RightParen => 110,
            TokenKind::LeftBrace => 111,
            TokenKind::RightBrace => 112,
            TokenKind::Dot => 113,
            TokenKind::MinusGreaterThan => 114,
            TokenKind::PlusPlus => 115,
            TokenKind::MinusMinus => 116,
            TokenKind::StarStar => 117,
            TokenKind::Star => 118,
            TokenKind::Plus => 119,
            TokenKind::Minus => 120,
            TokenKind::Tilde => 121,
            TokenKind::Exclamation => 122,
            TokenKind::Dollar => 123,
            TokenKind::Slash => 124,
            TokenKind::Percent => 125,
            TokenKind::LessThanEqualGreaterThan => 126,
            TokenKind::LessThanLessThan => 127,
            TokenKind::GreaterThanGreaterThan => 128,
            TokenKind::LessThan => 129,
            TokenKind::GreaterThan => 130,
            TokenKind::LessThanEqual => 131,
            TokenKind::GreaterThanEqual => 132,
            TokenKind::EqualEqual => 133,
            TokenKind::EqualEqualEqual => 134,
            TokenKind::ExclamationEqual => 135,
            TokenKind::ExclamationEqualEqual => 136,
            TokenKind::Carat => 137,
            TokenKind::Bar => 138,
            TokenKind::Ampersand => 139,
            TokenKind::AmpersandAmpersand => 140,
            TokenKind::BarBar => 141,
            TokenKind::Question => 142,
            TokenKind::QuestionAs => 143,
            TokenKind::QuestionColon => 144,
            TokenKind::QuestionQuestion => 145,
            TokenKind::QuestionQuestionEqual => 146,
            TokenKind::Colon => 147,
            TokenKind::Semicolon => 148,
            TokenKind::Equal => 149,
            TokenKind::StarStarEqual => 150,
            TokenKind::StarEqual => 151,
            TokenKind::SlashEqual => 152,
            TokenKind::PercentEqual => 153,
            TokenKind::PlusEqual => 154,
            TokenKind::MinusEqual => 155,
            TokenKind::DotEqual => 156,
            TokenKind::LessThanLessThanEqual => 157,
            TokenKind::GreaterThanGreaterThanEqual => 158,
            TokenKind::AmpersandEqual => 159,
            TokenKind::CaratEqual => 160,
            TokenKind::BarEqual => 161,
            TokenKind::Comma => 162,
            TokenKind::At => 163,
            TokenKind::ColonColon => 164,
            TokenKind::EqualGreaterThan => 165,
            TokenKind::EqualEqualGreaterThan => 166,
            TokenKind::QuestionMinusGreaterThan => 167,
            TokenKind::DotDotDot => 168,
            TokenKind::DollarDollar => 169,
            TokenKind::BarGreaterThan => 170,
            TokenKind::SlashGreaterThan => 171,
            TokenKind::LessThanSlash => 172,
            TokenKind::LessThanQuestion => 173,
            TokenKind::Backtick => 174,
            TokenKind::XHP => 175,
            TokenKind::Hash => 176,
            TokenKind::Readonly => 177,
            TokenKind::Internal => 178,
            TokenKind::Package => 179,
            TokenKind::ErrorToken => 180,
            TokenKind::Name => 181,
            TokenKind::Variable => 182,
            TokenKind::DecimalLiteral => 183,
            TokenKind::OctalLiteral => 184,
            TokenKind::HexadecimalLiteral => 185,
            TokenKind::BinaryLiteral => 186,
            TokenKind::FloatingLiteral => 187,
            TokenKind::SingleQuotedStringLiteral => 188,
            TokenKind::DoubleQuotedStringLiteral => 189,
            TokenKind::DoubleQuotedStringLiteralHead => 190,
            TokenKind::StringLiteralBody => 191,
            TokenKind::DoubleQuotedStringLiteralTail => 192,
            TokenKind::HeredocStringLiteral => 193,
            TokenKind::HeredocStringLiteralHead => 194,
            TokenKind::HeredocStringLiteralTail => 195,
            TokenKind::NowdocStringLiteral => 196,
            TokenKind::BooleanLiteral => 197,
            TokenKind::XHPCategoryName => 198,
            TokenKind::XHPElementName => 199,
            TokenKind::XHPClassName => 200,
            TokenKind::XHPStringLiteral => 201,
            TokenKind::XHPBody => 202,
            TokenKind::XHPComment => 203,
            TokenKind::Hashbang => 204,
        }
    }

    pub fn try_from_u8(tag: u8) -> Option<Self> {
        match tag {
            0 => Some(TokenKind::EndOfFile),
            1 => Some(TokenKind::Abstract),
            2 => Some(TokenKind::Arraykey),
            3 => Some(TokenKind::As),
            4 => Some(TokenKind::Async),
            5 => Some(TokenKind::Attribute),
            6 => Some(TokenKind::Await),
            7 => Some(TokenKind::Backslash),
            8 => Some(TokenKind::Binary),
            9 => Some(TokenKind::Bool),
            10 => Some(TokenKind::Boolean),
            11 => Some(TokenKind::Break),
            12 => Some(TokenKind::Case),
            13 => Some(TokenKind::Catch),
            14 => Some(TokenKind::Category),
            15 => Some(TokenKind::Children),
            16 => Some(TokenKind::Class),
            17 => Some(TokenKind::Classname),
            18 => Some(TokenKind::Clone),
            19 => Some(TokenKind::Concurrent),
            20 => Some(TokenKind::Const),
            21 => Some(TokenKind::Construct),
            22 => Some(TokenKind::Continue),
            23 => Some(TokenKind::Ctx),
            24 => Some(TokenKind::Darray),
            25 => Some(TokenKind::Default),
            26 => Some(TokenKind::Dict),
            27 => Some(TokenKind::Do),
            28 => Some(TokenKind::Double),
            29 => Some(TokenKind::Echo),
            30 => Some(TokenKind::Else),
            31 => Some(TokenKind::Empty),
            32 => Some(TokenKind::Endif),
            33 => Some(TokenKind::Enum),
            34 => Some(TokenKind::Eval),
            35 => Some(TokenKind::Exports),
            36 => Some(TokenKind::Extends),
            37 => Some(TokenKind::Fallthrough),
            38 => Some(TokenKind::Float),
            39 => Some(TokenKind::File),
            40 => Some(TokenKind::Final),
            41 => Some(TokenKind::Finally),
            42 => Some(TokenKind::For),
            43 => Some(TokenKind::Foreach),
            44 => Some(TokenKind::Function),
            45 => Some(TokenKind::Global),
            46 => Some(TokenKind::If),
            47 => Some(TokenKind::Implements),
            48 => Some(TokenKind::Imports),
            49 => Some(TokenKind::Include),
            50 => Some(TokenKind::Include_once),
            51 => Some(TokenKind::Inout),
            52 => Some(TokenKind::Instanceof),
            53 => Some(TokenKind::Insteadof),
            54 => Some(TokenKind::Int),
            55 => Some(TokenKind::Integer),
            56 => Some(TokenKind::Interface),
            57 => Some(TokenKind::Is),
            58 => Some(TokenKind::Isset),
            59 => Some(TokenKind::Keyset),
            60 => Some(TokenKind::Lateinit),
            61 => Some(TokenKind::List),
            62 => Some(TokenKind::Mixed),
            63 => Some(TokenKind::Module),
            64 => Some(TokenKind::Namespace),
            65 => Some(TokenKind::New),
            66 => Some(TokenKind::Newctx),
            67 => Some(TokenKind::Newtype),
            68 => Some(TokenKind::Noreturn),
            69 => Some(TokenKind::Num),
            70 => Some(TokenKind::Parent),
            71 => Some(TokenKind::Print),
            72 => Some(TokenKind::Private),
            73 => Some(TokenKind::Protected),
            74 => Some(TokenKind::Public),
            75 => Some(TokenKind::Real),
            76 => Some(TokenKind::Reify),
            77 => Some(TokenKind::Require),
            78 => Some(TokenKind::Require_once),
            79 => Some(TokenKind::Required),
            80 => Some(TokenKind::Resource),
            81 => Some(TokenKind::Return),
            82 => Some(TokenKind::SelfToken),
            83 => Some(TokenKind::Shape),
            84 => Some(TokenKind::Static),
            85 => Some(TokenKind::String),
            86 => Some(TokenKind::Super),
            87 => Some(TokenKind::Switch),
            88 => Some(TokenKind::This),
            89 => Some(TokenKind::Throw),
            90 => Some(TokenKind::Trait),
            91 => Some(TokenKind::Try),
            92 => Some(TokenKind::Tuple),
            93 => Some(TokenKind::Type),
            94 => Some(TokenKind::Unset),
            95 => Some(TokenKind::Upcast),
            96 => Some(TokenKind::Use),
            97 => Some(TokenKind::Using),
            98 => Some(TokenKind::Var),
            99 => Some(TokenKind::Varray),
            100 => Some(TokenKind::Vec),
            101 => Some(TokenKind::Void),
            102 => Some(TokenKind::With),
            103 => Some(TokenKind::Where),
            104 => Some(TokenKind::While),
            105 => Some(TokenKind::Yield),
            106 => Some(TokenKind::NullLiteral),
            107 => Some(TokenKind::LeftBracket),
            108 => Some(TokenKind::RightBracket),
            109 => Some(TokenKind::LeftParen),
            110 => Some(TokenKind::RightParen),
            111 => Some(TokenKind::LeftBrace),
            112 => Some(TokenKind::RightBrace),
            113 => Some(TokenKind::Dot),
            114 => Some(TokenKind::MinusGreaterThan),
            115 => Some(TokenKind::PlusPlus),
            116 => Some(TokenKind::MinusMinus),
            117 => Some(TokenKind::StarStar),
            118 => Some(TokenKind::Star),
            119 => Some(TokenKind::Plus),
            120 => Some(TokenKind::Minus),
            121 => Some(TokenKind::Tilde),
            122 => Some(TokenKind::Exclamation),
            123 => Some(TokenKind::Dollar),
            124 => Some(TokenKind::Slash),
            125 => Some(TokenKind::Percent),
            126 => Some(TokenKind::LessThanEqualGreaterThan),
            127 => Some(TokenKind::LessThanLessThan),
            128 => Some(TokenKind::GreaterThanGreaterThan),
            129 => Some(TokenKind::LessThan),
            130 => Some(TokenKind::GreaterThan),
            131 => Some(TokenKind::LessThanEqual),
            132 => Some(TokenKind::GreaterThanEqual),
            133 => Some(TokenKind::EqualEqual),
            134 => Some(TokenKind::EqualEqualEqual),
            135 => Some(TokenKind::ExclamationEqual),
            136 => Some(TokenKind::ExclamationEqualEqual),
            137 => Some(TokenKind::Carat),
            138 => Some(TokenKind::Bar),
            139 => Some(TokenKind::Ampersand),
            140 => Some(TokenKind::AmpersandAmpersand),
            141 => Some(TokenKind::BarBar),
            142 => Some(TokenKind::Question),
            143 => Some(TokenKind::QuestionAs),
            144 => Some(TokenKind::QuestionColon),
            145 => Some(TokenKind::QuestionQuestion),
            146 => Some(TokenKind::QuestionQuestionEqual),
            147 => Some(TokenKind::Colon),
            148 => Some(TokenKind::Semicolon),
            149 => Some(TokenKind::Equal),
            150 => Some(TokenKind::StarStarEqual),
            151 => Some(TokenKind::StarEqual),
            152 => Some(TokenKind::SlashEqual),
            153 => Some(TokenKind::PercentEqual),
            154 => Some(TokenKind::PlusEqual),
            155 => Some(TokenKind::MinusEqual),
            156 => Some(TokenKind::DotEqual),
            157 => Some(TokenKind::LessThanLessThanEqual),
            158 => Some(TokenKind::GreaterThanGreaterThanEqual),
            159 => Some(TokenKind::AmpersandEqual),
            160 => Some(TokenKind::CaratEqual),
            161 => Some(TokenKind::BarEqual),
            162 => Some(TokenKind::Comma),
            163 => Some(TokenKind::At),
            164 => Some(TokenKind::ColonColon),
            165 => Some(TokenKind::EqualGreaterThan),
            166 => Some(TokenKind::EqualEqualGreaterThan),
            167 => Some(TokenKind::QuestionMinusGreaterThan),
            168 => Some(TokenKind::DotDotDot),
            169 => Some(TokenKind::DollarDollar),
            170 => Some(TokenKind::BarGreaterThan),
            171 => Some(TokenKind::SlashGreaterThan),
            172 => Some(TokenKind::LessThanSlash),
            173 => Some(TokenKind::LessThanQuestion),
            174 => Some(TokenKind::Backtick),
            175 => Some(TokenKind::XHP),
            176 => Some(TokenKind::Hash),
            177 => Some(TokenKind::Readonly),
            178 => Some(TokenKind::Internal),
            179 => Some(TokenKind::Package),
            180 => Some(TokenKind::ErrorToken),
            181 => Some(TokenKind::Name),
            182 => Some(TokenKind::Variable),
            183 => Some(TokenKind::DecimalLiteral),
            184 => Some(TokenKind::OctalLiteral),
            185 => Some(TokenKind::HexadecimalLiteral),
            186 => Some(TokenKind::BinaryLiteral),
            187 => Some(TokenKind::FloatingLiteral),
            188 => Some(TokenKind::SingleQuotedStringLiteral),
            189 => Some(TokenKind::DoubleQuotedStringLiteral),
            190 => Some(TokenKind::DoubleQuotedStringLiteralHead),
            191 => Some(TokenKind::StringLiteralBody),
            192 => Some(TokenKind::DoubleQuotedStringLiteralTail),
            193 => Some(TokenKind::HeredocStringLiteral),
            194 => Some(TokenKind::HeredocStringLiteralHead),
            195 => Some(TokenKind::HeredocStringLiteralTail),
            196 => Some(TokenKind::NowdocStringLiteral),
            197 => Some(TokenKind::BooleanLiteral),
            198 => Some(TokenKind::XHPCategoryName),
            199 => Some(TokenKind::XHPElementName),
            200 => Some(TokenKind::XHPClassName),
            201 => Some(TokenKind::XHPStringLiteral),
            202 => Some(TokenKind::XHPBody),
            203 => Some(TokenKind::XHPComment),
            204 => Some(TokenKind::Hashbang),
            _ => None,
        }
    }

    pub fn fixed_width(self) -> Option<NonZeroUsize> {
        match self {
            TokenKind::Abstract => Some(unsafe { NonZeroUsize::new_unchecked(8) }),
            TokenKind::Arraykey => Some(unsafe { NonZeroUsize::new_unchecked(8) }),
            TokenKind::As => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::Async => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Attribute => Some(unsafe { NonZeroUsize::new_unchecked(9) }),
            TokenKind::Await => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Backslash => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::Binary => Some(unsafe { NonZeroUsize::new_unchecked(6) }),
            TokenKind::Bool => Some(unsafe { NonZeroUsize::new_unchecked(4) }),
            TokenKind::Boolean => Some(unsafe { NonZeroUsize::new_unchecked(7) }),
            TokenKind::Break => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Case => Some(unsafe { NonZeroUsize::new_unchecked(4) }),
            TokenKind::Catch => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Category => Some(unsafe { NonZeroUsize::new_unchecked(8) }),
            TokenKind::Children => Some(unsafe { NonZeroUsize::new_unchecked(8) }),
            TokenKind::Class => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Classname => Some(unsafe { NonZeroUsize::new_unchecked(9) }),
            TokenKind::Clone => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Concurrent => Some(unsafe { NonZeroUsize::new_unchecked(10) }),
            TokenKind::Const => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Construct => Some(unsafe { NonZeroUsize::new_unchecked(11) }),
            TokenKind::Continue => Some(unsafe { NonZeroUsize::new_unchecked(8) }),
            TokenKind::Ctx => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::Darray => Some(unsafe { NonZeroUsize::new_unchecked(6) }),
            TokenKind::Default => Some(unsafe { NonZeroUsize::new_unchecked(7) }),
            TokenKind::Dict => Some(unsafe { NonZeroUsize::new_unchecked(4) }),
            TokenKind::Do => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::Double => Some(unsafe { NonZeroUsize::new_unchecked(6) }),
            TokenKind::Echo => Some(unsafe { NonZeroUsize::new_unchecked(4) }),
            TokenKind::Else => Some(unsafe { NonZeroUsize::new_unchecked(4) }),
            TokenKind::Empty => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Endif => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Enum => Some(unsafe { NonZeroUsize::new_unchecked(4) }),
            TokenKind::Eval => Some(unsafe { NonZeroUsize::new_unchecked(4) }),
            TokenKind::Exports => Some(unsafe { NonZeroUsize::new_unchecked(7) }),
            TokenKind::Extends => Some(unsafe { NonZeroUsize::new_unchecked(7) }),
            TokenKind::Fallthrough => Some(unsafe { NonZeroUsize::new_unchecked(11) }),
            TokenKind::Float => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::File => Some(unsafe { NonZeroUsize::new_unchecked(4) }),
            TokenKind::Final => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Finally => Some(unsafe { NonZeroUsize::new_unchecked(7) }),
            TokenKind::For => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::Foreach => Some(unsafe { NonZeroUsize::new_unchecked(7) }),
            TokenKind::Function => Some(unsafe { NonZeroUsize::new_unchecked(8) }),
            TokenKind::Global => Some(unsafe { NonZeroUsize::new_unchecked(6) }),
            TokenKind::If => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::Implements => Some(unsafe { NonZeroUsize::new_unchecked(10) }),
            TokenKind::Imports => Some(unsafe { NonZeroUsize::new_unchecked(7) }),
            TokenKind::Include => Some(unsafe { NonZeroUsize::new_unchecked(7) }),
            TokenKind::Include_once => Some(unsafe { NonZeroUsize::new_unchecked(12) }),
            TokenKind::Inout => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Instanceof => Some(unsafe { NonZeroUsize::new_unchecked(10) }),
            TokenKind::Insteadof => Some(unsafe { NonZeroUsize::new_unchecked(9) }),
            TokenKind::Int => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::Integer => Some(unsafe { NonZeroUsize::new_unchecked(7) }),
            TokenKind::Interface => Some(unsafe { NonZeroUsize::new_unchecked(9) }),
            TokenKind::Is => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::Isset => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Keyset => Some(unsafe { NonZeroUsize::new_unchecked(6) }),
            TokenKind::Lateinit => Some(unsafe { NonZeroUsize::new_unchecked(8) }),
            TokenKind::List => Some(unsafe { NonZeroUsize::new_unchecked(4) }),
            TokenKind::Mixed => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Module => Some(unsafe { NonZeroUsize::new_unchecked(6) }),
            TokenKind::Namespace => Some(unsafe { NonZeroUsize::new_unchecked(9) }),
            TokenKind::New => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::Newctx => Some(unsafe { NonZeroUsize::new_unchecked(6) }),
            TokenKind::Newtype => Some(unsafe { NonZeroUsize::new_unchecked(7) }),
            TokenKind::Noreturn => Some(unsafe { NonZeroUsize::new_unchecked(8) }),
            TokenKind::Num => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::Parent => Some(unsafe { NonZeroUsize::new_unchecked(6) }),
            TokenKind::Print => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Private => Some(unsafe { NonZeroUsize::new_unchecked(7) }),
            TokenKind::Protected => Some(unsafe { NonZeroUsize::new_unchecked(9) }),
            TokenKind::Public => Some(unsafe { NonZeroUsize::new_unchecked(6) }),
            TokenKind::Real => Some(unsafe { NonZeroUsize::new_unchecked(4) }),
            TokenKind::Reify => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Require => Some(unsafe { NonZeroUsize::new_unchecked(7) }),
            TokenKind::Require_once => Some(unsafe { NonZeroUsize::new_unchecked(12) }),
            TokenKind::Required => Some(unsafe { NonZeroUsize::new_unchecked(8) }),
            TokenKind::Resource => Some(unsafe { NonZeroUsize::new_unchecked(8) }),
            TokenKind::Return => Some(unsafe { NonZeroUsize::new_unchecked(6) }),
            TokenKind::SelfToken => Some(unsafe { NonZeroUsize::new_unchecked(4) }),
            TokenKind::Shape => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Static => Some(unsafe { NonZeroUsize::new_unchecked(6) }),
            TokenKind::String => Some(unsafe { NonZeroUsize::new_unchecked(6) }),
            TokenKind::Super => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Switch => Some(unsafe { NonZeroUsize::new_unchecked(6) }),
            TokenKind::This => Some(unsafe { NonZeroUsize::new_unchecked(4) }),
            TokenKind::Throw => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Trait => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Try => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::Tuple => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Type => Some(unsafe { NonZeroUsize::new_unchecked(4) }),
            TokenKind::Unset => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Upcast => Some(unsafe { NonZeroUsize::new_unchecked(6) }),
            TokenKind::Use => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::Using => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Var => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::Varray => Some(unsafe { NonZeroUsize::new_unchecked(6) }),
            TokenKind::Vec => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::Void => Some(unsafe { NonZeroUsize::new_unchecked(4) }),
            TokenKind::With => Some(unsafe { NonZeroUsize::new_unchecked(4) }),
            TokenKind::Where => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::While => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::Yield => Some(unsafe { NonZeroUsize::new_unchecked(5) }),
            TokenKind::NullLiteral => Some(unsafe { NonZeroUsize::new_unchecked(4) }),
            TokenKind::LeftBracket => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::RightBracket => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::LeftParen => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::RightParen => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::LeftBrace => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::RightBrace => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::Dot => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::MinusGreaterThan => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::PlusPlus => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::MinusMinus => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::StarStar => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::Star => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::Plus => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::Minus => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::Tilde => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::Exclamation => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::Dollar => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::Slash => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::Percent => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::LessThanEqualGreaterThan => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::LessThanLessThan => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::GreaterThanGreaterThan => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::LessThan => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::GreaterThan => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::LessThanEqual => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::GreaterThanEqual => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::EqualEqual => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::EqualEqualEqual => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::ExclamationEqual => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::ExclamationEqualEqual => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::Carat => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::Bar => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::Ampersand => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::AmpersandAmpersand => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::BarBar => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::Question => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::QuestionAs => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::QuestionColon => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::QuestionQuestion => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::QuestionQuestionEqual => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::Colon => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::Semicolon => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::Equal => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::StarStarEqual => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::StarEqual => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::SlashEqual => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::PercentEqual => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::PlusEqual => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::MinusEqual => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::DotEqual => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::LessThanLessThanEqual => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::GreaterThanGreaterThanEqual => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::AmpersandEqual => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::CaratEqual => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::BarEqual => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::Comma => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::At => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::ColonColon => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::EqualGreaterThan => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::EqualEqualGreaterThan => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::QuestionMinusGreaterThan => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::DotDotDot => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::DollarDollar => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::BarGreaterThan => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::SlashGreaterThan => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::LessThanSlash => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::LessThanQuestion => Some(unsafe { NonZeroUsize::new_unchecked(2) }),
            TokenKind::Backtick => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::XHP => Some(unsafe { NonZeroUsize::new_unchecked(3) }),
            TokenKind::Hash => Some(unsafe { NonZeroUsize::new_unchecked(1) }),
            TokenKind::Readonly => Some(unsafe { NonZeroUsize::new_unchecked(8) }),
            TokenKind::Internal => Some(unsafe { NonZeroUsize::new_unchecked(8) }),
            TokenKind::Package => Some(unsafe { NonZeroUsize::new_unchecked(7) }),
            _ => None,
        }
    }
}
