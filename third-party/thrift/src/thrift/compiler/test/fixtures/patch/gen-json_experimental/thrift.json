{
  "__fbthrift": "@generated",
  "thrift_module" : "thrift",
  "includes": {
    "scope": "thrift/annotation/scope.thrift"
  },
  "namespaces": {
    "go": "thrift.annotation.thrift",
    "java": "com.facebook.thrift.annotation_deprecated",
    "js": "thrift.annotation.thrift",
    "py": "thrift.annotation.thrift",
    "py.asyncio": "facebook_thrift_asyncio.annotation.thrift"
  },  "structs" :
  {
      "Beta" : {
        "name" : "Beta",
        "structured_annotations": {
          "scope.Program" : {
        "type" : {
  "type" : "struct",
  "name" : "Program",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Definition" : {
        "type" : {
  "type" : "struct",
  "name" : "Definition",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates a definition/feature may change in incompatible ways.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 32
      },
      "Experimental" : {
        "name" : "Experimental",
        "structured_annotations": {
          "scope.Program" : {
        "type" : {
  "type" : "struct",
  "name" : "Program",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Definition" : {
        "type" : {
  "type" : "struct",
  "name" : "Definition",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates a definition/feature should only be used with permission, may only\nwork in specific contexts, and may change in incompatible ways without notice.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 40
      },
      "Testing" : {
        "name" : "Testing",
        "structured_annotations": {
          "scope.Program" : {
        "type" : {
  "type" : "struct",
  "name" : "Program",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Definition" : {
        "type" : {
  "type" : "struct",
  "name" : "Definition",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates a definition/feature should only be used in an ephemeral testing\nenviornment.\n\nSuch enviornments only store serialized values temporarly and strictly\ncontrol which versions of Thrift definitions are used, so 'compatibility'\nis not a concern.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 52
      },
      "Deprecated" : {
        "name" : "Deprecated",
        "structured_annotations": {
          "thrift.Beta" : {
        "type" : {
  "type" : "struct",
  "name" : "Beta"
},
        "value" : {}
      },
          "scope.Program" : {
        "type" : {
  "type" : "struct",
  "name" : "Program",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Definition" : {
        "type" : {
  "type" : "struct",
  "name" : "Definition",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates a definition/feature should no longer be used.\n",
        "fields" : {
          "message" : {
            "name" : "message",
            "key" : 1,
            "lineno" : 63,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 59
      },
      "ReserveIds" : {
        "name" : "ReserveIds",
        "structured_annotations": {
          "scope.Structured" : {
        "type" : {
  "type" : "struct",
  "name" : "Structured",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.FbthriftInternalEnum" : {
        "type" : {
  "type" : "struct",
  "name" : "FbthriftInternalEnum",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "fields" : {
          "ids" : {
            "name" : "ids",
            "key" : 1,
            "lineno" : 83,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "list",
  "inner_type" : "i32"
}
                  },
          "id_ranges" : {
            "name" : "id_ranges",
            "key" : 2,
            "lineno" : 88,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "map",
  "key_type" : "i32",
  "value_type" : "i32"
}
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 79
      },
      "Legacy" : {
        "name" : "Legacy",
        "structured_annotations": {
          "thrift.Deprecated" : {
        "type" : {
  "type" : "struct",
  "name" : "Deprecated"
},
        "value" : {}
      },
          "scope.Transitive" : {
        "type" : {
  "type" : "struct",
  "name" : "Transitive",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates  a definition/feature will be removed in the next release.\n\nPleased migrate off of all @Legacy as soon as possible.\n",
        "fields" : {
          "message" : {
            "name" : "message",
            "key" : 1,
            "lineno" : 101,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 98
      },
      "RequiresBackwardCompatibility" : {
        "name" : "RequiresBackwardCompatibility",
        "structured_annotations": {
          "scope.Structured" : {
        "type" : {
  "type" : "struct",
  "name" : "Structured",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates additional backward compatibility restrictions, beyond the\nstandard Thrift required 'wire' compatibility.\n",
        "fields" : {
          "field_name" : {
            "name" : "field_name",
            "default_value" : 0,
            "key" : 1,
            "lineno" : 112,
            "required" : "opt-in-req-out",
            "type" : "bool"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 109
      },
      "NoExperimental" : {
        "name" : "NoExperimental",
        "structured_annotations": {
          "scope.Program" : {
        "type" : {
  "type" : "struct",
  "name" : "Program",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Definition" : {
        "type" : {
  "type" : "struct",
  "name" : "Definition",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Best-effort disables experimental features.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 116
      },
      "NoBeta" : {
        "name" : "NoBeta",
        "structured_annotations": {
          "thrift.NoExperimental" : {
        "type" : {
  "type" : "struct",
  "name" : "NoExperimental"
},
        "value" : {}
      },
          "scope.Transitive" : {
        "type" : {
  "type" : "struct",
  "name" : "Transitive",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Best-effort disables @Beta features.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 121
      },
      "NoLegacy" : {
        "name" : "NoLegacy",
        "structured_annotations": {
          "scope.Program" : {
        "type" : {
  "type" : "struct",
  "name" : "Program",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Definition" : {
        "type" : {
  "type" : "struct",
  "name" : "Definition",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental"
},
        "value" : {}
      }
        },
        "docstring" : "Best-effort disables @Legacy features.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 130
      },
      "NoDeprecated" : {
        "name" : "NoDeprecated",
        "structured_annotations": {
          "thrift.NoLegacy" : {
        "type" : {
  "type" : "struct",
  "name" : "NoLegacy"
},
        "value" : {}
      },
          "thrift.Beta" : {
        "type" : {
  "type" : "struct",
  "name" : "Beta"
},
        "value" : {}
      },
          "scope.Transitive" : {
        "type" : {
  "type" : "struct",
  "name" : "Transitive",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Best-effort disables @Deprecated features.\n\nShould only be enabled in `test` versions, as deprecated implies removing\nthe feature will break current usage (otherwise it would be @Legacy or\ndeleted)\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 142
      },
      "TerseWrite" : {
        "name" : "TerseWrite",
        "structured_annotations": {
          "scope.Program" : {
        "type" : {
  "type" : "struct",
  "name" : "Program",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Struct" : {
        "type" : {
  "type" : "struct",
  "name" : "Struct",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Exception" : {
        "type" : {
  "type" : "struct",
  "name" : "Exception",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental"
},
        "value" : {}
      }
        },
        "docstring" : "An annotation that changes the field qualifier from 'none' to 'terse'.\nA terse field is eligible to skip serialization, when it equals to the\nintrinsic default value. It also clears to the intrinsic default value\nbefore deserialization to distinguish between if a terse field was skipped\nor missing during serialization. This is different from an unqualified\nfield, as an unqualified field is always serialized regardless of its value,\nand it is not cleared before deserialization.\n\nThe annotation can be only used to annotate an unqualified field, and when\nit is annotating a struct or exception, it changes all unqualified fields to\nterse fields. Note, the annotation can not be used for union.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 165
      },
      "Box" : {
        "name" : "Box",
        "structured_annotations": {
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "thrift.Beta" : {
        "type" : {
  "type" : "struct",
  "name" : "Beta"
},
        "value" : {}
      }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 173
      },
      "Mixin" : {
        "name" : "Mixin",
        "structured_annotations": {
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "thrift.Beta" : {
        "type" : {
  "type" : "struct",
  "name" : "Beta"
},
        "value" : {}
      }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 178
      },
      "SerializeInFieldIdOrder" : {
        "name" : "SerializeInFieldIdOrder",
        "structured_annotations": {
          "scope.Struct" : {
        "type" : {
  "type" : "struct",
  "name" : "Struct",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental"
},
        "value" : {}
      }
        },
        "docstring" : "Option to serialize thrift struct in ascending field id order.\n\nThis can potentially make serialized data size smaller in compact protocol,\nsince compact protocol can write deltas between subsequent field ids.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 188
      },
      "GenDefaultEnumValue" : {
        "name" : "GenDefaultEnumValue",
        "structured_annotations": {
          "scope.FbthriftInternalEnum" : {
        "type" : {
  "type" : "struct",
  "name" : "FbthriftInternalEnum",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Program" : {
        "type" : {
  "type" : "struct",
  "name" : "Program",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "thrift.Beta" : {
        "type" : {
  "type" : "struct",
  "name" : "Beta"
},
        "value" : {}
      }
        },
        "docstring" : "Adds a default enum value (0), with the given name, if one is not\nalready defined.\n\nAll v1+ enums must have an explicitly defined default value (0).\nThis annotation automatically adds such a value if not already present.\n",
        "fields" : {
          "name" : {
            "name" : "name",
            "default_value" : "Unspecified",
            "docstring" : "The name to use for the generated enum value.\n\nThis intentionally does **not** use the most common 'zero' enum value name,\n'Default', by default; as, defining a `Default = 0` enum value explicitly\nis a useful means of self-documenting that setting an explicit value is\nnever required. In which case, it is part of the API, and should not be\nremoved in favor of an implicitly generated value.\n\nOn the other hand, 'Unspecified' clearly indicates that the requirements\nare not intrinsic to the enum. In which case, the relevant documentation\nshould be consulted (e.g. the doc strings on the function or field).\n",
            "key" : 1,
            "lineno" : 220,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 203
      },
      "v1" : {
        "name" : "v1",
        "structured_annotations": {
          "scope.Transitive" : {
        "type" : {
  "type" : "struct",
  "name" : "Transitive",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Enables all released v1 features.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 229
      },
      "v1beta" : {
        "name" : "v1beta",
        "structured_annotations": {
          "thrift.v1" : {
        "type" : {
  "type" : "struct",
  "name" : "v1"
},
        "value" : {}
      },
          "thrift.GenDefaultEnumValue" : {
        "type" : {
  "type" : "struct",
  "name" : "GenDefaultEnumValue"
},
        "value" : {}
      },
          "thrift.NoLegacy" : {
        "type" : {
  "type" : "struct",
  "name" : "NoLegacy"
},
        "value" : {}
      },
          "thrift.Beta" : {
        "type" : {
  "type" : "struct",
  "name" : "Beta"
},
        "value" : {}
      },
          "thrift.TerseWrite" : {
        "type" : {
  "type" : "struct",
  "name" : "TerseWrite"
},
        "value" : {}
      },
          "scope.Transitive" : {
        "type" : {
  "type" : "struct",
  "name" : "Transitive",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Enables all beta v1 features.\n\nBeta features are guaranteed to *not* break unrelated Thrift features\nso they should be relatively safe to test alongside other beta or\nreleased Thrift features.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 239
      },
      "v1alpha" : {
        "name" : "v1alpha",
        "structured_annotations": {
          "thrift.v1beta" : {
        "type" : {
  "type" : "struct",
  "name" : "v1beta"
},
        "value" : {}
      },
          "thrift.SerializeInFieldIdOrder" : {
        "type" : {
  "type" : "struct",
  "name" : "SerializeInFieldIdOrder"
},
        "value" : {}
      },
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental"
},
        "value" : {}
      },
          "scope.Transitive" : {
        "type" : {
  "type" : "struct",
  "name" : "Transitive",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Enables all experimental v1 features.\n\nUse with *caution* and only with explicit permission. This may enable\nfeatures may change significantly without notice or not work correctly\nin all contexts.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 254
      },
      "v1test" : {
        "name" : "v1test",
        "structured_annotations": {
          "thrift.NoDeprecated" : {
        "type" : {
  "type" : "struct",
  "name" : "NoDeprecated"
},
        "value" : {}
      },
          "thrift.v1alpha" : {
        "type" : {
  "type" : "struct",
  "name" : "v1alpha"
},
        "value" : {}
      },
          "thrift.Testing" : {
        "type" : {
  "type" : "struct",
  "name" : "Testing"
},
        "value" : {}
      },
          "scope.Transitive" : {
        "type" : {
  "type" : "struct",
  "name" : "Transitive",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Enables experimental features, even those that are known to break common\nuse cases.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 264
      },
      "ExceptionMessage" : {
        "name" : "ExceptionMessage",
        "structured_annotations": {
          "scope.Exception" : {
        "type" : {
  "type" : "struct",
  "name" : "Exception",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Specifies the field where the exception message is stored. The field\nis used to generate an additional method to get it.\n",
        "fields" : {
          "field" : {
            "name" : "field",
            "key" : 1,
            "lineno" : 277,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 275
      },
      "BitmaskEnum" : {
        "name" : "BitmaskEnum",
        "structured_annotations": {
          "scope.FbthriftInternalEnum" : {
        "type" : {
  "type" : "struct",
  "name" : "Enum",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Specifies if the enum is a bitmask.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 284
      },
      "GenerateRuntimeSchema" : {
        "name" : "GenerateRuntimeSchema",
        "structured_annotations": {
          "scope.Structured" : {
        "type" : {
  "type" : "struct",
  "name" : "Structured",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Service" : {
        "type" : {
  "type" : "struct",
  "name" : "Service",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Const" : {
        "type" : {
  "type" : "struct",
  "name" : "Const",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.FbthriftInternalEnum" : {
        "type" : {
  "type" : "struct",
  "name" : "Enum",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental"
},
        "value" : {}
      }
        },
        "docstring" : "Generates a const of type schema. Struct containing the schema of the\nannotated type. Optionally specify name to override default\nschema<structName>.\n",
        "fields" : {
          "name" : {
            "name" : "name",
            "key" : 1,
            "lineno" : 297,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 291
      },
      "InternBox" : {
        "name" : "InternBox",
        "structured_annotations": {
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 305
      }
      },
  "source_path" : "thrift/annotation/thrift",
  "py_namespace" : "thrift.annotation.thrift"
}
