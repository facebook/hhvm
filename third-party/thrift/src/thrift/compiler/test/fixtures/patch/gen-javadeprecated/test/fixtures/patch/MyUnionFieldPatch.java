/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.patch;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class MyUnionFieldPatch implements TBase, java.io.Serializable, Cloneable, Comparable<MyUnionFieldPatch> {
  private static final TStruct STRUCT_DESC = new TStruct("MyUnionFieldPatch");
  private static final TField OPTION1_FIELD_DESC = new TField("option1", TType.STRUCT, (short)1);
  private static final TField OPTION2_FIELD_DESC = new TField("option2", TType.STRUCT, (short)2);
  private static final TField OPTION3_FIELD_DESC = new TField("option3", TType.STRUCT, (short)3);

  public com.facebook.thrift.op.StringPatch option1;
  public com.facebook.thrift.op.I32Patch option2;
  public InnerUnionPatch option3;
  public static final int OPTION1 = 1;
  public static final int OPTION2 = 2;
  public static final int OPTION3 = 3;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(OPTION1, new FieldMetaData("option1", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.facebook.thrift.op.StringPatch.class)));
    tmpMetaDataMap.put(OPTION2, new FieldMetaData("option2", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, com.facebook.thrift.op.I32Patch.class)));
    tmpMetaDataMap.put(OPTION3, new FieldMetaData("option3", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, InnerUnionPatch.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(MyUnionFieldPatch.class, metaDataMap);
  }

  public MyUnionFieldPatch() {
  }

  public MyUnionFieldPatch(
      com.facebook.thrift.op.StringPatch option1,
      com.facebook.thrift.op.I32Patch option2,
      InnerUnionPatch option3) {
    this();
    this.option1 = option1;
    this.option2 = option2;
    this.option3 = option3;
  }

  public static class Builder {
    private com.facebook.thrift.op.StringPatch option1;
    private com.facebook.thrift.op.I32Patch option2;
    private InnerUnionPatch option3;

    public Builder() {
    }

    public Builder setOption1(final com.facebook.thrift.op.StringPatch option1) {
      this.option1 = option1;
      return this;
    }

    public Builder setOption2(final com.facebook.thrift.op.I32Patch option2) {
      this.option2 = option2;
      return this;
    }

    public Builder setOption3(final InnerUnionPatch option3) {
      this.option3 = option3;
      return this;
    }

    public MyUnionFieldPatch build() {
      MyUnionFieldPatch result = new MyUnionFieldPatch();
      result.setOption1(this.option1);
      result.setOption2(this.option2);
      result.setOption3(this.option3);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyUnionFieldPatch(MyUnionFieldPatch other) {
    if (other.isSetOption1()) {
      this.option1 = TBaseHelper.deepCopy(other.option1);
    }
    if (other.isSetOption2()) {
      this.option2 = TBaseHelper.deepCopy(other.option2);
    }
    if (other.isSetOption3()) {
      this.option3 = TBaseHelper.deepCopy(other.option3);
    }
  }

  public MyUnionFieldPatch deepCopy() {
    return new MyUnionFieldPatch(this);
  }

  public com.facebook.thrift.op.StringPatch getOption1() {
    return this.option1;
  }

  public MyUnionFieldPatch setOption1(com.facebook.thrift.op.StringPatch option1) {
    this.option1 = option1;
    return this;
  }

  public void unsetOption1() {
    this.option1 = null;
  }

  // Returns true if field option1 is set (has been assigned a value) and false otherwise
  public boolean isSetOption1() {
    return this.option1 != null;
  }

  public void setOption1IsSet(boolean __value) {
    if (!__value) {
      this.option1 = null;
    }
  }

  public com.facebook.thrift.op.I32Patch getOption2() {
    return this.option2;
  }

  public MyUnionFieldPatch setOption2(com.facebook.thrift.op.I32Patch option2) {
    this.option2 = option2;
    return this;
  }

  public void unsetOption2() {
    this.option2 = null;
  }

  // Returns true if field option2 is set (has been assigned a value) and false otherwise
  public boolean isSetOption2() {
    return this.option2 != null;
  }

  public void setOption2IsSet(boolean __value) {
    if (!__value) {
      this.option2 = null;
    }
  }

  public InnerUnionPatch getOption3() {
    return this.option3;
  }

  public MyUnionFieldPatch setOption3(InnerUnionPatch option3) {
    this.option3 = option3;
    return this;
  }

  public void unsetOption3() {
    this.option3 = null;
  }

  // Returns true if field option3 is set (has been assigned a value) and false otherwise
  public boolean isSetOption3() {
    return this.option3 != null;
  }

  public void setOption3IsSet(boolean __value) {
    if (!__value) {
      this.option3 = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case OPTION1:
      if (__value == null) {
        unsetOption1();
      } else {
        setOption1((com.facebook.thrift.op.StringPatch)__value);
      }
      break;

    case OPTION2:
      if (__value == null) {
        unsetOption2();
      } else {
        setOption2((com.facebook.thrift.op.I32Patch)__value);
      }
      break;

    case OPTION3:
      if (__value == null) {
        unsetOption3();
      } else {
        setOption3((InnerUnionPatch)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case OPTION1:
      return getOption1();

    case OPTION2:
      return getOption2();

    case OPTION3:
      return getOption3();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof MyUnionFieldPatch))
      return false;
    MyUnionFieldPatch that = (MyUnionFieldPatch)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetOption1(), that.isSetOption1(), this.option1, that.option1)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOption2(), that.isSetOption2(), this.option2, that.option2)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOption3(), that.isSetOption3(), this.option3, that.option3)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {option1, option2, option3});
  }

  @Override
  public int compareTo(MyUnionFieldPatch other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOption1()).compareTo(other.isSetOption1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(option1, other.option1);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetOption2()).compareTo(other.isSetOption2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(option2, other.option2);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetOption3()).compareTo(other.isSetOption3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(option3, other.option3);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case OPTION1:
          if (__field.type == TType.STRUCT) {
            this.option1 = new com.facebook.thrift.op.StringPatch();
            this.option1.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTION2:
          if (__field.type == TType.STRUCT) {
            this.option2 = new com.facebook.thrift.op.I32Patch();
            this.option2.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTION3:
          if (__field.type == TType.STRUCT) {
            this.option3 = new InnerUnionPatch();
            this.option3.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.option1 != null) {
      oprot.writeFieldBegin(OPTION1_FIELD_DESC);
      this.option1.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.option2 != null) {
      oprot.writeFieldBegin(OPTION2_FIELD_DESC);
      this.option2.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.option3 != null) {
      oprot.writeFieldBegin(OPTION3_FIELD_DESC);
      this.option3.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("MyUnionFieldPatch");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("option1");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getOption1() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getOption1(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("option2");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getOption2() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getOption2(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("option3");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getOption3() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getOption3(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

