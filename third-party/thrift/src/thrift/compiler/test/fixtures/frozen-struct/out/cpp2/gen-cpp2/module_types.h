/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/frozen-struct/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>
#include "thrift/compiler/test/fixtures/frozen-struct/gen-cpp2/include1_types.h"
#include "thrift/compiler/test/fixtures/frozen-struct/gen-cpp2/include2_types.h"

namespace apache::thrift {
namespace ident {
struct i32Field;
struct strField;
struct listField;
struct mapField;
struct inclAField;
struct inclBField;
struct i32Field;
struct inclEnumB;
struct field;
struct shared_field;
struct shared_const_field;
struct opt_shared_field;
struct opt_shared_const_field;
struct boxed_field;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_i32Field
#define APACHE_THRIFT_ACCESSOR_i32Field
APACHE_THRIFT_DEFINE_ACCESSOR(i32Field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_strField
#define APACHE_THRIFT_ACCESSOR_strField
APACHE_THRIFT_DEFINE_ACCESSOR(strField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listField
#define APACHE_THRIFT_ACCESSOR_listField
APACHE_THRIFT_DEFINE_ACCESSOR(listField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapField
#define APACHE_THRIFT_ACCESSOR_mapField
APACHE_THRIFT_DEFINE_ACCESSOR(mapField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_inclAField
#define APACHE_THRIFT_ACCESSOR_inclAField
APACHE_THRIFT_DEFINE_ACCESSOR(inclAField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_inclBField
#define APACHE_THRIFT_ACCESSOR_inclBField
APACHE_THRIFT_DEFINE_ACCESSOR(inclBField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i32Field
#define APACHE_THRIFT_ACCESSOR_i32Field
APACHE_THRIFT_DEFINE_ACCESSOR(i32Field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_inclEnumB
#define APACHE_THRIFT_ACCESSOR_inclEnumB
APACHE_THRIFT_DEFINE_ACCESSOR(inclEnumB);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_shared_field
#define APACHE_THRIFT_ACCESSOR_shared_field
APACHE_THRIFT_DEFINE_ACCESSOR(shared_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_shared_const_field
#define APACHE_THRIFT_ACCESSOR_shared_const_field
APACHE_THRIFT_DEFINE_ACCESSOR(shared_const_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_shared_field
#define APACHE_THRIFT_ACCESSOR_opt_shared_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_shared_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_shared_const_field
#define APACHE_THRIFT_ACCESSOR_opt_shared_const_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_shared_const_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_boxed_field
#define APACHE_THRIFT_ACCESSOR_boxed_field
APACHE_THRIFT_DEFINE_ACCESSOR(boxed_field);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
namespace some::ns {

/** Glean {"file": "thrift/compiler/test/fixtures/frozen-struct/src/module.thrift", "name": "EnumB", "kind": "enum" } */
enum class EnumB {
  EMPTY = 1,
};

} // namespace some::ns

template<> struct std::hash<::some::ns::EnumB> :
  ::apache::thrift::detail::enum_hash<::some::ns::EnumB> {};

namespace apache::thrift {

template <> struct TEnumTraits<::some::ns::EnumB> {
  using type = ::some::ns::EnumB;

  static constexpr std::size_t const size = 1;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "EnumB";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::EMPTY; }
  static constexpr type max() { return type::EMPTY; }
};

} // namespace apache::thrift
// END declare_enums
// BEGIN forward_declare
namespace some::ns {
class ModuleA;
class ModuleB;
namespace detail {
class DirectlyAdapted;
} // namespace detail
class CppRef;
} // namespace some::ns
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
template<>
struct is_cpp_ref_field_optional<::some::ns::CppRef,::apache::thrift::type::field_id<3>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::some::ns::CppRef,::apache::thrift::type::field_id<4>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::some::ns::CppRef,::apache::thrift::type::field_id<5>> : std::true_type{};
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace some::ns {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "thrift/compiler/test/fixtures/frozen-struct/src/module.thrift", "name": "ModuleA", "kind": "struct" } */
class ModuleA final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 6;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::i32Field,
    ::apache::thrift::ident::strField,
    ::apache::thrift::ident::listField,
    ::apache::thrift::ident::mapField,
    ::apache::thrift::ident::inclAField,
    ::apache::thrift::ident::inclBField
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::struct_t<::some::ns::IncludedA>,
    ::apache::thrift::type::struct_t<::some::ns::IncludedB>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ModuleA;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ModuleA();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ModuleA(apache::thrift::FragileConstructor, ::std::int32_t i32Field__arg, ::std::string strField__arg, ::std::vector<::std::int16_t> listField__arg, ::std::map<::std::string, ::std::int32_t> mapField__arg, ::some::ns::IncludedA inclAField__arg, ::some::ns::IncludedB inclBField__arg);

  ModuleA(ModuleA&&) noexcept;

  ModuleA(const ModuleA& src);


  ModuleA& operator=(ModuleA&&) noexcept;
  ModuleA& operator=(const ModuleA& src);

  ~ModuleA();

 private:
  ::std::int32_t __fbthrift_field_i32Field;
 private:
  ::std::string __fbthrift_field_strField;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_listField;
 private:
  ::std::map<::std::string, ::std::int32_t> __fbthrift_field_mapField;
 private:
  ::some::ns::IncludedA __fbthrift_field_inclAField;
 private:
  ::some::ns::IncludedB __fbthrift_field_inclBField;
 private:
  apache::thrift::detail::isset_bitset<6, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ModuleA&) const;
  bool operator<(const ModuleA&) const;

  /** Glean { "field": "i32Field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> i32Field_ref() const& {
    return {this->__fbthrift_field_i32Field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "i32Field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> i32Field_ref() & {
    return {this->__fbthrift_field_i32Field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "i32Field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> i32Field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_i32Field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "i32Field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> i32Field() const& {
    return {this->__fbthrift_field_i32Field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "i32Field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> i32Field() & {
    return {this->__fbthrift_field_i32Field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "i32Field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> i32Field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_i32Field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "strField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> strField_ref() const& {
    return {this->__fbthrift_field_strField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "strField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> strField_ref() & {
    return {this->__fbthrift_field_strField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "strField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> strField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_strField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "strField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> strField() const& {
    return {this->__fbthrift_field_strField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "strField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> strField() & {
    return {this->__fbthrift_field_strField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "strField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> strField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_strField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "listField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> listField_ref() const& {
    return {this->__fbthrift_field_listField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "listField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> listField_ref() & {
    return {this->__fbthrift_field_listField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "listField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> listField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_listField), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "listField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> listField() const& {
    return {this->__fbthrift_field_listField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "listField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> listField() & {
    return {this->__fbthrift_field_listField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "listField" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> listField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_listField), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "mapField" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapField_ref() const& {
    return {this->__fbthrift_field_mapField, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "mapField" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapField_ref() & {
    return {this->__fbthrift_field_mapField, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "mapField" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapField), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "mapField" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> mapField() const& {
    return {this->__fbthrift_field_mapField, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "mapField" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> mapField() & {
    return {this->__fbthrift_field_mapField, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "mapField" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> mapField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_mapField), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "inclAField" } */
  template <typename..., typename fbthrift_T = ::some::ns::IncludedA>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inclAField_ref() const& {
    return {this->__fbthrift_field_inclAField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "inclAField" } */
  template <typename..., typename fbthrift_T = ::some::ns::IncludedA>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inclAField_ref() & {
    return {this->__fbthrift_field_inclAField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "inclAField" } */
  template <typename..., typename fbthrift_T = ::some::ns::IncludedA>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inclAField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inclAField), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "inclAField" } */
  template <typename..., typename fbthrift_T = ::some::ns::IncludedA>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inclAField() const& {
    return {this->__fbthrift_field_inclAField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "inclAField" } */
  template <typename..., typename fbthrift_T = ::some::ns::IncludedA>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inclAField() & {
    return {this->__fbthrift_field_inclAField, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "inclAField" } */
  template <typename..., typename fbthrift_T = ::some::ns::IncludedA>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inclAField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inclAField), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "inclBField" } */
  template <typename..., typename fbthrift_T = ::some::ns::IncludedB>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inclBField_ref() const& {
    return {this->__fbthrift_field_inclBField, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "inclBField" } */
  template <typename..., typename fbthrift_T = ::some::ns::IncludedB>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inclBField_ref() & {
    return {this->__fbthrift_field_inclBField, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "inclBField" } */
  template <typename..., typename fbthrift_T = ::some::ns::IncludedB>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inclBField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inclBField), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "inclBField" } */
  template <typename..., typename fbthrift_T = ::some::ns::IncludedB>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inclBField() const& {
    return {this->__fbthrift_field_inclBField, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "inclBField" } */
  template <typename..., typename fbthrift_T = ::some::ns::IncludedB>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inclBField() & {
    return {this->__fbthrift_field_inclBField, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "inclBField" } */
  template <typename..., typename fbthrift_T = ::some::ns::IncludedB>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inclBField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inclBField), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "i32Field" } */
  [[deprecated("Use `FOO.i32Field().value()` instead of `FOO.get_i32Field()`")]]
  ::std::int32_t get_i32Field() const;

  /** Glean { "field": "i32Field" } */
  [[deprecated("Use `FOO.i32Field() = BAR` instead of `FOO.set_i32Field(BAR)`")]]
  ::std::int32_t& set_i32Field(::std::int32_t i32Field_);

  /** Glean { "field": "strField" } */
  [[deprecated("Use `FOO.strField().value()` instead of `FOO.get_strField()`")]]
  const ::std::string& get_strField() const& {
    return __fbthrift_field_strField;
  }

  /** Glean { "field": "strField" } */
  [[deprecated("Use `FOO.strField().value()` instead of `FOO.get_strField()`")]]
  ::std::string get_strField() && {
    return static_cast<::std::string&&>(__fbthrift_field_strField);
  }

  /** Glean { "field": "strField" } */
  template <typename T_ModuleA_strField_struct_setter = ::std::string>
  [[deprecated("Use `FOO.strField() = BAR` instead of `FOO.set_strField(BAR)`")]]
  ::std::string& set_strField(T_ModuleA_strField_struct_setter&& strField_) {
    strField_ref() = std::forward<T_ModuleA_strField_struct_setter>(strField_);
    return __fbthrift_field_strField;
  }

  /** Glean { "field": "listField" } */
  [[deprecated("Use `FOO.listField().value()` instead of `FOO.get_listField()`")]]
  const ::std::vector<::std::int16_t>& get_listField() const&;

  /** Glean { "field": "listField" } */
  [[deprecated("Use `FOO.listField().value()` instead of `FOO.get_listField()`")]]
  ::std::vector<::std::int16_t> get_listField() &&;

  /** Glean { "field": "listField" } */
  template <typename T_ModuleA_listField_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.listField() = BAR` instead of `FOO.set_listField(BAR)`")]]
  ::std::vector<::std::int16_t>& set_listField(T_ModuleA_listField_struct_setter&& listField_) {
    listField_ref() = std::forward<T_ModuleA_listField_struct_setter>(listField_);
    return __fbthrift_field_listField;
  }

  /** Glean { "field": "mapField" } */
  [[deprecated("Use `FOO.mapField().value()` instead of `FOO.get_mapField()`")]]
  const ::std::map<::std::string, ::std::int32_t>& get_mapField() const&;

  /** Glean { "field": "mapField" } */
  [[deprecated("Use `FOO.mapField().value()` instead of `FOO.get_mapField()`")]]
  ::std::map<::std::string, ::std::int32_t> get_mapField() &&;

  /** Glean { "field": "mapField" } */
  template <typename T_ModuleA_mapField_struct_setter = ::std::map<::std::string, ::std::int32_t>>
  [[deprecated("Use `FOO.mapField() = BAR` instead of `FOO.set_mapField(BAR)`")]]
  ::std::map<::std::string, ::std::int32_t>& set_mapField(T_ModuleA_mapField_struct_setter&& mapField_) {
    mapField_ref() = std::forward<T_ModuleA_mapField_struct_setter>(mapField_);
    return __fbthrift_field_mapField;
  }

  /** Glean { "field": "inclAField" } */
  [[deprecated("Use `FOO.inclAField().value()` instead of `FOO.get_inclAField()`")]]
  const ::some::ns::IncludedA& get_inclAField() const&;

  /** Glean { "field": "inclAField" } */
  [[deprecated("Use `FOO.inclAField().value()` instead of `FOO.get_inclAField()`")]]
  ::some::ns::IncludedA get_inclAField() &&;

  /** Glean { "field": "inclAField" } */
  template <typename T_ModuleA_inclAField_struct_setter = ::some::ns::IncludedA>
  [[deprecated("Use `FOO.inclAField() = BAR` instead of `FOO.set_inclAField(BAR)`")]]
  ::some::ns::IncludedA& set_inclAField(T_ModuleA_inclAField_struct_setter&& inclAField_) {
    inclAField_ref() = std::forward<T_ModuleA_inclAField_struct_setter>(inclAField_);
    return __fbthrift_field_inclAField;
  }

  /** Glean { "field": "inclBField" } */
  [[deprecated("Use `FOO.inclBField().value()` instead of `FOO.get_inclBField()`")]]
  const ::some::ns::IncludedB& get_inclBField() const&;

  /** Glean { "field": "inclBField" } */
  [[deprecated("Use `FOO.inclBField().value()` instead of `FOO.get_inclBField()`")]]
  ::some::ns::IncludedB get_inclBField() &&;

  /** Glean { "field": "inclBField" } */
  template <typename T_ModuleA_inclBField_struct_setter = ::some::ns::IncludedB>
  [[deprecated("Use `FOO.inclBField() = BAR` instead of `FOO.set_inclBField(BAR)`")]]
  ::some::ns::IncludedB& set_inclBField(T_ModuleA_inclBField_struct_setter&& inclBField_) {
    inclBField_ref() = std::forward<T_ModuleA_inclBField_struct_setter>(inclBField_);
    return __fbthrift_field_inclBField;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ModuleA>;
  friend void swap(ModuleA& a, ModuleA& b);
};

template <class Protocol_>
unsigned long ModuleA::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/frozen-struct/src/module.thrift", "name": "ModuleB", "kind": "struct" } */
class ModuleB final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::i32Field,
    ::apache::thrift::ident::inclEnumB
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::enum_t<::some::ns::EnumB>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ModuleB;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ModuleB() :
      __fbthrift_field_i32Field(),
      __fbthrift_field_inclEnumB() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ModuleB(apache::thrift::FragileConstructor, ::std::int32_t i32Field__arg, ::some::ns::EnumB inclEnumB__arg);

  ModuleB(ModuleB&&) = default;

  ModuleB(const ModuleB&) = default;


  ModuleB& operator=(ModuleB&&) = default;

  ModuleB& operator=(const ModuleB&) = default;
 private:
  ::std::int32_t __fbthrift_field_i32Field;
 private:
  ::some::ns::EnumB __fbthrift_field_inclEnumB;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ModuleB&) const;
  bool operator<(const ModuleB&) const;

  /** Glean { "field": "i32Field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> i32Field_ref() const& {
    return {this->__fbthrift_field_i32Field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "i32Field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> i32Field_ref() & {
    return {this->__fbthrift_field_i32Field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "i32Field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> i32Field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_i32Field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "i32Field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> i32Field() const& {
    return {this->__fbthrift_field_i32Field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "i32Field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> i32Field() & {
    return {this->__fbthrift_field_i32Field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "i32Field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> i32Field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_i32Field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "inclEnumB" } */
  template <typename..., typename fbthrift_T = ::some::ns::EnumB>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inclEnumB_ref() const& {
    return {this->__fbthrift_field_inclEnumB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "inclEnumB" } */
  template <typename..., typename fbthrift_T = ::some::ns::EnumB>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inclEnumB_ref() & {
    return {this->__fbthrift_field_inclEnumB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "inclEnumB" } */
  template <typename..., typename fbthrift_T = ::some::ns::EnumB>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inclEnumB_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inclEnumB), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "inclEnumB" } */
  template <typename..., typename fbthrift_T = ::some::ns::EnumB>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> inclEnumB() const& {
    return {this->__fbthrift_field_inclEnumB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "inclEnumB" } */
  template <typename..., typename fbthrift_T = ::some::ns::EnumB>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> inclEnumB() & {
    return {this->__fbthrift_field_inclEnumB, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "inclEnumB" } */
  template <typename..., typename fbthrift_T = ::some::ns::EnumB>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> inclEnumB() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_inclEnumB), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "i32Field" } */
  [[deprecated("Use `FOO.i32Field().value()` instead of `FOO.get_i32Field()`")]]
  ::std::int32_t get_i32Field() const;

  /** Glean { "field": "i32Field" } */
  [[deprecated("Use `FOO.i32Field() = BAR` instead of `FOO.set_i32Field(BAR)`")]]
  ::std::int32_t& set_i32Field(::std::int32_t i32Field_);

  /** Glean { "field": "inclEnumB" } */
  [[deprecated("Use `FOO.inclEnumB().value()` instead of `FOO.get_inclEnumB()`")]]
  ::some::ns::EnumB get_inclEnumB() const;

  /** Glean { "field": "inclEnumB" } */
  [[deprecated("Use `FOO.inclEnumB() = BAR` instead of `FOO.set_inclEnumB(BAR)`")]]
  ::some::ns::EnumB& set_inclEnumB(::some::ns::EnumB inclEnumB_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ModuleB>;
  friend void swap(ModuleB& a, ModuleB& b);
};

template <class Protocol_>
unsigned long ModuleB::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


namespace detail {
/** Glean {"file": "thrift/compiler/test/fixtures/frozen-struct/src/module.thrift", "name": "DirectlyAdapted", "kind": "struct" } */
class DirectlyAdapted final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DirectlyAdapted;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  DirectlyAdapted() :
      __fbthrift_field_field() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DirectlyAdapted(apache::thrift::FragileConstructor, ::std::int32_t field__arg);

  DirectlyAdapted(DirectlyAdapted&&) = default;

  DirectlyAdapted(const DirectlyAdapted&) = default;


  DirectlyAdapted& operator=(DirectlyAdapted&&) = default;

  DirectlyAdapted& operator=(const DirectlyAdapted&) = default;
 private:
  ::std::int32_t __fbthrift_field_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const DirectlyAdapted&) const;
  bool operator<(const DirectlyAdapted&) const;

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  ::std::int32_t get_field() const;

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field() = BAR` instead of `FOO.set_field(BAR)`")]]
  ::std::int32_t& set_field(::std::int32_t field_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DirectlyAdapted>;
  friend void swap(DirectlyAdapted& a, DirectlyAdapted& b);
};

template <class Protocol_>
unsigned long DirectlyAdapted::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}
} // namespace detail

using DirectlyAdapted = ::apache::thrift::adapt_detail::adapted_t<::my::Adapter, ::some::ns::detail::DirectlyAdapted>;


/** Glean {"file": "thrift/compiler/test/fixtures/frozen-struct/src/module.thrift", "name": "CppRef", "kind": "struct" } */
class CppRef final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 5;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::shared_field,
    ::apache::thrift::ident::shared_const_field,
    ::apache::thrift::ident::opt_shared_field,
    ::apache::thrift::ident::opt_shared_const_field,
    ::apache::thrift::ident::boxed_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = CppRef;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  CppRef();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CppRef(apache::thrift::FragileConstructor, ::std::shared_ptr<::std::int32_t> shared_field__arg, ::std::shared_ptr<const ::std::int32_t> shared_const_field__arg, ::std::shared_ptr<::std::int32_t> opt_shared_field__arg, ::std::shared_ptr<const ::std::int32_t> opt_shared_const_field__arg, ::apache::thrift::detail::boxed_value_ptr<::std::int32_t> boxed_field__arg);

  CppRef(CppRef&&) noexcept;

  CppRef(const CppRef& src);


  CppRef& operator=(CppRef&&) noexcept;
  CppRef& operator=(const CppRef& src);

  ~CppRef();

 private:
  ::std::shared_ptr<::std::int32_t> __fbthrift_field_shared_field;
 private:
  ::std::shared_ptr<const ::std::int32_t> __fbthrift_field_shared_const_field;
 private:
  ::std::shared_ptr<::std::int32_t> __fbthrift_field_opt_shared_field;
 private:
  ::std::shared_ptr<const ::std::int32_t> __fbthrift_field_opt_shared_const_field;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::int32_t> __fbthrift_field_boxed_field;

 public:

  bool operator==(const CppRef&) const;
  bool operator<(const CppRef&) const;
  /** Glean { "field": "shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE fbthrift_T& shared_field_ref() & {
    return __fbthrift_field_shared_field;
  }

  /** Glean { "field": "shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE const fbthrift_T& shared_field_ref() const& {
    return __fbthrift_field_shared_field;
  }

  /** Glean { "field": "shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE fbthrift_T&& shared_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_shared_field);
  }

  /** Glean { "field": "shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE const fbthrift_T&& shared_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_shared_field);
  }

  /** Glean { "field": "shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE fbthrift_T& shared_field() & {
    return __fbthrift_field_shared_field;
  }

  /** Glean { "field": "shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE const fbthrift_T& shared_field() const& {
    return __fbthrift_field_shared_field;
  }

  /** Glean { "field": "shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE fbthrift_T&& shared_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_shared_field);
  }

  /** Glean { "field": "shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE const fbthrift_T&& shared_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_shared_field);
  }
  /** Glean { "field": "shared_const_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::int32_t>>
  FOLLY_ERASE fbthrift_T& shared_const_field_ref() & {
    return __fbthrift_field_shared_const_field;
  }

  /** Glean { "field": "shared_const_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::int32_t>>
  FOLLY_ERASE const fbthrift_T& shared_const_field_ref() const& {
    return __fbthrift_field_shared_const_field;
  }

  /** Glean { "field": "shared_const_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::int32_t>>
  FOLLY_ERASE fbthrift_T&& shared_const_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_shared_const_field);
  }

  /** Glean { "field": "shared_const_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::int32_t>>
  FOLLY_ERASE const fbthrift_T&& shared_const_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_shared_const_field);
  }

  /** Glean { "field": "shared_const_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::int32_t>>
  FOLLY_ERASE fbthrift_T& shared_const_field() & {
    return __fbthrift_field_shared_const_field;
  }

  /** Glean { "field": "shared_const_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::int32_t>>
  FOLLY_ERASE const fbthrift_T& shared_const_field() const& {
    return __fbthrift_field_shared_const_field;
  }

  /** Glean { "field": "shared_const_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::int32_t>>
  FOLLY_ERASE fbthrift_T&& shared_const_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_shared_const_field);
  }

  /** Glean { "field": "shared_const_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::int32_t>>
  FOLLY_ERASE const fbthrift_T&& shared_const_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_shared_const_field);
  }
  /** Glean { "field": "opt_shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE fbthrift_T& opt_shared_field_ref() & {
    return __fbthrift_field_opt_shared_field;
  }

  /** Glean { "field": "opt_shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE const fbthrift_T& opt_shared_field_ref() const& {
    return __fbthrift_field_opt_shared_field;
  }

  /** Glean { "field": "opt_shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE fbthrift_T&& opt_shared_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_shared_field);
  }

  /** Glean { "field": "opt_shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE const fbthrift_T&& opt_shared_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_shared_field);
  }

  /** Glean { "field": "opt_shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE fbthrift_T& opt_shared_field() & {
    return __fbthrift_field_opt_shared_field;
  }

  /** Glean { "field": "opt_shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE const fbthrift_T& opt_shared_field() const& {
    return __fbthrift_field_opt_shared_field;
  }

  /** Glean { "field": "opt_shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE fbthrift_T&& opt_shared_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_shared_field);
  }

  /** Glean { "field": "opt_shared_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::int32_t>>
  FOLLY_ERASE const fbthrift_T&& opt_shared_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_shared_field);
  }
  /** Glean { "field": "opt_shared_const_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::int32_t>>
  FOLLY_ERASE fbthrift_T& opt_shared_const_field_ref() & {
    return __fbthrift_field_opt_shared_const_field;
  }

  /** Glean { "field": "opt_shared_const_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::int32_t>>
  FOLLY_ERASE const fbthrift_T& opt_shared_const_field_ref() const& {
    return __fbthrift_field_opt_shared_const_field;
  }

  /** Glean { "field": "opt_shared_const_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::int32_t>>
  FOLLY_ERASE fbthrift_T&& opt_shared_const_field_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_shared_const_field);
  }

  /** Glean { "field": "opt_shared_const_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::int32_t>>
  FOLLY_ERASE const fbthrift_T&& opt_shared_const_field_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_shared_const_field);
  }

  /** Glean { "field": "opt_shared_const_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::int32_t>>
  FOLLY_ERASE fbthrift_T& opt_shared_const_field() & {
    return __fbthrift_field_opt_shared_const_field;
  }

  /** Glean { "field": "opt_shared_const_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::int32_t>>
  FOLLY_ERASE const fbthrift_T& opt_shared_const_field() const& {
    return __fbthrift_field_opt_shared_const_field;
  }

  /** Glean { "field": "opt_shared_const_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::int32_t>>
  FOLLY_ERASE fbthrift_T&& opt_shared_const_field() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_opt_shared_const_field);
  }

  /** Glean { "field": "opt_shared_const_field" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::int32_t>>
  FOLLY_ERASE const fbthrift_T&& opt_shared_const_field() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_opt_shared_const_field);
  }

  /** Glean { "field": "boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> boxed_field_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_boxed_field};
  }

  /** Glean { "field": "boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> boxed_field_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_boxed_field};
  }

  /** Glean { "field": "boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> boxed_field_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_boxed_field)};
  }

  /** Glean { "field": "boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> boxed_field() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_boxed_field};
  }

  /** Glean { "field": "boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> boxed_field() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_boxed_field};
  }

  /** Glean { "field": "boxed_field" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> boxed_field() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_boxed_field)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CppRef>;
  friend void swap(CppRef& a, CppRef& b);
};

template <class Protocol_>
unsigned long CppRef::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace some::ns

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::some::ns::ModuleA, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 5609679411807694836;
  static constexpr ::std::string_view definitionKey = {"\xf1\x1f\x2f\xea\x5e\x01\x63\x67\x15\x7a\xa4\x2a\xa5\xb1\x96\xc0", 16};
};
template <> struct TSchemaAssociation<::some::ns::ModuleB, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 5609679411807694836;
  static constexpr ::std::string_view definitionKey = {"\xa2\xb6\x58\x4e\x00\x0a\x62\xa6\xd5\xe5\xc3\x1b\xdb\xc5\x81\x8a", 16};
};
template <> struct TSchemaAssociation<::some::ns::detail::DirectlyAdapted, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 5609679411807694836;
  static constexpr ::std::string_view definitionKey = {"\x94\x77\xc1\xa8\x6d\xc9\x4c\x4c\x0f\xdd\xa3\x7b\xfb\x75\x87\x50", 16};
};
template <> struct TSchemaAssociation<::some::ns::CppRef, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 5609679411807694836;
  static constexpr ::std::string_view definitionKey = {"\xe8\x74\x50\xef\xb1\xf8\xda\xe8\xa7\xa4\xbc\x98\x15\xa1\x87\xe9", 16};
};
template <> struct TSchemaAssociation<::some::ns::EnumB, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 5609679411807694836;
  static constexpr ::std::string_view definitionKey = {"\x94\xc4\x67\xd5\xf0\xa3\x64\xac\xee\x74\x9b\x9b\xef\x25\xed\xa3", 16};
};
} // namespace apache::thrift::detail
