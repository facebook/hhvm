/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/interactions/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#include "thrift/compiler/test/fixtures/interactions/gen-cpp2/BoxService.h"
#include "thrift/compiler/test/fixtures/interactions/gen-cpp2/BoxService.tcc"
#include "thrift/compiler/test/fixtures/interactions/gen-cpp2/module_metadata.h"
#include <thrift/lib/cpp2/gen/service_cpp.h>

std::unique_ptr<apache::thrift::AsyncProcessor> apache::thrift::ServiceHandler<::cpp2::BoxService>::getProcessor() {
  return std::make_unique<::cpp2::BoxServiceAsyncProcessor>(this);
}

apache::thrift::ServiceHandler<::cpp2::BoxService>::CreateMethodMetadataResult apache::thrift::ServiceHandler<::cpp2::BoxService>::createMethodMetadata() {
  return ::apache::thrift::detail::ap::createMethodMetadataMap<::cpp2::BoxServiceAsyncProcessor>(getServiceRequestInfoMap().value().get());
}


std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> apache::thrift::ServiceHandler<::cpp2::BoxService>::getServiceRequestInfoMap() const {
  return __fbthrift_serviceInfoHolder.requestInfoMap();
}

::cpp2::BoxServiceServiceInfoHolder apache::thrift::ServiceHandler<::cpp2::BoxService>::__fbthrift_serviceInfoHolder;

//
// Service Methods
//

//
// Method 'getABoxSession'
//

apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf, std::unique_ptr<::cpp2::ShouldBeBoxed>> apache::thrift::ServiceHandler<::cpp2::BoxService>::getABoxSession(std::unique_ptr<::cpp2::ShouldBeBoxed> /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getABoxSession");
}

apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf, std::unique_ptr<::cpp2::ShouldBeBoxed>> apache::thrift::ServiceHandler<::cpp2::BoxService>::sync_getABoxSession(std::unique_ptr<::cpp2::ShouldBeBoxed> p_req) {
  return getABoxSession(std::move(p_req));
}

folly::SemiFuture<apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf, std::unique_ptr<::cpp2::ShouldBeBoxed>>>
apache::thrift::ServiceHandler<::cpp2::BoxService>::semifuture_getABoxSession(std::unique_ptr<::cpp2::ShouldBeBoxed> p_req) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_getABoxSession.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  return sync_getABoxSession(std::move(p_req));
}

folly::Future<apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf, std::unique_ptr<::cpp2::ShouldBeBoxed>>>
apache::thrift::ServiceHandler<::cpp2::BoxService>::future_getABoxSession(std::unique_ptr<::cpp2::ShouldBeBoxed> p_req) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_getABoxSession.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  return apache::thrift::detail::si::future(
      semifuture_getABoxSession(std::move(p_req)),
      getInternalKeepAlive());
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf, std::unique_ptr<::cpp2::ShouldBeBoxed>>>
apache::thrift::ServiceHandler<::cpp2::BoxService>::co_getABoxSession(std::unique_ptr<::cpp2::ShouldBeBoxed> p_req) {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_getABoxSession.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Future,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<std::unique_ptr<::cpp2::ShouldBeBoxed> /*req*/>(std::move(p_req)));
}

folly::coro::Task<apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf, std::unique_ptr<::cpp2::ShouldBeBoxed>>> apache::thrift::ServiceHandler<::cpp2::BoxService>::co_getABoxSession(
    apache::thrift::RequestParams /* params */, std::unique_ptr<::cpp2::ShouldBeBoxed> p_req) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_getABoxSession.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_getABoxSession(std::move(p_req));
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::cpp2::BoxService>::async_tm_getABoxSession(
    apache::thrift::HandlerCallbackPtr<apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf, std::unique_ptr<::cpp2::ShouldBeBoxed>>> callback, std::unique_ptr<::cpp2::ShouldBeBoxed> p_req) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_getABoxSession.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_getABoxSession.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_getABoxSession(params, std::move(p_req));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_getABoxSession.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::Future,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::Future: {
        auto fut = future_getABoxSession(std::move(p_req));
        apache::thrift::detail::si::async_tm_future(
            std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_getABoxSession(std::move(p_req));
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_getABoxSession(params, std::move(p_req));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_getABoxSession(std::move(p_req));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        callback->result(sync_getABoxSession(std::move(p_req)));
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie(p_req) = std::move(ex).restoreArgs<std::unique_ptr<::cpp2::ShouldBeBoxed> /*req*/>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'getABoxSession'
//

//
// End of Service Methods
//

//
// Service Methods
//

//
// Method 'getABox'
//

void apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf::getABox(::cpp2::ShouldBeBoxed& /*_return*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getABox");
}

void apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf::sync_getABox(::cpp2::ShouldBeBoxed& _return) {
  return getABox(_return);
}

folly::SemiFuture<std::unique_ptr<::cpp2::ShouldBeBoxed>>
apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf::semifuture_getABox() {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_getABox.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  auto ret = std::make_unique<::cpp2::ShouldBeBoxed>();
  sync_getABox(*ret);
  return folly::makeSemiFuture(std::move(ret));
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<std::unique_ptr<::cpp2::ShouldBeBoxed>>
apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf::co_getABox() {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_getABox.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<>());
}

folly::coro::Task<std::unique_ptr<::cpp2::ShouldBeBoxed>> apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf::co_getABox(
    apache::thrift::RequestParams /* params */) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_getABox.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_getABox();
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf::async_tm_getABox(
    apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2::ShouldBeBoxed>> callback) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_getABox.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_getABox.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_getABox(params);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_getABox.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::SemiFuture,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_getABox();
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_getABox(params);
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_getABox();
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        ::cpp2::ShouldBeBoxed _return;
        sync_getABox(_return);
        callback->result(std::move(_return));
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie() = std::move(ex).restoreArgs<>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'getABox'
//

//
// End of Service Methods
//

namespace cpp2 {


std::string_view BoxServiceAsyncProcessor::getServiceName() {
  return "BoxService";
}

void BoxServiceAsyncProcessor::getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  ::apache::thrift::detail::md::ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::BoxService>>::gen(response);
}

void BoxServiceAsyncProcessor::processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, iface_, std::move(req), std::move(serializedRequest), methodMetadata, protType, context, eb, tm);
}

void BoxServiceAsyncProcessor::executeRequest(apache::thrift::ServerRequest&& request, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) {
  apache::thrift::detail::ap::execute(this, std::move(request), apache::thrift::detail::ServerRequestHelper::protocol(request), methodMetadata);
}

const BoxServiceAsyncProcessor::ProcessMap& BoxServiceAsyncProcessor::getOwnProcessMap() {
  return kOwnProcessMap_;
}

const BoxServiceAsyncProcessor::ProcessMap BoxServiceAsyncProcessor::kOwnProcessMap_ {
  {"getABoxSession",
    {&BoxServiceAsyncProcessor::setUpAndProcess_getABoxSession<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &BoxServiceAsyncProcessor::setUpAndProcess_getABoxSession<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &BoxServiceAsyncProcessor::executeRequest_getABoxSession<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &BoxServiceAsyncProcessor::executeRequest_getABoxSession<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
  {"BoxedInteraction.getABox",
    {&BoxServiceAsyncProcessor::setUpAndProcess_BoxedInteraction_getABox<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &BoxServiceAsyncProcessor::setUpAndProcess_BoxedInteraction_getABox<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &BoxServiceAsyncProcessor::executeRequest_BoxedInteraction_getABox<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &BoxServiceAsyncProcessor::executeRequest_BoxedInteraction_getABox<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
};

apache::thrift::ServiceRequestInfoMap const& BoxServiceServiceInfoHolder::requestInfoMap() const {
  static folly::Indestructible<apache::thrift::ServiceRequestInfoMap> requestInfoMap{staticRequestInfoMap()};
  return *requestInfoMap;
}

apache::thrift::ServiceRequestInfoMap BoxServiceServiceInfoHolder::staticRequestInfoMap() {
  apache::thrift::ServiceRequestInfoMap requestInfoMap = {
  {"getABoxSession",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
     "BoxService.getABoxSession",
     std::nullopt,
     apache::thrift::concurrency::NORMAL,
     "BoxedInteraction"}},
  {"BoxedInteraction.getABox",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
     "BoxService.BoxedInteraction.getABox",
     "BoxedInteraction",
     apache::thrift::concurrency::NORMAL,
     std::nullopt}},
  };

  return requestInfoMap;
}
const BoxServiceAsyncProcessor::InteractionConstructorMap& BoxServiceAsyncProcessor::getInteractionConstructorMap() {
  return interactionConstructorMap_;
}

const BoxServiceAsyncProcessor::InteractionConstructorMap BoxServiceAsyncProcessor::interactionConstructorMap_ {
};

std::unique_ptr<apache::thrift::Tile> BoxServiceAsyncProcessor::createInteractionImpl(const std::string& name, int16_t) {
  auto fn = getInteractionConstructorMap().at(name);
  return (this->*fn)();
}} // namespace cpp2
