[("\\I",
  (Shallow_decl_defs.Class
     { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
       sc_abstract = false; sc_is_xhp = false; sc_internal = false;
       sc_has_xhp_keyword = false; sc_kind = Cinterface; sc_module = None;
       sc_name = ([6:11-12], "\\I"); sc_tparams = [];
       sc_where_constraints = []; sc_extends = []; sc_uses = [];
       sc_xhp_attr_uses = []; sc_xhp_enum_values = {};
       sc_xhp_marked_empty = false; sc_req_extends = [];
       sc_req_implements = []; sc_req_class = []; sc_implements = [];
       sc_support_dynamic_type = false; sc_consts = []; sc_typeconsts = [];
       sc_props = []; sc_sprops = []; sc_constructor = None;
       sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
       sc_enum_type = None; sc_docs_url = None }));
  ("\\J",
   (Shallow_decl_defs.Class
      { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
        sc_abstract = false; sc_is_xhp = false; sc_internal = false;
        sc_has_xhp_keyword = false; sc_kind = Cinterface; sc_module = None;
        sc_name = ([7:11-12], "\\J"); sc_tparams = [];
        sc_where_constraints = []; sc_extends = []; sc_uses = [];
        sc_xhp_attr_uses = []; sc_xhp_enum_values = {};
        sc_xhp_marked_empty = false; sc_req_extends = [];
        sc_req_implements = []; sc_req_class = []; sc_implements = [];
        sc_support_dynamic_type = false; sc_consts = []; sc_typeconsts = [];
        sc_props = []; sc_sprops = []; sc_constructor = None;
        sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
        sc_enum_type = None; sc_docs_url = None }));
  ("\\f",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([9:10-11]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [9:19-22]; fp_name = (Some "$_x");
                 fp_type =
                 { et_enforced = Typing_defs_core.Unenforced;
                   et_type =
                   (Rhint ([9:12-18]),
                    (Tintersection
                       [(Rhint ([9:13-14]), (Tapply (([9:13-14], "\\I"), [])));
                         (Rhint ([9:16-17]),
                          (Tapply (([9:16-17], "\\J"), [])))
                         ]))
                   };
                 fp_flags =
                 (make_fp_flags ~accept_disposable:false ~has_default:false
                   ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                   ~ifc_can_call:false ~readonly:false);
                  }
                ];
              ft_implicit_params = { capability = (CapDefaults [9:10-11]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type = (Rhint ([9:25-29]), (Tprim Tvoid)) };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false ~is_memoized:false ~variadic:false);
              ft_ifc_decl = FDPolicied {PUBLIC}ft_cross_package = None }));
        fe_pos = [9:10-11]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false }));
  ("\\g",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([10:10-11]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [10:19-22]; fp_name = (Some "$_x");
                 fp_type =
                 { et_enforced = Typing_defs_core.Unenforced;
                   et_type =
                   (Rhint ([10:12-18]),
                    (Tunion
                       [(Rhint ([10:13-14]),
                         (Tapply (([10:13-14], "\\I"), [])));
                         (Rhint ([10:16-17]),
                          (Tapply (([10:16-17], "\\J"), [])))
                         ]))
                   };
                 fp_flags =
                 (make_fp_flags ~accept_disposable:false ~has_default:false
                   ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                   ~ifc_can_call:false ~readonly:false);
                  }
                ];
              ft_implicit_params = { capability = (CapDefaults [10:10-11]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type = (Rhint ([10:25-29]), (Tprim Tvoid)) };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false ~is_memoized:false ~variadic:false);
              ft_ifc_decl = FDPolicied {PUBLIC}ft_cross_package = None }));
        fe_pos = [10:10-11]; fe_php_std_lib = false;
        fe_support_dynamic_type = false; fe_no_auto_dynamic = false }))
  ]
