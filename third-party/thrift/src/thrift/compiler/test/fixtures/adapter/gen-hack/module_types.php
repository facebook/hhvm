<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

namespace thrift\test;

type SetWithAdapter = \Adapter2::THackType;
type StringWithAdapter = \Adapter1::THackType;
type ListWithElemAdapter = Vector<\thrift\test\StringWithAdapter>;
type ListWithElemAdapter_withAdapter = \Adapter2::THackType;
type MyI64 = int;
type DoubleTypedefI64 = \thrift\test\MyI64;
type MyI32 = \Adapter1::THackType;
type FooWithAdapter = \Adapter1::THackType;
type StructWithAdapter = \Adapter2::THackType;
type UnionWithAdapter = \Adapter2::THackType;
type AdaptedA = \thrift\test\A;
/**
 * Original thrift struct:-
 * MyAnnotation
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/MyAnnotation'))>>
class MyAnnotation implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'signature',
      'type' => \TType::STRING,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'signature' => 1,
  ];

  const type TConstructorShape = shape(
    ?'signature' => ?string,
  );

  const type TShape = shape(
    'signature' => string,
  );
  const int STRUCTURAL_ID = 8000450631971332689;
  /**
   * Original thrift field:-
   * 1: string signature
   */
  public string $signature;

  public function __construct(?string $signature = null)[] {
    $this->signature = $signature ?? '';
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'signature'),
    );
  }

  public function getName()[]: string {
    return 'MyAnnotation';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyAnnotation",
        "fields" => vec[
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "signature",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        '\thrift\annotation\python\Adapter' => \thrift\annotation\python\Adapter::fromShape(
          shape(
            "name" => "my.module.Adapter2",
            "typeHint" => "my.another.module.AdaptedType2[]",
          )
        ),
        '\thrift\annotation\Transitive' => \thrift\annotation\Transitive::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['signature'],
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'signature' => $this->signature,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'signature') !== null) {
      $this->signature = HH\FIXME\UNSAFE_CAST<mixed, string>($parsed['signature']);
    }
  }

}

/**
 * Original thrift struct:-
 * Foo
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/compiler/test/fixtures/adapter/src/module/Foo'))>>
class Foo implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'intField',
      'adapter' => \Adapter1::class,
      'type' => \TType::I32,
    ),
    2 => shape(
      'var' => 'optionalIntField',
      'adapter' => \Adapter1::class,
      'type' => \TType::I32,
    ),
    3 => shape(
      'var' => 'intFieldWithDefault',
      'adapter' => \Adapter1::class,
      'type' => \TType::I32,
    ),
    4 => shape(
      'var' => 'setField',
      'adapter' => \Adapter2::class,
      'type' => \TType::SET,
      'etype' => \TType::STRING,
      'elem' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
    5 => shape(
      'var' => 'optionalSetField',
      'adapter' => \Adapter2::class,
      'type' => \TType::SET,
      'etype' => \TType::STRING,
      'elem' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
    6 => shape(
      'var' => 'mapField',
      'adapter' => \Adapter3::class,
      'type' => \TType::MAP,
      'ktype' => \TType::STRING,
      'vtype' => \TType::LST,
      'key' => shape(
        'type' => \TType::STRING,
      ),
      'val' => shape(
        'adapter' => \Adapter2::class,
        'type' => \TType::LST,
        'etype' => \TType::STRING,
        'elem' => shape(
          'adapter' => \Adapter1::class,
          'type' => \TType::STRING,
        ),
        'format' => 'collection',
      ),
      'format' => 'collection',
    ),
    7 => shape(
      'var' => 'optionalMapField',
      'adapter' => \Adapter3::class,
      'type' => \TType::MAP,
      'ktype' => \TType::STRING,
      'vtype' => \TType::LST,
      'key' => shape(
        'type' => \TType::STRING,
      ),
      'val' => shape(
        'adapter' => \Adapter2::class,
        'type' => \TType::LST,
        'etype' => \TType::STRING,
        'elem' => shape(
          'adapter' => \Adapter1::class,
          'type' => \TType::STRING,
        ),
        'format' => 'collection',
      ),
      'format' => 'collection',
    ),
    8 => shape(
      'var' => 'binaryField',
      'adapter' => \Adapter1::class,
      'type' => \TType::STRING,
      'is_binary' => true,
    ),
    9 => shape(
      'var' => 'longField',
      'type' => \TType::I64,
    ),
    10 => shape(
      'var' => 'adaptedLongField',
      'type' => \TType::I64,
    ),
    11 => shape(
      'var' => 'doubleAdaptedField',
      'type' => \TType::I64,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'intField' => 1,
    'optionalIntField' => 2,
    'intFieldWithDefault' => 3,
    'setField' => 4,
    'optionalSetField' => 5,
    'mapField' => 6,
    'optionalMapField' => 7,
    'binaryField' => 8,
    'longField' => 9,
    'adaptedLongField' => 10,
    'doubleAdaptedField' => 11,
  ];

  const type TConstructorShape = shape(
    ?'intField' => ?\Adapter1::THackType,
    ?'optionalIntField' => ?\Adapter1::THackType,
    ?'intFieldWithDefault' => ?\Adapter1::THackType,
    ?'setField' => ?\thrift\test\SetWithAdapter,
    ?'optionalSetField' => ?\thrift\test\SetWithAdapter,
    ?'mapField' => ?\Adapter3::THackType,
    ?'optionalMapField' => ?\Adapter3::THackType,
    ?'binaryField' => ?\Adapter1::THackType,
    ?'longField' => ?\thrift\test\MyI64,
    ?'adaptedLongField' => ?\thrift\test\MyI64,
    ?'doubleAdaptedField' => ?\thrift\test\DoubleTypedefI64,
  );

  const type TShape = shape(
    'intField' => \Adapter1::THackType,
    ?'optionalIntField' => ?\Adapter1::THackType,
    'intFieldWithDefault' => \Adapter1::THackType,
    'setField' => \thrift\test\SetWithAdapter,
    ?'optionalSetField' => ?\thrift\test\SetWithAdapter,
    'mapField' => \Adapter3::THackType,
    ?'optionalMapField' => ?\Adapter3::THackType,
    'binaryField' => \Adapter1::THackType,
    'longField' => \thrift\test\MyI64,
    'adaptedLongField' => \thrift\test\MyI64,
    'doubleAdaptedField' => \thrift\test\DoubleTypedefI64,
  );
  const int STRUCTURAL_ID = 5127579417322622320;
  /**
   * Original thrift field:-
   * 1: i32 intField
   */
  public \Adapter1::THackType $intField;
  /**
   * Original thrift field:-
   * 2: i32 optionalIntField
   */
  public ?\Adapter1::THackType $optionalIntField;
  /**
   * Original thrift field:-
   * 3: i32 intFieldWithDefault
   */
  public \Adapter1::THackType $intFieldWithDefault;
  /**
   * Original thrift field:-
   * 4: set<string> setField
   */
  public \thrift\test\SetWithAdapter $setField;
  /**
   * Original thrift field:-
   * 5: set<string> optionalSetField
   */
  public ?\thrift\test\SetWithAdapter $optionalSetField;
  /**
   * Original thrift field:-
   * 6: map<string, list<string>> mapField
   */
  public \Adapter3::THackType $mapField;
  /**
   * Original thrift field:-
   * 7: map<string, list<string>> optionalMapField
   */
  public ?\Adapter3::THackType $optionalMapField;
  /**
   * Original thrift field:-
   * 8: binary binaryField
   */
  public \Adapter1::THackType $binaryField;
  /**
   * Original thrift field:-
   * 9: i64 longField
   */
  public \thrift\test\MyI64 $longField;
  /**
   * Original thrift field:-
   * 10: i64 adaptedLongField
   */
  public \thrift\test\MyI64 $adaptedLongField;
  /**
   * Original thrift field:-
   * 11: i64 doubleAdaptedField
   */
  public \thrift\test\DoubleTypedefI64 $doubleAdaptedField;

  public function __construct(?\Adapter1::THackType $intField = null, ?\Adapter1::THackType $optionalIntField = null, ?\Adapter1::THackType $intFieldWithDefault = null, ?\thrift\test\SetWithAdapter $setField = null, ?\thrift\test\SetWithAdapter $optionalSetField = null, ?\Adapter3::THackType $mapField = null, ?\Adapter3::THackType $optionalMapField = null, ?\Adapter1::THackType $binaryField = null, ?\thrift\test\MyI64 $longField = null, ?\thrift\test\MyI64 $adaptedLongField = null, ?\thrift\test\DoubleTypedefI64 $doubleAdaptedField = null)[] {
    $this->intField = $intField ?? \Adapter1::fromThrift(0);
    $this->optionalIntField = $optionalIntField;
    $this->intFieldWithDefault = $intFieldWithDefault ?? \Adapter1::fromThrift(13);
    $this->setField = $setField ?? \Adapter2::fromThrift(Set {});
    $this->optionalSetField = $optionalSetField;
    $this->mapField = $mapField ?? \Adapter3::fromThrift(Map {});
    $this->optionalMapField = $optionalMapField;
    $this->binaryField = $binaryField ?? \Adapter1::fromThrift('');
    $this->longField = $longField ?? 0;
    $this->adaptedLongField = $adaptedLongField ?? 0;
    $this->doubleAdaptedField = $doubleAdaptedField ?? 0;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'intField'),
      Shapes::idx($shape, 'optionalIntField'),
      Shapes::idx($shape, 'intFieldWithDefault'),
      Shapes::idx($shape, 'setField'),
      Shapes::idx($shape, 'optionalSetField'),
      Shapes::idx($shape, 'mapField'),
      Shapes::idx($shape, 'optionalMapField'),
      Shapes::idx($shape, 'binaryField'),
      Shapes::idx($shape, 'longField'),
      Shapes::idx($shape, 'adaptedLongField'),
      Shapes::idx($shape, 'doubleAdaptedField'),
    );
  }

  public function getName()[]: string {
    return 'Foo';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.Foo",
        "fields" => vec[
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "intField",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "optionalIntField",
              "is_optional" => true,
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "intFieldWithDefault",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.SetWithAdapter",
                      "underlyingType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_set" => \tmeta_ThriftSetType::fromShape(
                            shape(
                              "valueType" => \tmeta_ThriftType::fromShape(
                                shape(
                                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "setField",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.SetWithAdapter",
                      "underlyingType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_set" => \tmeta_ThriftSetType::fromShape(
                            shape(
                              "valueType" => \tmeta_ThriftType::fromShape(
                                shape(
                                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "optionalSetField",
              "is_optional" => true,
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 6,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_map" => \tmeta_ThriftMapType::fromShape(
                    shape(
                      "keyType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                      "valueType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                            shape(
                              "name" => "module.ListWithElemAdapter_withAdapter",
                              "underlyingType" => \tmeta_ThriftType::fromShape(
                                shape(
                                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                                    shape(
                                      "name" => "module.ListWithElemAdapter_withAdapter",
                                      "underlyingType" => \tmeta_ThriftType::fromShape(
                                        shape(
                                          "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                                            shape(
                                              "name" => "module.ListWithElemAdapter",
                                              "underlyingType" => \tmeta_ThriftType::fromShape(
                                                shape(
                                                  "t_list" => \tmeta_ThriftListType::fromShape(
                                                    shape(
                                                      "valueType" => \tmeta_ThriftType::fromShape(
                                                        shape(
                                                          "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                                                            shape(
                                                              "name" => "module.StringWithAdapter",
                                                              "underlyingType" => \tmeta_ThriftType::fromShape(
                                                                shape(
                                                                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                                                                )
                                                              ),
                                                            )
                                                          ),
                                                        )
                                                      ),
                                                    )
                                                  ),
                                                )
                                              ),
                                            )
                                          ),
                                        )
                                      ),
                                    )
                                  ),
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "mapField",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 7,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_map" => \tmeta_ThriftMapType::fromShape(
                    shape(
                      "keyType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                      "valueType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                            shape(
                              "name" => "module.ListWithElemAdapter_withAdapter",
                              "underlyingType" => \tmeta_ThriftType::fromShape(
                                shape(
                                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                                    shape(
                                      "name" => "module.ListWithElemAdapter_withAdapter",
                                      "underlyingType" => \tmeta_ThriftType::fromShape(
                                        shape(
                                          "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                                            shape(
                                              "name" => "module.ListWithElemAdapter",
                                              "underlyingType" => \tmeta_ThriftType::fromShape(
                                                shape(
                                                  "t_list" => \tmeta_ThriftListType::fromShape(
                                                    shape(
                                                      "valueType" => \tmeta_ThriftType::fromShape(
                                                        shape(
                                                          "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                                                            shape(
                                                              "name" => "module.StringWithAdapter",
                                                              "underlyingType" => \tmeta_ThriftType::fromShape(
                                                                shape(
                                                                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                                                                )
                                                              ),
                                                            )
                                                          ),
                                                        )
                                                      ),
                                                    )
                                                  ),
                                                )
                                              ),
                                            )
                                          ),
                                        )
                                      ),
                                    )
                                  ),
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "optionalMapField",
              "is_optional" => true,
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 8,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_BINARY_TYPE,
                )
              ),
              "name" => "binaryField",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 9,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.MyI64",
                      "underlyingType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "longField",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 10,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.MyI64",
                      "underlyingType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "adaptedLongField",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 11,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.DoubleTypedefI64",
                      "underlyingType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                            shape(
                              "name" => "module.MyI64",
                              "underlyingType" => \tmeta_ThriftType::fromShape(
                                shape(
                                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "doubleAdaptedField",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'intField' => shape(
          'field' => dict[
            '\thrift\annotation\hack\Adapter' => \thrift\annotation\hack\Adapter::fromShape(
              shape(
                "name" => "\Adapter1",
              )
            ),
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
          ],
          'type' => dict[],
        ),
        'optionalIntField' => shape(
          'field' => dict[
            '\thrift\annotation\hack\Adapter' => \thrift\annotation\hack\Adapter::fromShape(
              shape(
                "name" => "\Adapter1",
              )
            ),
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
          ],
          'type' => dict[],
        ),
        'intFieldWithDefault' => shape(
          'field' => dict[
            '\thrift\annotation\hack\Adapter' => \thrift\annotation\hack\Adapter::fromShape(
              shape(
                "name" => "\Adapter1",
              )
            ),
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
          ],
          'type' => dict[],
        ),
        'setField' => shape(
          'field' => dict[],
          'type' => dict[
            '\thrift\annotation\hack\Adapter' => \thrift\annotation\hack\Adapter::fromShape(
              shape(
                "name" => "\Adapter2",
              )
            ),
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter2",
              )
            ),
          ],
        ),
        'optionalSetField' => shape(
          'field' => dict[],
          'type' => dict[
            '\thrift\annotation\hack\Adapter' => \thrift\annotation\hack\Adapter::fromShape(
              shape(
                "name" => "\Adapter2",
              )
            ),
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter2",
              )
            ),
          ],
        ),
        'mapField' => shape(
          'field' => dict[
            '\thrift\annotation\hack\Adapter' => \thrift\annotation\hack\Adapter::fromShape(
              shape(
                "name" => "\Adapter3",
              )
            ),
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter3",
              )
            ),
          ],
          'type' => dict[],
        ),
        'optionalMapField' => shape(
          'field' => dict[
            '\thrift\annotation\hack\Adapter' => \thrift\annotation\hack\Adapter::fromShape(
              shape(
                "name" => "\Adapter3",
              )
            ),
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter3",
              )
            ),
          ],
          'type' => dict[],
        ),
        'binaryField' => shape(
          'field' => dict[
            '\thrift\annotation\hack\Adapter' => \thrift\annotation\hack\Adapter::fromShape(
              shape(
                "name" => "\Adapter1",
              )
            ),
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter3",
              )
            ),
          ],
          'type' => dict[],
        ),
        'longField' => shape(
          'field' => dict[],
          'type' => dict[
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
            '\thrift\test\MyAnnotation' => \thrift\test\MyAnnotation::fromShape(
              shape(
                "signature" => "MyI64",
              )
            ),
          ],
        ),
        'adaptedLongField' => shape(
          'field' => dict[
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter2",
              )
            ),
            '\thrift\annotation\python\Adapter' => \thrift\annotation\python\Adapter::fromShape(
              shape(
                "name" => "my.Adapter3",
                "typeHint" => "my.AdaptedType3[]",
              )
            ),
          ],
          'type' => dict[
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
            '\thrift\test\MyAnnotation' => \thrift\test\MyAnnotation::fromShape(
              shape(
                "signature" => "MyI64",
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['intField'],
      Shapes::idx($shape, 'optionalIntField'),
      $shape['intFieldWithDefault'],
      new Set(Keyset\keys($shape['setField'])),
      Shapes::idx($shape, 'optionalSetField') === null ? null : (new Set(Keyset\keys($shape['optionalSetField']))),
      (new Map($shape['mapField']))->map(
        $val0 ==> (new Vector($val0)),
      ),
      Shapes::idx($shape, 'optionalMapField') === null ? null : ((new Map($shape['optionalMapField']))->map(
        $val1 ==> (new Vector($val1)),
      )),
      $shape['binaryField'],
      $shape['longField'],
      $shape['adaptedLongField'],
      $shape['doubleAdaptedField'],
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'intField' => $this->intField,
      'optionalIntField' => $this->optionalIntField,
      'intFieldWithDefault' => $this->intFieldWithDefault,
      'setField' => ThriftUtil::toDArray(Dict\fill_keys($this->setField->toValuesArray(), true), static::class),
      'optionalSetField' => $this->optionalSetField
        |> $$ === null ? null : ThriftUtil::toDArray(Dict\fill_keys($$->toValuesArray(), true), static::class),
      'mapField' => $this->mapField->map(
        ($_val0) ==> vec($_val0),
      )
        |> dict($$),
      'optionalMapField' => $this->optionalMapField?->map(
        ($_val0) ==> vec($_val0),
      )
        |> $$ === null ? null : dict($$),
      'binaryField' => $this->binaryField,
      'longField' => $this->longField,
      'adaptedLongField' => $this->adaptedLongField,
      'doubleAdaptedField' => $this->doubleAdaptedField,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'intField') !== null) {
      $_tmp0 = (int)HH\FIXME\UNSAFE_CAST<mixed, int>($parsed['intField']);
      if ($_tmp0 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->intField = (int)$_tmp0;
      }
    }
    if (idx($parsed, 'optionalIntField') !== null) {
      $_tmp1 = (int)HH\FIXME\UNSAFE_CAST<mixed, int>($parsed['optionalIntField']);
      if ($_tmp1 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->optionalIntField = (int)$_tmp1;
      }
    }
    if (idx($parsed, 'intFieldWithDefault') !== null) {
      $_tmp2 = (int)HH\FIXME\UNSAFE_CAST<mixed, int>($parsed['intFieldWithDefault']);
      if ($_tmp2 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->intFieldWithDefault = (int)$_tmp2;
      }
    }
    if (idx($parsed, 'setField') !== null) {
      $_json6 = HH\FIXME\UNSAFE_CAST<mixed, \thrift\test\SetWithAdapter>($parsed['setField']);
      $_container7 = Set {};
      foreach($_json6 as $_key4 => $_value5) {
        $_elem8 = '';
        $_elem8 = $_value5;
        $_container7->add($_elem8);
      }
      $this->setField = $_container7;
    }
    if (idx($parsed, 'optionalSetField') !== null) {
      $_json12 = HH\FIXME\UNSAFE_CAST<mixed, \thrift\test\SetWithAdapter>($parsed['optionalSetField']);
      $_container13 = Set {};
      foreach($_json12 as $_key10 => $_value11) {
        $_elem14 = '';
        $_elem14 = $_value11;
        $_container13->add($_elem14);
      }
      $this->optionalSetField = $_container13;
    }
    if (idx($parsed, 'mapField') !== null) {
      $_json18 = HH\FIXME\UNSAFE_CAST<mixed, Map<string, \thrift\test\ListWithElemAdapter_withAdapter>>($parsed['mapField']);
      $_container19 = Map {};
      foreach($_json18 as $_key16 => $_value17) {
        $_value20 = Vector {};
        $_json24 = $_value17;
        $_container25 = Vector {};
        foreach($_json24 as $_key22 => $_value23) {
          $_elem26 = '';
          $_elem26 = $_value23;
          $_container25 []= $_elem26;
        }
        $_value20 = $_container25;
        $_container19[$_key16] = $_value20;
      }
      $this->mapField = $_container19;
    }
    if (idx($parsed, 'optionalMapField') !== null) {
      $_json30 = HH\FIXME\UNSAFE_CAST<mixed, Map<string, \thrift\test\ListWithElemAdapter_withAdapter>>($parsed['optionalMapField']);
      $_container31 = Map {};
      foreach($_json30 as $_key28 => $_value29) {
        $_value32 = Vector {};
        $_json36 = $_value29;
        $_container37 = Vector {};
        foreach($_json36 as $_key34 => $_value35) {
          $_elem38 = '';
          $_elem38 = $_value35;
          $_container37 []= $_elem38;
        }
        $_value32 = $_container37;
        $_container31[$_key28] = $_value32;
      }
      $this->optionalMapField = $_container31;
    }
    if (idx($parsed, 'binaryField') !== null) {
      $this->binaryField = HH\FIXME\UNSAFE_CAST<mixed, string>($parsed['binaryField']);
    }
    if (idx($parsed, 'longField') !== null) {
      $this->longField = HH\FIXME\UNSAFE_CAST<mixed, \thrift\test\MyI64>($parsed['longField']);
    }
    if (idx($parsed, 'adaptedLongField') !== null) {
      $this->adaptedLongField = HH\FIXME\UNSAFE_CAST<mixed, \thrift\test\MyI64>($parsed['adaptedLongField']);
    }
    if (idx($parsed, 'doubleAdaptedField') !== null) {
      $this->doubleAdaptedField = HH\FIXME\UNSAFE_CAST<mixed, \thrift\test\DoubleTypedefI64>($parsed['doubleAdaptedField']);
    }
  }

  private static function __hackAdapterTypeChecks()[]: void {
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, \thrift\test\StringWithAdapter>();
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, int>();
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, string>();
    \ThriftUtil::requireSameType<\Adapter2::TThriftType, \thrift\test\ListWithElemAdapter_withAdapter>();
    \ThriftUtil::requireSameType<\Adapter2::TThriftType, \thrift\test\SetWithAdapter>();
    \ThriftUtil::requireSameType<\Adapter3::TThriftType, Map<string, \thrift\test\ListWithElemAdapter_withAdapter>>();
  }

}

enum BazEnum: int {
  _EMPTY_ = 0;
  intField = 1;
  setField = 4;
  mapField = 6;
  binaryField = 8;
  longField = 9;
}

/**
 * Original thrift struct:-
 * Baz
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/Baz'))>>
class Baz implements \IThriftSyncStruct, \IThriftUnion<\thrift\test\BazEnum>, \IThriftShapishSyncStruct {
  use \ThriftUnionSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'intField',
      'union' => true,
      'adapter' => \Adapter1::class,
      'type' => \TType::I32,
    ),
    4 => shape(
      'var' => 'setField',
      'union' => true,
      'adapter' => \Adapter2::class,
      'type' => \TType::SET,
      'etype' => \TType::STRING,
      'elem' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
    6 => shape(
      'var' => 'mapField',
      'union' => true,
      'adapter' => \Adapter3::class,
      'type' => \TType::MAP,
      'ktype' => \TType::STRING,
      'vtype' => \TType::LST,
      'key' => shape(
        'type' => \TType::STRING,
      ),
      'val' => shape(
        'adapter' => \Adapter2::class,
        'type' => \TType::LST,
        'etype' => \TType::STRING,
        'elem' => shape(
          'adapter' => \Adapter1::class,
          'type' => \TType::STRING,
        ),
        'format' => 'collection',
      ),
      'format' => 'collection',
    ),
    8 => shape(
      'var' => 'binaryField',
      'union' => true,
      'adapter' => \Adapter1::class,
      'type' => \TType::STRING,
      'is_binary' => true,
    ),
    9 => shape(
      'var' => 'longField',
      'union' => true,
      'type' => \TType::I64,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'intField' => 1,
    'setField' => 4,
    'mapField' => 6,
    'binaryField' => 8,
    'longField' => 9,
  ];

  const type TConstructorShape = shape(
    ?'intField' => ?\Adapter1::THackType,
    ?'setField' => ?\thrift\test\SetWithAdapter,
    ?'mapField' => ?\Adapter3::THackType,
    ?'binaryField' => ?\Adapter1::THackType,
    ?'longField' => ?\thrift\test\MyI64,
  );

  const type TShape = shape(
    ?'intField' => ?\Adapter1::THackType,
    ?'setField' => ?\thrift\test\SetWithAdapter,
    ?'mapField' => ?\Adapter3::THackType,
    ?'binaryField' => ?\Adapter1::THackType,
    ?'longField' => ?\thrift\test\MyI64,
  );
  const int STRUCTURAL_ID = 8924052603013047554;
  /**
   * Original thrift field:-
   * 1: i32 intField
   */
  public ?\Adapter1::THackType $intField;
  /**
   * Original thrift field:-
   * 4: set<string> setField
   */
  public ?\thrift\test\SetWithAdapter $setField;
  /**
   * Original thrift field:-
   * 6: map<string, list<string>> mapField
   */
  public ?\Adapter3::THackType $mapField;
  /**
   * Original thrift field:-
   * 8: binary binaryField
   */
  public ?\Adapter1::THackType $binaryField;
  /**
   * Original thrift field:-
   * 9: i64 longField
   */
  public ?\thrift\test\MyI64 $longField;
  protected \thrift\test\BazEnum $_type = \thrift\test\BazEnum::_EMPTY_;

  public function __construct(?\Adapter1::THackType $intField = null, ?\thrift\test\SetWithAdapter $setField = null, ?\Adapter3::THackType $mapField = null, ?\Adapter1::THackType $binaryField = null, ?\thrift\test\MyI64 $longField = null)[] {
    $this->_type = \thrift\test\BazEnum::_EMPTY_;
    if ($intField !== null) {
      $this->intField = $intField;
      $this->_type = \thrift\test\BazEnum::intField;
    }
    if ($setField !== null) {
      $this->setField = $setField;
      $this->_type = \thrift\test\BazEnum::setField;
    }
    if ($mapField !== null) {
      $this->mapField = $mapField;
      $this->_type = \thrift\test\BazEnum::mapField;
    }
    if ($binaryField !== null) {
      $this->binaryField = $binaryField;
      $this->_type = \thrift\test\BazEnum::binaryField;
    }
    if ($longField !== null) {
      $this->longField = $longField;
      $this->_type = \thrift\test\BazEnum::longField;
    }
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'intField'),
      Shapes::idx($shape, 'setField'),
      Shapes::idx($shape, 'mapField'),
      Shapes::idx($shape, 'binaryField'),
      Shapes::idx($shape, 'longField'),
    );
  }

  public function getName()[]: string {
    return 'Baz';
  }

  public function getType()[]: \thrift\test\BazEnum {
    return $this->_type;
  }

  public function reset()[write_props]: void {
    switch ($this->_type) {
      case \thrift\test\BazEnum::intField:
        $this->intField = null;
        break;
      case \thrift\test\BazEnum::setField:
        $this->setField = null;
        break;
      case \thrift\test\BazEnum::mapField:
        $this->mapField = null;
        break;
      case \thrift\test\BazEnum::binaryField:
        $this->binaryField = null;
        break;
      case \thrift\test\BazEnum::longField:
        $this->longField = null;
        break;
      case \thrift\test\BazEnum::_EMPTY_:
        break;
    }
    $this->_type = \thrift\test\BazEnum::_EMPTY_;
  }

  public function set_intField(\Adapter1::THackType $intField)[write_props]: this {
    $this->reset();
    $this->_type = \thrift\test\BazEnum::intField;
    $this->intField = $intField;
    return $this;
  }

  public function get_intField()[]: ?\Adapter1::THackType {
    return $this->intField;
  }

  public function getx_intField()[]: \Adapter1::THackType {
    invariant(
      $this->_type === \thrift\test\BazEnum::intField,
      'get_intField called on an instance of Baz whose current type is %s',
      (string)$this->_type,
    );
    return $this->intField as nonnull;
  }

  public function set_setField(\thrift\test\SetWithAdapter $setField)[write_props]: this {
    $this->reset();
    $this->_type = \thrift\test\BazEnum::setField;
    $this->setField = $setField;
    return $this;
  }

  public function get_setField()[]: ?\thrift\test\SetWithAdapter {
    return $this->setField;
  }

  public function getx_setField()[]: \thrift\test\SetWithAdapter {
    invariant(
      $this->_type === \thrift\test\BazEnum::setField,
      'get_setField called on an instance of Baz whose current type is %s',
      (string)$this->_type,
    );
    return $this->setField as nonnull;
  }

  public function set_mapField(\Adapter3::THackType $mapField)[write_props]: this {
    $this->reset();
    $this->_type = \thrift\test\BazEnum::mapField;
    $this->mapField = $mapField;
    return $this;
  }

  public function get_mapField()[]: ?\Adapter3::THackType {
    return $this->mapField;
  }

  public function getx_mapField()[]: \Adapter3::THackType {
    invariant(
      $this->_type === \thrift\test\BazEnum::mapField,
      'get_mapField called on an instance of Baz whose current type is %s',
      (string)$this->_type,
    );
    return $this->mapField as nonnull;
  }

  public function set_binaryField(\Adapter1::THackType $binaryField)[write_props]: this {
    $this->reset();
    $this->_type = \thrift\test\BazEnum::binaryField;
    $this->binaryField = $binaryField;
    return $this;
  }

  public function get_binaryField()[]: ?\Adapter1::THackType {
    return $this->binaryField;
  }

  public function getx_binaryField()[]: \Adapter1::THackType {
    invariant(
      $this->_type === \thrift\test\BazEnum::binaryField,
      'get_binaryField called on an instance of Baz whose current type is %s',
      (string)$this->_type,
    );
    return $this->binaryField as nonnull;
  }

  public function set_longField(\thrift\test\MyI64 $longField)[write_props]: this {
    $this->reset();
    $this->_type = \thrift\test\BazEnum::longField;
    $this->longField = $longField;
    return $this;
  }

  public function get_longField()[]: ?\thrift\test\MyI64 {
    return $this->longField;
  }

  public function getx_longField()[]: \thrift\test\MyI64 {
    invariant(
      $this->_type === \thrift\test\BazEnum::longField,
      'get_longField called on an instance of Baz whose current type is %s',
      (string)$this->_type,
    );
    return $this->longField as nonnull;
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.Baz",
        "fields" => vec[
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "intField",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.SetWithAdapter",
                      "underlyingType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_set" => \tmeta_ThriftSetType::fromShape(
                            shape(
                              "valueType" => \tmeta_ThriftType::fromShape(
                                shape(
                                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "setField",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 6,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_map" => \tmeta_ThriftMapType::fromShape(
                    shape(
                      "keyType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                      "valueType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                            shape(
                              "name" => "module.ListWithElemAdapter_withAdapter",
                              "underlyingType" => \tmeta_ThriftType::fromShape(
                                shape(
                                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                                    shape(
                                      "name" => "module.ListWithElemAdapter_withAdapter",
                                      "underlyingType" => \tmeta_ThriftType::fromShape(
                                        shape(
                                          "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                                            shape(
                                              "name" => "module.ListWithElemAdapter",
                                              "underlyingType" => \tmeta_ThriftType::fromShape(
                                                shape(
                                                  "t_list" => \tmeta_ThriftListType::fromShape(
                                                    shape(
                                                      "valueType" => \tmeta_ThriftType::fromShape(
                                                        shape(
                                                          "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                                                            shape(
                                                              "name" => "module.StringWithAdapter",
                                                              "underlyingType" => \tmeta_ThriftType::fromShape(
                                                                shape(
                                                                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                                                                )
                                                              ),
                                                            )
                                                          ),
                                                        )
                                                      ),
                                                    )
                                                  ),
                                                )
                                              ),
                                            )
                                          ),
                                        )
                                      ),
                                    )
                                  ),
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "mapField",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 8,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_BINARY_TYPE,
                )
              ),
              "name" => "binaryField",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 9,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.MyI64",
                      "underlyingType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "longField",
            )
          ),
        ],
        "is_union" => true,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'intField' => shape(
          'field' => dict[
            '\thrift\annotation\hack\Adapter' => \thrift\annotation\hack\Adapter::fromShape(
              shape(
                "name" => "\Adapter1",
              )
            ),
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
          ],
          'type' => dict[],
        ),
        'setField' => shape(
          'field' => dict[],
          'type' => dict[
            '\thrift\annotation\hack\Adapter' => \thrift\annotation\hack\Adapter::fromShape(
              shape(
                "name" => "\Adapter2",
              )
            ),
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter2",
              )
            ),
          ],
        ),
        'mapField' => shape(
          'field' => dict[
            '\thrift\annotation\hack\Adapter' => \thrift\annotation\hack\Adapter::fromShape(
              shape(
                "name" => "\Adapter3",
              )
            ),
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter3",
              )
            ),
          ],
          'type' => dict[],
        ),
        'binaryField' => shape(
          'field' => dict[
            '\thrift\annotation\hack\Adapter' => \thrift\annotation\hack\Adapter::fromShape(
              shape(
                "name" => "\Adapter1",
              )
            ),
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
          ],
          'type' => dict[],
        ),
        'longField' => shape(
          'field' => dict[],
          'type' => dict[
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
            '\thrift\test\MyAnnotation' => \thrift\test\MyAnnotation::fromShape(
              shape(
                "signature" => "MyI64",
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'intField'),
      Shapes::idx($shape, 'setField') === null ? null : (new Set(Keyset\keys($shape['setField']))),
      Shapes::idx($shape, 'mapField') === null ? null : ((new Map($shape['mapField']))->map(
        $val0 ==> (new Vector($val0)),
      )),
      Shapes::idx($shape, 'binaryField'),
      Shapes::idx($shape, 'longField'),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'intField' => $this->intField,
      'setField' => $this->setField
        |> $$ === null ? null : ThriftUtil::toDArray(Dict\fill_keys($$->toValuesArray(), true), static::class),
      'mapField' => $this->mapField?->map(
        ($_val0) ==> vec($_val0),
      )
        |> $$ === null ? null : dict($$),
      'binaryField' => $this->binaryField,
      'longField' => $this->longField,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $this->_type = \thrift\test\BazEnum::_EMPTY_;
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'intField') !== null) {
      $_tmp0 = (int)HH\FIXME\UNSAFE_CAST<mixed, int>($parsed['intField']);
      if ($_tmp0 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->intField = (int)$_tmp0;
      }
      $this->_type = \thrift\test\BazEnum::intField;
    }
    if (idx($parsed, 'setField') !== null) {
      $_json4 = HH\FIXME\UNSAFE_CAST<mixed, \thrift\test\SetWithAdapter>($parsed['setField']);
      $_container5 = Set {};
      foreach($_json4 as $_key2 => $_value3) {
        $_elem6 = '';
        $_elem6 = $_value3;
        $_container5->add($_elem6);
      }
      $this->setField = $_container5;
      $this->_type = \thrift\test\BazEnum::setField;
    }
    if (idx($parsed, 'mapField') !== null) {
      $_json10 = HH\FIXME\UNSAFE_CAST<mixed, Map<string, \thrift\test\ListWithElemAdapter_withAdapter>>($parsed['mapField']);
      $_container11 = Map {};
      foreach($_json10 as $_key8 => $_value9) {
        $_value12 = Vector {};
        $_json16 = $_value9;
        $_container17 = Vector {};
        foreach($_json16 as $_key14 => $_value15) {
          $_elem18 = '';
          $_elem18 = $_value15;
          $_container17 []= $_elem18;
        }
        $_value12 = $_container17;
        $_container11[$_key8] = $_value12;
      }
      $this->mapField = $_container11;
      $this->_type = \thrift\test\BazEnum::mapField;
    }
    if (idx($parsed, 'binaryField') !== null) {
      $this->binaryField = HH\FIXME\UNSAFE_CAST<mixed, string>($parsed['binaryField']);
      $this->_type = \thrift\test\BazEnum::binaryField;
    }
    if (idx($parsed, 'longField') !== null) {
      $this->longField = HH\FIXME\UNSAFE_CAST<mixed, \thrift\test\MyI64>($parsed['longField']);
      $this->_type = \thrift\test\BazEnum::longField;
    }
  }

  private static function __hackAdapterTypeChecks()[]: void {
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, \thrift\test\StringWithAdapter>();
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, int>();
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, string>();
    \ThriftUtil::requireSameType<\Adapter2::TThriftType, \thrift\test\ListWithElemAdapter_withAdapter>();
    \ThriftUtil::requireSameType<\Adapter2::TThriftType, \thrift\test\SetWithAdapter>();
    \ThriftUtil::requireSameType<\Adapter3::TThriftType, Map<string, \thrift\test\ListWithElemAdapter_withAdapter>>();
  }

}

/**
 * Original thrift struct:-
 * Bar
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/Bar'))>>
class Bar implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'structField',
      'adapter' => \Adapter1::class,
      'type' => \TType::STRUCT,
      'class' => \thrift\test\Foo::class,
    ),
    2 => shape(
      'var' => 'optionalStructField',
      'adapter' => \Adapter1::class,
      'type' => \TType::STRUCT,
      'class' => \thrift\test\Foo::class,
    ),
    3 => shape(
      'var' => 'structListField',
      'type' => \TType::LST,
      'etype' => \TType::STRUCT,
      'elem' => shape(
        'adapter' => \Adapter1::class,
        'type' => \TType::STRUCT,
        'class' => \thrift\test\Foo::class,
      ),
      'format' => 'collection',
    ),
    4 => shape(
      'var' => 'optionalStructListField',
      'type' => \TType::LST,
      'etype' => \TType::STRUCT,
      'elem' => shape(
        'adapter' => \Adapter1::class,
        'type' => \TType::STRUCT,
        'class' => \thrift\test\Foo::class,
      ),
      'format' => 'collection',
    ),
    5 => shape(
      'var' => 'unionField',
      'adapter' => \Adapter1::class,
      'type' => \TType::STRUCT,
      'class' => \thrift\test\Baz::class,
    ),
    6 => shape(
      'var' => 'optionalUnionField',
      'adapter' => \Adapter1::class,
      'type' => \TType::STRUCT,
      'class' => \thrift\test\Baz::class,
    ),
    7 => shape(
      'var' => 'adaptedStructField',
      'type' => \TType::STRUCT,
      'class' => \thrift\test\DirectlyAdapted::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'structField' => 1,
    'optionalStructField' => 2,
    'structListField' => 3,
    'optionalStructListField' => 4,
    'unionField' => 5,
    'optionalUnionField' => 6,
    'adaptedStructField' => 7,
  ];

  const type TConstructorShape = shape(
    ?'structField' => ?\Adapter1::THackType,
    ?'optionalStructField' => ?\Adapter1::THackType,
    ?'structListField' => ?Vector<\thrift\test\FooWithAdapter>,
    ?'optionalStructListField' => ?Vector<\thrift\test\FooWithAdapter>,
    ?'unionField' => ?\Adapter1::THackType,
    ?'optionalUnionField' => ?\Adapter1::THackType,
    ?'adaptedStructField' => ?\thrift\test\DirectlyAdapted,
  );

  const type TShape = shape(
    ?'structField' => ?\Adapter1::THackType,
    ?'optionalStructField' => ?\Adapter1::THackType,
    'structListField' => vec<\thrift\test\FooWithAdapter>,
    ?'optionalStructListField' => ?vec<\thrift\test\FooWithAdapter>,
    ?'unionField' => ?\Adapter1::THackType,
    ?'optionalUnionField' => ?\Adapter1::THackType,
    ?'adaptedStructField' => ?\thrift\test\DirectlyAdapted::TShape,
  );
  const int STRUCTURAL_ID = 7938871189708910014;
  /**
   * Original thrift field:-
   * 1: struct module.Foo structField
   */
  public ?\Adapter1::THackType $structField;
  /**
   * Original thrift field:-
   * 2: struct module.Foo optionalStructField
   */
  public ?\Adapter1::THackType $optionalStructField;
  /**
   * Original thrift field:-
   * 3: list<struct module.Foo> structListField
   */
  public Vector<\thrift\test\FooWithAdapter> $structListField;
  /**
   * Original thrift field:-
   * 4: list<struct module.Foo> optionalStructListField
   */
  public ?Vector<\thrift\test\FooWithAdapter> $optionalStructListField;
  /**
   * Original thrift field:-
   * 5: struct module.Baz unionField
   */
  public ?\Adapter1::THackType $unionField;
  /**
   * Original thrift field:-
   * 6: struct module.Baz optionalUnionField
   */
  public ?\Adapter1::THackType $optionalUnionField;
  /**
   * Original thrift field:-
   * 7: struct module.DirectlyAdapted adaptedStructField
   */
  public ?\thrift\test\DirectlyAdapted $adaptedStructField;

  public function __construct(?\Adapter1::THackType $structField = null, ?\Adapter1::THackType $optionalStructField = null, ?Vector<\thrift\test\FooWithAdapter> $structListField = null, ?Vector<\thrift\test\FooWithAdapter> $optionalStructListField = null, ?\Adapter1::THackType $unionField = null, ?\Adapter1::THackType $optionalUnionField = null, ?\thrift\test\DirectlyAdapted $adaptedStructField = null)[] {
    $this->structField = $structField;
    $this->optionalStructField = $optionalStructField;
    $this->structListField = $structListField ?? Vector {};
    $this->optionalStructListField = $optionalStructListField;
    $this->unionField = $unionField;
    $this->optionalUnionField = $optionalUnionField;
    $this->adaptedStructField = $adaptedStructField;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'structField'),
      Shapes::idx($shape, 'optionalStructField'),
      Shapes::idx($shape, 'structListField'),
      Shapes::idx($shape, 'optionalStructListField'),
      Shapes::idx($shape, 'unionField'),
      Shapes::idx($shape, 'optionalUnionField'),
      Shapes::idx($shape, 'adaptedStructField'),
    );
  }

  public function getName()[]: string {
    return 'Bar';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.Bar",
        "fields" => vec[
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.Foo",
                      "underlyingType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => \tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.Foo",
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "structField",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.Foo",
                      "underlyingType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => \tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.Foo",
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "optionalStructField",
              "is_optional" => true,
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_list" => \tmeta_ThriftListType::fromShape(
                    shape(
                      "valueType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                            shape(
                              "name" => "module.FooWithAdapter",
                              "underlyingType" => \tmeta_ThriftType::fromShape(
                                shape(
                                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                                    shape(
                                      "name" => "module.FooWithAdapter",
                                      "underlyingType" => \tmeta_ThriftType::fromShape(
                                        shape(
                                          "t_struct" => \tmeta_ThriftStructType::fromShape(
                                            shape(
                                              "name" => "module.Foo",
                                            )
                                          ),
                                        )
                                      ),
                                    )
                                  ),
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "structListField",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_list" => \tmeta_ThriftListType::fromShape(
                    shape(
                      "valueType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                            shape(
                              "name" => "module.FooWithAdapter",
                              "underlyingType" => \tmeta_ThriftType::fromShape(
                                shape(
                                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                                    shape(
                                      "name" => "module.FooWithAdapter",
                                      "underlyingType" => \tmeta_ThriftType::fromShape(
                                        shape(
                                          "t_struct" => \tmeta_ThriftStructType::fromShape(
                                            shape(
                                              "name" => "module.Foo",
                                            )
                                          ),
                                        )
                                      ),
                                    )
                                  ),
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "optionalStructListField",
              "is_optional" => true,
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.Baz",
                      "underlyingType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => \tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.Baz",
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "unionField",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 6,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.Baz",
                      "underlyingType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => \tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.Baz",
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "optionalUnionField",
              "is_optional" => true,
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 7,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.DirectlyAdapted",
                      "underlyingType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => \tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.DirectlyAdapted",
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "adaptedStructField",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'structField' => shape(
          'field' => dict[
            '\thrift\annotation\hack\Adapter' => \thrift\annotation\hack\Adapter::fromShape(
              shape(
                "name" => "\Adapter1",
              )
            ),
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
                "adaptedType" => "::my::Cpp::Type1",
              )
            ),
          ],
          'type' => dict[],
        ),
        'optionalStructField' => shape(
          'field' => dict[
            '\thrift\annotation\hack\Adapter' => \thrift\annotation\hack\Adapter::fromShape(
              shape(
                "name" => "\Adapter1",
              )
            ),
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
          ],
          'type' => dict[],
        ),
        'unionField' => shape(
          'field' => dict[
            '\thrift\annotation\hack\Adapter' => \thrift\annotation\hack\Adapter::fromShape(
              shape(
                "name" => "\Adapter1",
              )
            ),
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
          ],
          'type' => dict[],
        ),
        'optionalUnionField' => shape(
          'field' => dict[
            '\thrift\annotation\hack\Adapter' => \thrift\annotation\hack\Adapter::fromShape(
              shape(
                "name" => "\Adapter1",
              )
            ),
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
          ],
          'type' => dict[],
        ),
        'adaptedStructField' => shape(
          'field' => dict[],
          'type' => dict[
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter",
              )
            ),
            '\thrift\annotation\python\Adapter' => \thrift\annotation\python\Adapter::fromShape(
              shape(
                "name" => "my.module.Adapter",
                "typeHint" => "my.another.module.AdaptedType",
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'structField') === null ? null : (\thrift\test\Foo::__fromShape($shape['structField'])),
      Shapes::idx($shape, 'optionalStructField') === null ? null : (\thrift\test\Foo::__fromShape($shape['optionalStructField'])),
      (new Vector($shape['structListField']))->map(
        $val0 ==> \thrift\test\Foo::__fromShape($val0),
      ),
      Shapes::idx($shape, 'optionalStructListField') === null ? null : ((new Vector($shape['optionalStructListField']))->map(
        $val1 ==> \thrift\test\Foo::__fromShape($val1),
      )),
      Shapes::idx($shape, 'unionField') === null ? null : (\thrift\test\Baz::__fromShape($shape['unionField'])),
      Shapes::idx($shape, 'optionalUnionField') === null ? null : (\thrift\test\Baz::__fromShape($shape['optionalUnionField'])),
      Shapes::idx($shape, 'adaptedStructField') === null ? null : (\thrift\test\DirectlyAdapted::__fromShape($shape['adaptedStructField'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'structField' => $this->structField?->__toShape(),
      'optionalStructField' => $this->optionalStructField?->__toShape(),
      'structListField' => $this->structListField->map(
        ($_val0) ==> $_val0->__toShape(),
      )
        |> vec($$),
      'optionalStructListField' => $this->optionalStructListField?->map(
        ($_val0) ==> $_val0->__toShape(),
      )
        |> $$ === null ? null : vec($$),
      'unionField' => $this->unionField?->__toShape(),
      'optionalUnionField' => $this->optionalUnionField?->__toShape(),
      'adaptedStructField' => $this->adaptedStructField?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'structField') !== null) {
      $_tmp0 = \json_encode(HH\FIXME\UNSAFE_CAST<mixed, \thrift\test\Foo>($parsed['structField']));
      $_tmp1 = \thrift\test\Foo::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->structField = $_tmp1;
    }
    if (idx($parsed, 'optionalStructField') !== null) {
      $_tmp2 = \json_encode(HH\FIXME\UNSAFE_CAST<mixed, \thrift\test\Foo>($parsed['optionalStructField']));
      $_tmp3 = \thrift\test\Foo::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->optionalStructField = $_tmp3;
    }
    if (idx($parsed, 'structListField') !== null) {
      $_json7 = HH\FIXME\UNSAFE_CAST<mixed, Vector<\thrift\test\FooWithAdapter>>($parsed['structListField']);
      $_container8 = Vector {};
      foreach($_json7 as $_key5 => $_value6) {
        $_elem9 = \thrift\test\Foo::withDefaultValues();
        $_tmp10 = \json_encode($_value6);
        $_tmp11 = \thrift\test\Foo::withDefaultValues();
        $_tmp11->readFromJson($_tmp10);
        $_elem9 = $_tmp11;
        $_container8 []= $_elem9;
      }
      $this->structListField = $_container8;
    }
    if (idx($parsed, 'optionalStructListField') !== null) {
      $_json15 = HH\FIXME\UNSAFE_CAST<mixed, Vector<\thrift\test\FooWithAdapter>>($parsed['optionalStructListField']);
      $_container16 = Vector {};
      foreach($_json15 as $_key13 => $_value14) {
        $_elem17 = \thrift\test\Foo::withDefaultValues();
        $_tmp18 = \json_encode($_value14);
        $_tmp19 = \thrift\test\Foo::withDefaultValues();
        $_tmp19->readFromJson($_tmp18);
        $_elem17 = $_tmp19;
        $_container16 []= $_elem17;
      }
      $this->optionalStructListField = $_container16;
    }
    if (idx($parsed, 'unionField') !== null) {
      $_tmp20 = \json_encode(HH\FIXME\UNSAFE_CAST<mixed, \thrift\test\Baz>($parsed['unionField']));
      $_tmp21 = \thrift\test\Baz::withDefaultValues();
      $_tmp21->readFromJson($_tmp20);
      $this->unionField = $_tmp21;
    }
    if (idx($parsed, 'optionalUnionField') !== null) {
      $_tmp22 = \json_encode(HH\FIXME\UNSAFE_CAST<mixed, \thrift\test\Baz>($parsed['optionalUnionField']));
      $_tmp23 = \thrift\test\Baz::withDefaultValues();
      $_tmp23->readFromJson($_tmp22);
      $this->optionalUnionField = $_tmp23;
    }
    if (idx($parsed, 'adaptedStructField') !== null) {
      $_tmp24 = \json_encode(HH\FIXME\UNSAFE_CAST<mixed, \thrift\test\DirectlyAdapted>($parsed['adaptedStructField']));
      $_tmp25 = \thrift\test\DirectlyAdapted::withDefaultValues();
      $_tmp25->readFromJson($_tmp24);
      $this->adaptedStructField = $_tmp25;
    }
  }

  private static function __hackAdapterTypeChecks()[]: void {
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, \thrift\test\Baz>();
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, \thrift\test\Foo>();
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, \thrift\test\FooWithAdapter>();
  }

}

/**
 * Original thrift struct:-
 * DirectlyAdapted
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/DirectlyAdapted'))>>
class DirectlyAdapted implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'field',
      'type' => \TType::I32,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'field' => 1,
  ];

  const type TConstructorShape = shape(
    ?'field' => ?int,
  );

  const type TShape = shape(
    'field' => int,
  );
  const int STRUCTURAL_ID = 7035499037608086885;
  /**
   * Original thrift field:-
   * 1: i32 field
   */
  public int $field;

  public function __construct(?int $field = null)[] {
    $this->field = $field ?? 0;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'field'),
    );
  }

  public function getName()[]: string {
    return 'DirectlyAdapted';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.DirectlyAdapted",
        "fields" => vec[
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "field",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
          shape(
            "name" => "::my::Adapter",
          )
        ),
        '\thrift\annotation\python\Adapter' => \thrift\annotation\python\Adapter::fromShape(
          shape(
            "name" => "my.module.Adapter",
            "typeHint" => "my.another.module.AdaptedType",
          )
        ),
      ],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['field'],
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'field' => $this->field,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'field') !== null) {
      $_tmp0 = (int)HH\FIXME\UNSAFE_CAST<mixed, int>($parsed['field']);
      if ($_tmp0 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->field = (int)$_tmp0;
      }
    }
  }

}

/**
 * Original thrift struct:-
 * StructWithFieldAdapter
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/StructWithFieldAdapter'))>>
class StructWithFieldAdapter implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'field',
      'type' => \TType::I32,
    ),
    2 => shape(
      'var' => 'shared_field',
      'type' => \TType::I32,
    ),
    3 => shape(
      'var' => 'opt_shared_field',
      'type' => \TType::I32,
    ),
    4 => shape(
      'var' => 'opt_boxed_field',
      'type' => \TType::I32,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'field' => 1,
    'shared_field' => 2,
    'opt_shared_field' => 3,
    'opt_boxed_field' => 4,
  ];

  const type TConstructorShape = shape(
    ?'field' => ?int,
    ?'shared_field' => ?int,
    ?'opt_shared_field' => ?int,
    ?'opt_boxed_field' => ?int,
  );

  const type TShape = shape(
    'field' => int,
    'shared_field' => int,
    ?'opt_shared_field' => ?int,
    ?'opt_boxed_field' => ?int,
  );
  const int STRUCTURAL_ID = 1940453594051247312;
  /**
   * Original thrift field:-
   * 1: i32 field
   */
  public int $field;
  /**
   * Original thrift field:-
   * 2: i32 shared_field
   */
  public int $shared_field;
  /**
   * Original thrift field:-
   * 3: i32 opt_shared_field
   */
  public ?int $opt_shared_field;
  /**
   * Original thrift field:-
   * 4: i32 opt_boxed_field
   */
  public ?int $opt_boxed_field;

  public function __construct(?int $field = null, ?int $shared_field = null, ?int $opt_shared_field = null, ?int $opt_boxed_field = null)[] {
    $this->field = $field ?? 0;
    $this->shared_field = $shared_field ?? 0;
    $this->opt_shared_field = $opt_shared_field;
    $this->opt_boxed_field = $opt_boxed_field;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'field'),
      Shapes::idx($shape, 'shared_field'),
      Shapes::idx($shape, 'opt_shared_field'),
      Shapes::idx($shape, 'opt_boxed_field'),
    );
  }

  public function getName()[]: string {
    return 'StructWithFieldAdapter';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.StructWithFieldAdapter",
        "fields" => vec[
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "field",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "shared_field",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "opt_shared_field",
              "is_optional" => true,
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "opt_boxed_field",
              "is_optional" => true,
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'field' => shape(
          'field' => dict[
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
            '\thrift\annotation\python\Adapter' => \thrift\annotation\python\Adapter::fromShape(
              shape(
                "name" => "my.Adapter1",
                "typeHint" => "my.AdaptedType1",
              )
            ),
          ],
          'type' => dict[],
        ),
        'shared_field' => shape(
          'field' => dict[
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
            '\thrift\annotation\cpp\Ref' => \thrift\annotation\cpp\Ref::fromShape(
              shape(
                "type" => \thrift\annotation\cpp\RefType::Shared,
              )
            ),
          ],
          'type' => dict[],
        ),
        'opt_shared_field' => shape(
          'field' => dict[
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
            '\thrift\annotation\cpp\Ref' => \thrift\annotation\cpp\Ref::fromShape(
              shape(
                "type" => \thrift\annotation\cpp\RefType::Shared,
              )
            ),
          ],
          'type' => dict[],
        ),
        'opt_boxed_field' => shape(
          'field' => dict[
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
            '\thrift\annotation\Box' => \thrift\annotation\Box::fromShape(
              shape(
              )
            ),
          ],
          'type' => dict[],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['field'],
      $shape['shared_field'],
      Shapes::idx($shape, 'opt_shared_field'),
      Shapes::idx($shape, 'opt_boxed_field'),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'field' => $this->field,
      'shared_field' => $this->shared_field,
      'opt_shared_field' => $this->opt_shared_field,
      'opt_boxed_field' => $this->opt_boxed_field,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'field') !== null) {
      $_tmp0 = (int)HH\FIXME\UNSAFE_CAST<mixed, int>($parsed['field']);
      if ($_tmp0 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->field = (int)$_tmp0;
      }
    }
    if (idx($parsed, 'shared_field') !== null) {
      $_tmp1 = (int)HH\FIXME\UNSAFE_CAST<mixed, int>($parsed['shared_field']);
      if ($_tmp1 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->shared_field = (int)$_tmp1;
      }
    }
    if (idx($parsed, 'opt_shared_field') !== null) {
      $_tmp2 = (int)HH\FIXME\UNSAFE_CAST<mixed, int>($parsed['opt_shared_field']);
      if ($_tmp2 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->opt_shared_field = (int)$_tmp2;
      }
    }
    if (idx($parsed, 'opt_boxed_field') !== null) {
      $_tmp3 = (int)HH\FIXME\UNSAFE_CAST<mixed, int>($parsed['opt_boxed_field']);
      if ($_tmp3 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->opt_boxed_field = (int)$_tmp3;
      }
    }
  }

}

/**
 * Original thrift struct:-
 * TerseAdaptedFields
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/TerseAdaptedFields'))>>
class TerseAdaptedFields implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'int_field',
      'is_terse' => true,
      'type' => \TType::I32,
    ),
    2 => shape(
      'var' => 'string_field',
      'is_terse' => true,
      'type' => \TType::STRING,
    ),
    3 => shape(
      'var' => 'set_field',
      'is_terse' => true,
      'type' => \TType::SET,
      'etype' => \TType::I32,
      'elem' => shape(
        'type' => \TType::I32,
      ),
      'format' => 'collection',
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'int_field' => 1,
    'string_field' => 2,
    'set_field' => 3,
  ];

  const type TConstructorShape = shape(
    ?'int_field' => ?int,
    ?'string_field' => ?string,
    ?'set_field' => ?Set<int>,
  );

  const type TShape = shape(
    'int_field' => int,
    'string_field' => string,
    'set_field' => dict<int, bool>,
  );
  const int STRUCTURAL_ID = 4698812981420911373;
  /**
   * Original thrift field:-
   * 1: i32 int_field
   */
  public int $int_field;
  /**
   * Original thrift field:-
   * 2: string string_field
   */
  public string $string_field;
  /**
   * Original thrift field:-
   * 3: set<i32> set_field
   */
  public Set<int> $set_field;

  public function __construct(?int $int_field = null, ?string $string_field = null, ?Set<int> $set_field = null)[] {
    $this->int_field = $int_field ?? 0;
    $this->string_field = $string_field ?? '';
    $this->set_field = $set_field ?? Set {};
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'int_field'),
      Shapes::idx($shape, 'string_field'),
      Shapes::idx($shape, 'set_field'),
    );
  }

  public function getName()[]: string {
    return 'TerseAdaptedFields';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.TerseAdaptedFields",
        "fields" => vec[
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "int_field",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "string_field",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_set" => \tmeta_ThriftSetType::fromShape(
                    shape(
                      "valueType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "set_field",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'int_field' => shape(
          'field' => dict[
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
            '\thrift\annotation\TerseWrite' => \thrift\annotation\TerseWrite::fromShape(
              shape(
              )
            ),
          ],
          'type' => dict[],
        ),
        'string_field' => shape(
          'field' => dict[
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
            '\thrift\annotation\TerseWrite' => \thrift\annotation\TerseWrite::fromShape(
              shape(
              )
            ),
          ],
          'type' => dict[],
        ),
        'set_field' => shape(
          'field' => dict[
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter1",
              )
            ),
            '\thrift\annotation\TerseWrite' => \thrift\annotation\TerseWrite::fromShape(
              shape(
              )
            ),
          ],
          'type' => dict[],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['int_field'],
      $shape['string_field'],
      new Set(Keyset\keys($shape['set_field'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'int_field' => $this->int_field,
      'string_field' => $this->string_field,
      'set_field' => ThriftUtil::toDArray(Dict\fill_keys($this->set_field->toValuesArray(), true), static::class),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'int_field') !== null) {
      $_tmp0 = (int)HH\FIXME\UNSAFE_CAST<mixed, int>($parsed['int_field']);
      if ($_tmp0 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->int_field = (int)$_tmp0;
      }
    }
    if (idx($parsed, 'string_field') !== null) {
      $this->string_field = HH\FIXME\UNSAFE_CAST<mixed, string>($parsed['string_field']);
    }
    if (idx($parsed, 'set_field') !== null) {
      $_json4 = HH\FIXME\UNSAFE_CAST<mixed, Set<int>>($parsed['set_field']);
      $_container5 = Set {};
      foreach($_json4 as $_key2 => $_value3) {
        $_elem6 = 0;
        $_tmp7 = (int)$_value3;
        if ($_tmp7 > 0x7fffffff) {
          throw new \TProtocolException("number exceeds limit in field");
        } else {
          $_elem6 = (int)$_tmp7;
        }
        $_container5->add($_elem6);
      }
      $this->set_field = $_container5;
    }
  }

}

/**
 * Original thrift struct:-
 * B
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/B'))>>
class B implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'a',
      'type' => \TType::STRUCT,
      'class' => \thrift\test\A::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'a' => 1,
  ];

  const type TConstructorShape = shape(
    ?'a' => ?\thrift\test\A,
  );

  const type TShape = shape(
    ?'a' => ?\thrift\test\A::TShape,
  );
  const int STRUCTURAL_ID = 1135805466744601735;
  /**
   * Original thrift field:-
   * 1: struct module.A a
   */
  public ?\thrift\test\A $a;

  public function __construct(?\thrift\test\A $a = null)[] {
    $this->a = $a;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'a'),
    );
  }

  public function getName()[]: string {
    return 'B';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.B",
        "fields" => vec[
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.AdaptedA",
                      "underlyingType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                            shape(
                              "name" => "module.AdaptedA",
                              "underlyingType" => \tmeta_ThriftType::fromShape(
                                shape(
                                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                                    shape(
                                      "name" => "module.A",
                                      "underlyingType" => \tmeta_ThriftType::fromShape(
                                        shape(
                                          "t_struct" => \tmeta_ThriftStructType::fromShape(
                                            shape(
                                              "name" => "module.A",
                                            )
                                          ),
                                        )
                                      ),
                                    )
                                  ),
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "a",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'a' => shape(
          'field' => dict[],
          'type' => dict[
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter",
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'a') === null ? null : (\thrift\test\A::__fromShape($shape['a'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'a' => $this->a?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'a') !== null) {
      $_tmp0 = \json_encode(HH\FIXME\UNSAFE_CAST<mixed, \thrift\test\A>($parsed['a']));
      $_tmp1 = \thrift\test\A::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->a = $_tmp1;
    }
  }

}

/**
 * Original thrift struct:-
 * A
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/A'))>>
class A implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const type TShape = shape(
  );
  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct()[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'A';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.A",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

  }

}

/**
 * Original thrift struct:-
 * Config
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/Config'))>>
class Config implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'path',
      'type' => \TType::STRING,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'path' => 1,
  ];

  const type TConstructorShape = shape(
    ?'path' => ?string,
  );

  const type TShape = shape(
    'path' => string,
  );
  const int STRUCTURAL_ID = 4266277309871357727;
  /**
   * Original thrift field:-
   * 1: string path
   */
  public string $path;

  public function __construct(?string $path = null)[] {
    $this->path = $path ?? '';
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'path'),
    );
  }

  public function getName()[]: string {
    return 'Config';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.Config",
        "fields" => vec[
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "path",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
          shape(
            "name" => "MyVarAdapter",
          )
        ),
        '\thrift\annotation\python\Adapter' => \thrift\annotation\python\Adapter::fromShape(
          shape(
            "name" => "my.ConfigAdapter",
            "typeHint" => "my.ConfiguredVar[]",
          )
        ),
        '\thrift\annotation\Transitive' => \thrift\annotation\Transitive::fromShape(
          shape(
          )
        ),
        '\thrift\annotation\Experimental' => \thrift\annotation\Experimental::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['path'],
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'path' => $this->path,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'path') !== null) {
      $this->path = HH\FIXME\UNSAFE_CAST<mixed, string>($parsed['path']);
    }
  }

}

/**
 * Original thrift struct:-
 * MyStruct
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/MyStruct'))>>
class MyStruct implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'field',
      'type' => \TType::I32,
    ),
    2 => shape(
      'var' => 'set_string',
      'adapter' => \Adapter2::class,
      'type' => \TType::SET,
      'etype' => \TType::STRING,
      'elem' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'field' => 1,
    'set_string' => 2,
  ];

  const type TConstructorShape = shape(
    ?'field' => ?int,
    ?'set_string' => ?\thrift\test\SetWithAdapter,
  );

  const type TShape = shape(
    'field' => int,
    'set_string' => \thrift\test\SetWithAdapter,
  );
  const int STRUCTURAL_ID = 5903652997290634247;
  /**
   * Original thrift field:-
   * 1: i32 field
   */
  public int $field;
  /**
   * Original thrift field:-
   * 2: set<string> set_string
   */
  public \thrift\test\SetWithAdapter $set_string;

  public function __construct(?int $field = null, ?\thrift\test\SetWithAdapter $set_string = null)[] {
    $this->field = $field ?? 0;
    $this->set_string = $set_string ?? \Adapter2::fromThrift(Set {});
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'field'),
      Shapes::idx($shape, 'set_string'),
    );
  }

  public function getName()[]: string {
    return 'MyStruct';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyStruct",
        "fields" => vec[
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "field",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => \tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.SetWithAdapter",
                      "underlyingType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_set" => \tmeta_ThriftSetType::fromShape(
                            shape(
                              "valueType" => \tmeta_ThriftType::fromShape(
                                shape(
                                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "set_string",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'set_string' => shape(
          'field' => dict[],
          'type' => dict[
            '\thrift\annotation\hack\Adapter' => \thrift\annotation\hack\Adapter::fromShape(
              shape(
                "name" => "\Adapter2",
              )
            ),
            '\thrift\annotation\cpp\Adapter' => \thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::my::Adapter2",
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['field'],
      new Set(Keyset\keys($shape['set_string'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'field' => $this->field,
      'set_string' => ThriftUtil::toDArray(Dict\fill_keys($this->set_string->toValuesArray(), true), static::class),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'field') !== null) {
      $_tmp0 = (int)HH\FIXME\UNSAFE_CAST<mixed, int>($parsed['field']);
      if ($_tmp0 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->field = (int)$_tmp0;
      }
    }
    if (idx($parsed, 'set_string') !== null) {
      $_json4 = HH\FIXME\UNSAFE_CAST<mixed, \thrift\test\SetWithAdapter>($parsed['set_string']);
      $_container5 = Set {};
      foreach($_json4 as $_key2 => $_value3) {
        $_elem6 = '';
        $_elem6 = $_value3;
        $_container5->add($_elem6);
      }
      $this->set_string = $_container5;
    }
  }

  private static function __hackAdapterTypeChecks()[]: void {
    \ThriftUtil::requireSameType<\Adapter2::TThriftType, \thrift\test\SetWithAdapter>();
  }

}

