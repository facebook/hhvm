/*
 *  Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */
#include "CarbonTestMessages.h"

namespace carbon {
namespace test {

constexpr const char* const TestRequest::name;

constexpr const char* const TestRequestStringKey::name;

std::string enumEnumUInt32ToString(EnumUInt32 val) {
  switch (val) {
    case EnumUInt32::AAA:
      return "AAA";
    case EnumUInt32::BBB:
      return "BBB";
    case EnumUInt32::CCC:
      return "CCC";
  }
  return "<INVALID_OPTION>";
}

std::string enumEnumUInt16ToString(EnumUInt16 val) {
  switch (val) {
    case EnumUInt16::AAA:
      return "AAA";
    case EnumUInt16::BBB:
      return "BBB";
    case EnumUInt16::CCC:
      return "CCC";
  }
  return "<INVALID_OPTION>";
}

std::string enumEnumUInt8ToString(EnumUInt8 val) {
  switch (val) {
    case EnumUInt8::AAA:
      return "AAA";
    case EnumUInt8::BBB:
      return "BBB";
    case EnumUInt8::CCC:
      return "CCC";
  }
  return "<INVALID_OPTION>";
}

std::string enumEnumInt32ToString(EnumInt32 val) {
  switch (val) {
    case EnumInt32::AAA:
      return "AAA";
    case EnumInt32::BBB:
      return "BBB";
    case EnumInt32::CCC:
      return "CCC";
  }
  return "<INVALID_OPTION>";
}

std::string enumEnumInt16ToString(EnumInt16 val) {
  switch (val) {
    case EnumInt16::AAA:
      return "AAA";
    case EnumInt16::BBB:
      return "BBB";
    case EnumInt16::CCC:
      return "CCC";
  }
  return "<INVALID_OPTION>";
}

std::string enumEnumInt8ToString(EnumInt8 val) {
  switch (val) {
    case EnumInt8::AAA:
      return "AAA";
    case EnumInt8::BBB:
      return "BBB";
    case EnumInt8::CCC:
      return "CCC";
  }
  return "<INVALID_OPTION>";
}

} // namespace test
} // namespace carbon
