/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct field;
struct nested;
struct message;
struct int_value;
struct struct_value;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nested
#define APACHE_THRIFT_ACCESSOR_nested
APACHE_THRIFT_DEFINE_ACCESSOR(nested);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_int_value
#define APACHE_THRIFT_ACCESSOR_int_value
APACHE_THRIFT_DEFINE_ACCESSOR(int_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_struct_value
#define APACHE_THRIFT_ACCESSOR_struct_value
APACHE_THRIFT_DEFINE_ACCESSOR(struct_value);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
// END declare_enums
// BEGIN forward_declare
namespace cpp2_struct_footprint {
class SimpleStruct;
class ComplexStruct;
class Struct1;
class Struct2;
class Struct3;
class Struct4;
class Struct5;
class ExStruct;
class TestUnion;
} // namespace cpp2_struct_footprint
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2_struct_footprint {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

/** Glean {"file": "thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift", "name": "I32Alias", "kind": "typedef" } */
using I32Alias = SimpleStruct;
/** Glean {"file": "thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift", "name": "MyInt", "kind": "typedef" } */
using MyInt = ::std::int32_t;
/** Glean {"file": "thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift", "name": "MyStruct", "kind": "typedef" } */
using MyStruct = ::cpp2_struct_footprint::SimpleStruct;
/** Glean {"file": "thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift", "name": "StructList", "kind": "typedef" } */
using StructList = ::std::vector<::cpp2_struct_footprint::SimpleStruct>;
/** Glean {"file": "thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift", "name": "StructMap", "kind": "typedef" } */
using StructMap = ::std::map<::std::string, ::cpp2_struct_footprint::SimpleStruct>;
/** Glean {"file": "thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift", "name": "StructSet", "kind": "typedef" } */
using StructSet = ::std::set<::cpp2_struct_footprint::SimpleStruct>;
/** Glean {"file": "thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift", "name": "IOBuf", "kind": "typedef" } */
using IOBuf = folly::IOBuf;
/** Glean {"file": "thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift", "name": "IOBufPtr", "kind": "typedef" } */
using IOBufPtr = std::unique_ptr<folly::IOBuf>;

/** Glean {"file": "thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift", "name": "SimpleStruct", "kind": "struct" } */
class SimpleStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SimpleStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  SimpleStruct() :
      __fbthrift_field_field() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SimpleStruct(apache::thrift::FragileConstructor, ::std::int32_t field__arg);

  SimpleStruct(SimpleStruct&&) = default;

  SimpleStruct(const SimpleStruct&) = default;


  SimpleStruct& operator=(SimpleStruct&&) = default;

  SimpleStruct& operator=(const SimpleStruct&) = default;
 private:
  ::std::int32_t __fbthrift_field_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SimpleStruct&) const;
  bool operator<(const SimpleStruct&) const;

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field().value()` instead of `FOO.get_field()`")]]
  ::std::int32_t get_field() const;

  /** Glean { "field": "field" } */
  [[deprecated("Use `FOO.field() = BAR` instead of `FOO.set_field(BAR)`")]]
  ::std::int32_t& set_field(::std::int32_t field_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SimpleStruct>;
  friend void swap(SimpleStruct& a, SimpleStruct& b);
};

template <class Protocol_>
unsigned long SimpleStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift", "name": "ComplexStruct", "kind": "struct" } */
class ComplexStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::nested
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::cpp2_struct_footprint::SimpleStruct>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ComplexStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ComplexStruct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ComplexStruct(apache::thrift::FragileConstructor, ::cpp2_struct_footprint::SimpleStruct nested__arg);

  ComplexStruct(ComplexStruct&&) = default;

  ComplexStruct(const ComplexStruct&) = default;


  ComplexStruct& operator=(ComplexStruct&&) = default;

  ComplexStruct& operator=(const ComplexStruct&) = default;
 private:
  ::cpp2_struct_footprint::SimpleStruct __fbthrift_field_nested;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ComplexStruct&) const;
  bool operator<(const ComplexStruct&) const;

  /** Glean { "field": "nested" } */
  template <typename..., typename fbthrift_T = ::cpp2_struct_footprint::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nested_ref() const& {
    return {this->__fbthrift_field_nested, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "nested" } */
  template <typename..., typename fbthrift_T = ::cpp2_struct_footprint::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nested_ref() & {
    return {this->__fbthrift_field_nested, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "nested" } */
  template <typename..., typename fbthrift_T = ::cpp2_struct_footprint::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nested_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nested), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "nested" } */
  template <typename..., typename fbthrift_T = ::cpp2_struct_footprint::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nested() const& {
    return {this->__fbthrift_field_nested, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "nested" } */
  template <typename..., typename fbthrift_T = ::cpp2_struct_footprint::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nested() & {
    return {this->__fbthrift_field_nested, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "nested" } */
  template <typename..., typename fbthrift_T = ::cpp2_struct_footprint::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nested() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nested), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "nested" } */
  [[deprecated("Use `FOO.nested().value()` instead of `FOO.get_nested()`")]]
  const ::cpp2_struct_footprint::SimpleStruct& get_nested() const&;

  /** Glean { "field": "nested" } */
  [[deprecated("Use `FOO.nested().value()` instead of `FOO.get_nested()`")]]
  ::cpp2_struct_footprint::SimpleStruct get_nested() &&;

  /** Glean { "field": "nested" } */
  template <typename T_ComplexStruct_nested_struct_setter = ::cpp2_struct_footprint::SimpleStruct>
  [[deprecated("Use `FOO.nested() = BAR` instead of `FOO.set_nested(BAR)`")]]
  ::cpp2_struct_footprint::SimpleStruct& set_nested(T_ComplexStruct_nested_struct_setter&& nested_) {
    nested_ref() = std::forward<T_ComplexStruct_nested_struct_setter>(nested_);
    return __fbthrift_field_nested;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ComplexStruct>;
  friend void swap(ComplexStruct& a, ComplexStruct& b);
};

template <class Protocol_>
unsigned long ComplexStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift", "name": "Struct1", "kind": "struct" } */
class Struct1 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Struct1;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Struct1() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Struct1(apache::thrift::FragileConstructor);

  Struct1(Struct1&&) = default;

  Struct1(const Struct1&) = default;


  Struct1& operator=(Struct1&&) = default;

  Struct1& operator=(const Struct1&) = default;

 public:

  bool operator==(const Struct1&) const;
  bool operator<(const Struct1&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Struct1>;
  friend void swap(Struct1& a, Struct1& b);
};

template <class Protocol_>
unsigned long Struct1::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift", "name": "Struct2", "kind": "struct" } */
class Struct2 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Struct2;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Struct2() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Struct2(apache::thrift::FragileConstructor);

  Struct2(Struct2&&) = default;

  Struct2(const Struct2&) = default;


  Struct2& operator=(Struct2&&) = default;

  Struct2& operator=(const Struct2&) = default;

 public:

  bool operator==(const Struct2&) const;
  bool operator<(const Struct2&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Struct2>;
  friend void swap(Struct2& a, Struct2& b);
};

template <class Protocol_>
unsigned long Struct2::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift", "name": "Struct3", "kind": "struct" } */
class Struct3 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Struct3;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Struct3() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Struct3(apache::thrift::FragileConstructor);

  Struct3(Struct3&&) = default;

  Struct3(const Struct3&) = default;


  Struct3& operator=(Struct3&&) = default;

  Struct3& operator=(const Struct3&) = default;

 public:

  bool operator==(const Struct3&) const;
  bool operator<(const Struct3&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Struct3>;
  friend void swap(Struct3& a, Struct3& b);
};

template <class Protocol_>
unsigned long Struct3::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift", "name": "Struct4", "kind": "struct" } */
class Struct4 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Struct4;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Struct4() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Struct4(apache::thrift::FragileConstructor);

  Struct4(Struct4&&) = default;

  Struct4(const Struct4&) = default;


  Struct4& operator=(Struct4&&) = default;

  Struct4& operator=(const Struct4&) = default;

 public:

  bool operator==(const Struct4&) const;
  bool operator<(const Struct4&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Struct4>;
  friend void swap(Struct4& a, Struct4& b);
};

template <class Protocol_>
unsigned long Struct4::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift", "name": "Struct5", "kind": "struct" } */
class Struct5 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Struct5;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Struct5() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Struct5(apache::thrift::FragileConstructor);

  Struct5(Struct5&&) = default;

  Struct5(const Struct5&) = default;


  Struct5& operator=(Struct5&&) = default;

  Struct5& operator=(const Struct5&) = default;

 public:

  bool operator==(const Struct5&) const;
  bool operator<(const Struct5&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Struct5>;
  friend void swap(Struct5& a, Struct5& b);
};

template <class Protocol_>
unsigned long Struct5::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift", "name": "ExStruct", "kind": "exception" } */
class FOLLY_EXPORT ExStruct : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::message
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::SAFE;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::SERVER;

 public:
  using __fbthrift_cpp2_type = ExStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ExStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ExStruct(apache::thrift::FragileConstructor, ::std::string message__arg);

  ExStruct(ExStruct&&) noexcept;

  ExStruct(const ExStruct& src);


  ExStruct& operator=(ExStruct&&) noexcept;
  ExStruct& operator=(const ExStruct& src);

  ~ExStruct() override;

 private:
  ::std::string __fbthrift_field_message;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ExStruct&) const;
  bool operator<(const ExStruct&) const;

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> message_ref() const& {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> message_ref() & {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> message_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_message), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> message() const& {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> message() & {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> message() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_message), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  [[deprecated("Use `FOO.message().value()` instead of `FOO.get_message()`")]]
  const ::std::string& get_message() const& {
    return __fbthrift_field_message;
  }

  /** Glean { "field": "message" } */
  [[deprecated("Use `FOO.message().value()` instead of `FOO.get_message()`")]]
  ::std::string get_message() && {
    return static_cast<::std::string&&>(__fbthrift_field_message);
  }

  /** Glean { "field": "message" } */
  template <typename T_ExStruct_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.message() = BAR` instead of `FOO.set_message(BAR)`")]]
  ::std::string& set_message(T_ExStruct_message_struct_setter&& message_) {
    message_ref() = std::forward<T_ExStruct_message_struct_setter>(message_);
    return __fbthrift_field_message;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2_struct_footprint::ExStruct";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ExStruct>;
  friend void swap(ExStruct& a, ExStruct& b);
};

template <class Protocol_>
unsigned long ExStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift", "name": "TestUnion", "kind": "union" } */
class TestUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::int_value,
    ::apache::thrift::ident::struct_value
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::struct_t<::cpp2_struct_footprint::SimpleStruct>
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TestUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
    int_value = 1,
    struct_value = 2,
  } ;

  TestUnion()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  TestUnion(TestUnion&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::int_value:
      {
        set_int_value(std::move(rhs.value_.int_value));
        break;
      }
      case Type::struct_value:
      {
        set_struct_value(std::move(rhs.value_.struct_value));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  TestUnion(const TestUnion& rhs);

  TestUnion& operator=(TestUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::int_value:
      {
        set_int_value(std::move(rhs.value_.int_value));
        break;
      }
      case Type::struct_value:
      {
        set_struct_value(std::move(rhs.value_.struct_value));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  TestUnion& operator=(const TestUnion& rhs);

  ~TestUnion();

  union storage_type {
    ::std::int32_t int_value;
    ::cpp2_struct_footprint::SimpleStruct struct_value;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const TestUnion&) const;
  bool operator<(const TestUnion&) const;

  /** Glean { "field": "int_value" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::int32_t& set_int_value(::std::int32_t t = ::std::int32_t()) {
    using T0 = ::std::int32_t;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::int_value);
    ::new (std::addressof(value_.int_value)) T(t);
    return value_.int_value;
  }


  /** Glean { "field": "struct_value" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::cpp2_struct_footprint::SimpleStruct& set_struct_value(::cpp2_struct_footprint::SimpleStruct const &t) {
    using T0 = ::cpp2_struct_footprint::SimpleStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::struct_value);
    ::new (std::addressof(value_.struct_value)) T(t);
    return value_.struct_value;
  }

  /** Glean { "field": "struct_value" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::cpp2_struct_footprint::SimpleStruct& set_struct_value(::cpp2_struct_footprint::SimpleStruct&& t) {
    using T0 = ::cpp2_struct_footprint::SimpleStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::struct_value);
    ::new (std::addressof(value_.struct_value)) T(std::move(t));
    return value_.struct_value;
  }

  /** Glean { "field": "struct_value" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2_struct_footprint::SimpleStruct, T...>> ::cpp2_struct_footprint::SimpleStruct& set_struct_value(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::struct_value);
    ::new (std::addressof(value_.struct_value)) ::cpp2_struct_footprint::SimpleStruct(std::forward<T>(t)...);
    return value_.struct_value;
  }

  /** Glean { "field": "int_value" } */
  ::std::int32_t const& get_int_value() const {
    if (getType() != Type::int_value) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.int_value;
  }

  /** Glean { "field": "struct_value" } */
  ::cpp2_struct_footprint::SimpleStruct const& get_struct_value() const {
    if (getType() != Type::struct_value) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.struct_value;
  }

  ::std::int32_t& mutable_int_value() {
    assert(getType() == Type::int_value);
    return value_.int_value;
  }

  ::cpp2_struct_footprint::SimpleStruct& mutable_struct_value() {
    assert(getType() == Type::struct_value);
    return value_.struct_value;
  }

  template <typename..., typename T = ::std::int32_t>
  T move_int_value() {
    assert(getType() == Type::int_value);
    return std::move(value_.int_value);
  }

  template <typename..., typename T = ::cpp2_struct_footprint::SimpleStruct>
  T move_struct_value() {
    assert(getType() == Type::struct_value);
    return std::move(value_.struct_value);
  }

  /** Glean { "field": "int_value" } */
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> int_value_ref() const& {
    return {value_.int_value, fbthrift_type_, folly::to_underlying(Type::int_value), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "int_value" } */
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> int_value_ref() & {
    return {value_.int_value, fbthrift_type_, folly::to_underlying(Type::int_value), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "int_value" } */
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> int_value_ref() && {
    return {std::move(value_.int_value), fbthrift_type_, folly::to_underlying(Type::int_value), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "int_value" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::std::int32_t&> int_value() const& {
    return {value_.int_value, fbthrift_type_, folly::to_underlying(Type::int_value), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "int_value" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::int32_t&> int_value() & {
    return {value_.int_value, fbthrift_type_, folly::to_underlying(Type::int_value), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "int_value" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::int32_t&&> int_value() && {
    return {std::move(value_.int_value), fbthrift_type_, folly::to_underlying(Type::int_value), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "struct_value" } */
  template <typename..., typename T = ::cpp2_struct_footprint::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> struct_value_ref() const& {
    return {value_.struct_value, fbthrift_type_, folly::to_underlying(Type::struct_value), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "struct_value" } */
  template <typename..., typename T = ::cpp2_struct_footprint::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> struct_value_ref() & {
    return {value_.struct_value, fbthrift_type_, folly::to_underlying(Type::struct_value), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "struct_value" } */
  template <typename..., typename T = ::cpp2_struct_footprint::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> struct_value_ref() && {
    return {std::move(value_.struct_value), fbthrift_type_, folly::to_underlying(Type::struct_value), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "struct_value" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::cpp2_struct_footprint::SimpleStruct&> struct_value() const& {
    return {value_.struct_value, fbthrift_type_, folly::to_underlying(Type::struct_value), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "struct_value" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2_struct_footprint::SimpleStruct&> struct_value() & {
    return {value_.struct_value, fbthrift_type_, folly::to_underlying(Type::struct_value), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "struct_value" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2_struct_footprint::SimpleStruct&&> struct_value() && {
    return {std::move(value_.struct_value), fbthrift_type_, folly::to_underlying(Type::struct_value), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TestUnion>;
  friend void swap(TestUnion& a, TestUnion& b);
};

template <class Protocol_>
unsigned long TestUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace cpp2_struct_footprint

namespace apache::thrift {

template <> struct TEnumDataStorage<::cpp2_struct_footprint::TestUnion::Type>;

template <> struct TEnumTraits<::cpp2_struct_footprint::TestUnion::Type> {
  using type = ::cpp2_struct_footprint::TestUnion::Type;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static constexpr type min() { return type::int_value; }
  static constexpr type max() { return type::struct_value; }
};
} // namespace apache::thrift

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::cpp2_struct_footprint::SimpleStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -8308740160129079542;
  static constexpr ::std::string_view definitionKey = {"\x63\x20\xc5\x8f\x02\xc5\x66\x3b\x2c\xbc\x84\x70\x7b\x6a\x4e\xb5", 16};
};
template <> struct TSchemaAssociation<::cpp2_struct_footprint::ComplexStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -8308740160129079542;
  static constexpr ::std::string_view definitionKey = {"\xad\x12\x75\x46\xfc\xce\x6d\xab\xd4\xbb\xb4\xa5\xbc\x8b\xb2\x29", 16};
};
template <> struct TSchemaAssociation<::cpp2_struct_footprint::Struct1, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -8308740160129079542;
  static constexpr ::std::string_view definitionKey = {"\x30\x5e\x02\xc5\xd0\x83\x45\x9a\xb7\x0b\xe1\xfe\x2a\x39\x92\x04", 16};
};
template <> struct TSchemaAssociation<::cpp2_struct_footprint::Struct2, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -8308740160129079542;
  static constexpr ::std::string_view definitionKey = {"\x13\xae\x17\x93\xab\x67\x68\x53\xc0\x3d\x6a\xc6\xcb\x0c\x4a\x69", 16};
};
template <> struct TSchemaAssociation<::cpp2_struct_footprint::Struct3, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -8308740160129079542;
  static constexpr ::std::string_view definitionKey = {"\xb2\x69\x25\x95\x77\x7f\xae\xd6\xb5\x94\x6b\x09\x0f\xa4\x27\x7a", 16};
};
template <> struct TSchemaAssociation<::cpp2_struct_footprint::Struct4, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -8308740160129079542;
  static constexpr ::std::string_view definitionKey = {"\x52\x65\xc5\x37\xd3\xf1\x81\xeb\xff\x16\x20\x2a\x71\x37\x52\xef", 16};
};
template <> struct TSchemaAssociation<::cpp2_struct_footprint::Struct5, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -8308740160129079542;
  static constexpr ::std::string_view definitionKey = {"\x0c\xcd\x71\x47\xb4\x23\xb5\x72\xd9\x77\x69\xb6\xdb\xaa\xc9\xb3", 16};
};
template <> struct TSchemaAssociation<::cpp2_struct_footprint::ExStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -8308740160129079542;
  static constexpr ::std::string_view definitionKey = {"\xe8\xdb\x37\xc8\x22\x28\xcb\xf2\x75\x94\x6f\xb6\x17\xf2\x3a\x25", 16};
};
template <> struct TSchemaAssociation<::cpp2_struct_footprint::TestUnion, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -8308740160129079542;
  static constexpr ::std::string_view definitionKey = {"\xe4\x87\xbf\x19\x2a\x32\x77\xc5\x11\x30\xb7\xaf\xe8\x8e\xc6\xfd", 16};
};
} // namespace apache::thrift::detail
