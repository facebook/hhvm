/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/mixin/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct field1;
struct m1;
struct field2;
struct field3;
struct field4;
struct m2;
struct m3;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_m1
#define APACHE_THRIFT_ACCESSOR_m1
APACHE_THRIFT_DEFINE_ACCESSOR(m1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field4
#define APACHE_THRIFT_ACCESSOR_field4
APACHE_THRIFT_DEFINE_ACCESSOR(field4);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_m2
#define APACHE_THRIFT_ACCESSOR_m2
APACHE_THRIFT_DEFINE_ACCESSOR(m2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_m3
#define APACHE_THRIFT_ACCESSOR_m3
APACHE_THRIFT_DEFINE_ACCESSOR(m3);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class Mixin1;
class Mixin2;
class Mixin3Base;
class Foo;
} // namespace cpp2
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

/** Glean {"file": "thrift/compiler/test/fixtures/mixin/src/module.thrift", "name": "Mixin3", "kind": "typedef" } */
using Mixin3 = ::cpp2::Mixin3Base;

/** Glean {"file": "thrift/compiler/test/fixtures/mixin/src/module.thrift", "name": "Mixin1", "kind": "struct" } */
class Mixin1 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field1
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Mixin1;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Mixin1();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Mixin1(apache::thrift::FragileConstructor, ::std::string field1__arg);

  Mixin1(Mixin1&&) noexcept;

  Mixin1(const Mixin1& src);


  Mixin1& operator=(Mixin1&&) noexcept;
  Mixin1& operator=(const Mixin1& src);

  ~Mixin1();

 private:
  ::std::string __fbthrift_field_field1;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Mixin1&) const;
  bool operator<(const Mixin1&) const;

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field1_ref() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field1_ref() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field1_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field1() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field1() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field1() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  [[deprecated("Use `FOO.field1().value()` instead of `FOO.get_field1()`")]]
  const ::std::string& get_field1() const& {
    return __fbthrift_field_field1;
  }

  /** Glean { "field": "field1" } */
  [[deprecated("Use `FOO.field1().value()` instead of `FOO.get_field1()`")]]
  ::std::string get_field1() && {
    return static_cast<::std::string&&>(__fbthrift_field_field1);
  }

  /** Glean { "field": "field1" } */
  template <typename T_Mixin1_field1_struct_setter = ::std::string>
  [[deprecated("Use `FOO.field1() = BAR` instead of `FOO.set_field1(BAR)`")]]
  ::std::string& set_field1(T_Mixin1_field1_struct_setter&& field1_) {
    field1_ref() = std::forward<T_Mixin1_field1_struct_setter>(field1_);
    return __fbthrift_field_field1;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Mixin1>;
  friend void swap(Mixin1& a, Mixin1& b);
};

template <class Protocol_>
unsigned long Mixin1::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/mixin/src/module.thrift", "name": "Mixin2", "kind": "struct" } */
class Mixin2 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::m1,
    ::apache::thrift::ident::field2
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::cpp2::Mixin1>,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Mixin2;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Mixin2();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Mixin2(apache::thrift::FragileConstructor, ::cpp2::Mixin1 m1__arg, ::std::string field2__arg);

  Mixin2(Mixin2&&) noexcept;

  Mixin2(const Mixin2& src);


  Mixin2& operator=(Mixin2&&) noexcept;
  Mixin2& operator=(const Mixin2& src);

  ~Mixin2();

 private:
  ::cpp2::Mixin1 __fbthrift_field_m1;
 private:
  ::std::string __fbthrift_field_field2;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Mixin2&) const;
  bool operator<(const Mixin2&) const;

  /** Glean { "field": "m1" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin1>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> m1_ref() const& {
    return {this->__fbthrift_field_m1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "m1" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin1>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> m1_ref() & {
    return {this->__fbthrift_field_m1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "m1" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin1>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> m1_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_m1), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "m1" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin1>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> m1() const& {
    return {this->__fbthrift_field_m1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "m1" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin1>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> m1() & {
    return {this->__fbthrift_field_m1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "m1" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin1>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> m1() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_m1), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field2_ref() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field2_ref() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field2_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field2() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field2() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field2() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }
  FOLLY_ERASE auto field1() &           { return m1_ref()->field1_ref(); }
  FOLLY_ERASE auto field1() const&      { return m1_ref()->field1_ref(); }
  FOLLY_ERASE auto field1() &&          { return std::move(*m1_ref()).field1_ref(); }
  FOLLY_ERASE auto field1() const&&     { return std::move(*m1_ref()).field1_ref(); }
  [[deprecated("field1_ref() is deprecated, use field1() instead.")]]
  FOLLY_ERASE auto field1_ref() &       { return field1(); }
  [[deprecated("field1_ref() is deprecated, use field1() instead.")]]
  FOLLY_ERASE auto field1_ref() const&  { return field1(); }
  [[deprecated("field1_ref() is deprecated, use field1() instead.")]]
  FOLLY_ERASE auto field1_ref() &&      { return std::move(*this).field1(); }
  [[deprecated("field1_ref() is deprecated, use field1() instead.")]]
  FOLLY_ERASE auto field1_ref() const&& { return std::move(*this).field1(); }

  /** Glean { "field": "m1" } */
  [[deprecated("Use `FOO.m1().value()` instead of `FOO.get_m1()`")]]
  const ::cpp2::Mixin1& get_m1() const&;

  /** Glean { "field": "m1" } */
  [[deprecated("Use `FOO.m1().value()` instead of `FOO.get_m1()`")]]
  ::cpp2::Mixin1 get_m1() &&;

  /** Glean { "field": "m1" } */
  template <typename T_Mixin2_m1_struct_setter = ::cpp2::Mixin1>
  [[deprecated("Use `FOO.m1() = BAR` instead of `FOO.set_m1(BAR)`")]]
  ::cpp2::Mixin1& set_m1(T_Mixin2_m1_struct_setter&& m1_) {
    m1_ref() = std::forward<T_Mixin2_m1_struct_setter>(m1_);
    return __fbthrift_field_m1;
  }

  /** Glean { "field": "field2" } */
  [[deprecated("Use `FOO.field2().value()` instead of `FOO.get_field2()`")]]
  const ::std::string* get_field2() const&;

  /** Glean { "field": "field2" } */
  [[deprecated("Use `FOO.field2().value()` instead of `FOO.get_field2()`")]]
  ::std::string* get_field2() &;

  ::std::string* get_field2() && = delete;

  /** Glean { "field": "field2" } */
  template <typename T_Mixin2_field2_struct_setter = ::std::string>
  [[deprecated("Use `FOO.field2() = BAR` instead of `FOO.set_field2(BAR)`")]]
  ::std::string& set_field2(T_Mixin2_field2_struct_setter&& field2_) {
    field2_ref() = std::forward<T_Mixin2_field2_struct_setter>(field2_);
    return __fbthrift_field_field2;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Mixin2>;
  friend void swap(Mixin2& a, Mixin2& b);
};

template <class Protocol_>
unsigned long Mixin2::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/mixin/src/module.thrift", "name": "Mixin3Base", "kind": "struct" } */
class Mixin3Base final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field3
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Mixin3Base;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Mixin3Base();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Mixin3Base(apache::thrift::FragileConstructor, ::std::string field3__arg);

  Mixin3Base(Mixin3Base&&) noexcept;

  Mixin3Base(const Mixin3Base& src);


  Mixin3Base& operator=(Mixin3Base&&) noexcept;
  Mixin3Base& operator=(const Mixin3Base& src);

  ~Mixin3Base();

 private:
  ::std::string __fbthrift_field_field3;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Mixin3Base&) const;
  bool operator<(const Mixin3Base&) const;

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field3_ref() const& {
    return {this->__fbthrift_field_field3, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field3_ref() & {
    return {this->__fbthrift_field_field3, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field3_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field3), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field3() const& {
    return {this->__fbthrift_field_field3, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field3() & {
    return {this->__fbthrift_field_field3, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field3() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field3), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field3" } */
  [[deprecated("Use `FOO.field3().value()` instead of `FOO.get_field3()`")]]
  const ::std::string& get_field3() const& {
    return __fbthrift_field_field3;
  }

  /** Glean { "field": "field3" } */
  [[deprecated("Use `FOO.field3().value()` instead of `FOO.get_field3()`")]]
  ::std::string get_field3() && {
    return static_cast<::std::string&&>(__fbthrift_field_field3);
  }

  /** Glean { "field": "field3" } */
  template <typename T_Mixin3Base_field3_struct_setter = ::std::string>
  [[deprecated("Use `FOO.field3() = BAR` instead of `FOO.set_field3(BAR)`")]]
  ::std::string& set_field3(T_Mixin3Base_field3_struct_setter&& field3_) {
    field3_ref() = std::forward<T_Mixin3Base_field3_struct_setter>(field3_);
    return __fbthrift_field_field3;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Mixin3Base>;
  friend void swap(Mixin3Base& a, Mixin3Base& b);
};

template <class Protocol_>
unsigned long Mixin3Base::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/mixin/src/module.thrift", "name": "Foo", "kind": "struct" } */
class Foo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field4,
    ::apache::thrift::ident::m2,
    ::apache::thrift::ident::m3
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::cpp2::Mixin2>,
    ::apache::thrift::type::struct_t<::cpp2::Mixin3Base>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Foo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Foo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Foo(apache::thrift::FragileConstructor, ::std::string field4__arg, ::cpp2::Mixin2 m2__arg, ::cpp2::Mixin3 m3__arg);

  Foo(Foo&&) noexcept;

  Foo(const Foo& src);


  Foo& operator=(Foo&&) noexcept;
  Foo& operator=(const Foo& src);

  ~Foo();

 private:
  ::std::string __fbthrift_field_field4;
 private:
  ::cpp2::Mixin2 __fbthrift_field_m2;
 private:
  ::cpp2::Mixin3 __fbthrift_field_m3;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Foo&) const;
  bool operator<(const Foo&) const;

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field4_ref() const& {
    return {this->__fbthrift_field_field4, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field4_ref() & {
    return {this->__fbthrift_field_field4, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field4_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field4), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field4() const& {
    return {this->__fbthrift_field_field4, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field4() & {
    return {this->__fbthrift_field_field4, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field4() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field4), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "m2" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin2>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> m2_ref() const& {
    return {this->__fbthrift_field_m2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "m2" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin2>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> m2_ref() & {
    return {this->__fbthrift_field_m2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "m2" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin2>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> m2_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_m2), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "m2" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin2>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> m2() const& {
    return {this->__fbthrift_field_m2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "m2" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin2>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> m2() & {
    return {this->__fbthrift_field_m2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "m2" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin2>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> m2() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_m2), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "m3" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin3>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> m3_ref() const& {
    return {this->__fbthrift_field_m3, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "m3" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin3>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> m3_ref() & {
    return {this->__fbthrift_field_m3, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "m3" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin3>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> m3_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_m3), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "m3" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin3>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> m3() const& {
    return {this->__fbthrift_field_m3, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "m3" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin3>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> m3() & {
    return {this->__fbthrift_field_m3, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "m3" } */
  template <typename..., typename fbthrift_T = ::cpp2::Mixin3>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> m3() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_m3), __isset.at(2), __isset.bit(2)};
  }
  FOLLY_ERASE auto m1() &           { return m2_ref()->m1_ref(); }
  FOLLY_ERASE auto m1() const&      { return m2_ref()->m1_ref(); }
  FOLLY_ERASE auto m1() &&          { return std::move(*m2_ref()).m1_ref(); }
  FOLLY_ERASE auto m1() const&&     { return std::move(*m2_ref()).m1_ref(); }
  [[deprecated("m1_ref() is deprecated, use m1() instead.")]]
  FOLLY_ERASE auto m1_ref() &       { return m1(); }
  [[deprecated("m1_ref() is deprecated, use m1() instead.")]]
  FOLLY_ERASE auto m1_ref() const&  { return m1(); }
  [[deprecated("m1_ref() is deprecated, use m1() instead.")]]
  FOLLY_ERASE auto m1_ref() &&      { return std::move(*this).m1(); }
  [[deprecated("m1_ref() is deprecated, use m1() instead.")]]
  FOLLY_ERASE auto m1_ref() const&& { return std::move(*this).m1(); }
  FOLLY_ERASE auto field2() &           { return m2_ref()->field2_ref(); }
  FOLLY_ERASE auto field2() const&      { return m2_ref()->field2_ref(); }
  FOLLY_ERASE auto field2() &&          { return std::move(*m2_ref()).field2_ref(); }
  FOLLY_ERASE auto field2() const&&     { return std::move(*m2_ref()).field2_ref(); }
  [[deprecated("field2_ref() is deprecated, use field2() instead.")]]
  FOLLY_ERASE auto field2_ref() &       { return field2(); }
  [[deprecated("field2_ref() is deprecated, use field2() instead.")]]
  FOLLY_ERASE auto field2_ref() const&  { return field2(); }
  [[deprecated("field2_ref() is deprecated, use field2() instead.")]]
  FOLLY_ERASE auto field2_ref() &&      { return std::move(*this).field2(); }
  [[deprecated("field2_ref() is deprecated, use field2() instead.")]]
  FOLLY_ERASE auto field2_ref() const&& { return std::move(*this).field2(); }
  FOLLY_ERASE auto field1() &           { return m2_ref()->field1_ref(); }
  FOLLY_ERASE auto field1() const&      { return m2_ref()->field1_ref(); }
  FOLLY_ERASE auto field1() &&          { return std::move(*m2_ref()).field1_ref(); }
  FOLLY_ERASE auto field1() const&&     { return std::move(*m2_ref()).field1_ref(); }
  [[deprecated("field1_ref() is deprecated, use field1() instead.")]]
  FOLLY_ERASE auto field1_ref() &       { return field1(); }
  [[deprecated("field1_ref() is deprecated, use field1() instead.")]]
  FOLLY_ERASE auto field1_ref() const&  { return field1(); }
  [[deprecated("field1_ref() is deprecated, use field1() instead.")]]
  FOLLY_ERASE auto field1_ref() &&      { return std::move(*this).field1(); }
  [[deprecated("field1_ref() is deprecated, use field1() instead.")]]
  FOLLY_ERASE auto field1_ref() const&& { return std::move(*this).field1(); }
  FOLLY_ERASE auto field3() &           { return m3_ref()->field3_ref(); }
  FOLLY_ERASE auto field3() const&      { return m3_ref()->field3_ref(); }
  FOLLY_ERASE auto field3() &&          { return std::move(*m3_ref()).field3_ref(); }
  FOLLY_ERASE auto field3() const&&     { return std::move(*m3_ref()).field3_ref(); }
  [[deprecated("field3_ref() is deprecated, use field3() instead.")]]
  FOLLY_ERASE auto field3_ref() &       { return field3(); }
  [[deprecated("field3_ref() is deprecated, use field3() instead.")]]
  FOLLY_ERASE auto field3_ref() const&  { return field3(); }
  [[deprecated("field3_ref() is deprecated, use field3() instead.")]]
  FOLLY_ERASE auto field3_ref() &&      { return std::move(*this).field3(); }
  [[deprecated("field3_ref() is deprecated, use field3() instead.")]]
  FOLLY_ERASE auto field3_ref() const&& { return std::move(*this).field3(); }

  /** Glean { "field": "field4" } */
  [[deprecated("Use `FOO.field4().value()` instead of `FOO.get_field4()`")]]
  const ::std::string& get_field4() const& {
    return __fbthrift_field_field4;
  }

  /** Glean { "field": "field4" } */
  [[deprecated("Use `FOO.field4().value()` instead of `FOO.get_field4()`")]]
  ::std::string get_field4() && {
    return static_cast<::std::string&&>(__fbthrift_field_field4);
  }

  /** Glean { "field": "field4" } */
  template <typename T_Foo_field4_struct_setter = ::std::string>
  [[deprecated("Use `FOO.field4() = BAR` instead of `FOO.set_field4(BAR)`")]]
  ::std::string& set_field4(T_Foo_field4_struct_setter&& field4_) {
    field4_ref() = std::forward<T_Foo_field4_struct_setter>(field4_);
    return __fbthrift_field_field4;
  }

  /** Glean { "field": "m2" } */
  [[deprecated("Use `FOO.m2().value()` instead of `FOO.get_m2()`")]]
  const ::cpp2::Mixin2& get_m2() const&;

  /** Glean { "field": "m2" } */
  [[deprecated("Use `FOO.m2().value()` instead of `FOO.get_m2()`")]]
  ::cpp2::Mixin2 get_m2() &&;

  /** Glean { "field": "m2" } */
  template <typename T_Foo_m2_struct_setter = ::cpp2::Mixin2>
  [[deprecated("Use `FOO.m2() = BAR` instead of `FOO.set_m2(BAR)`")]]
  ::cpp2::Mixin2& set_m2(T_Foo_m2_struct_setter&& m2_) {
    m2_ref() = std::forward<T_Foo_m2_struct_setter>(m2_);
    return __fbthrift_field_m2;
  }

  /** Glean { "field": "m3" } */
  [[deprecated("Use `FOO.m3().value()` instead of `FOO.get_m3()`")]]
  const ::cpp2::Mixin3& get_m3() const&;

  /** Glean { "field": "m3" } */
  [[deprecated("Use `FOO.m3().value()` instead of `FOO.get_m3()`")]]
  ::cpp2::Mixin3 get_m3() &&;

  /** Glean { "field": "m3" } */
  template <typename T_Foo_m3_struct_setter = ::cpp2::Mixin3>
  [[deprecated("Use `FOO.m3() = BAR` instead of `FOO.set_m3(BAR)`")]]
  ::cpp2::Mixin3& set_m3(T_Foo_m3_struct_setter&& m3_) {
    m3_ref() = std::forward<T_Foo_m3_struct_setter>(m3_);
    return __fbthrift_field_m3;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Foo>;
  friend void swap(Foo& a, Foo& b);
};

template <class Protocol_>
unsigned long Foo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace cpp2

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::cpp2::Mixin1, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8710065736483237863;
  static constexpr ::std::string_view definitionKey = {"\x82\x05\xde\x74\xee\x11\x21\x1b\xb8\x22\x8c\x04\x66\xed\x94\xe6", 16};
};
template <> struct TSchemaAssociation<::cpp2::Mixin2, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8710065736483237863;
  static constexpr ::std::string_view definitionKey = {"\xf9\xce\xc1\xbe\x1f\x6a\xde\x5f\x0d\xfb\xcc\xb8\xa5\x02\xf0\xe9", 16};
};
template <> struct TSchemaAssociation<::cpp2::Mixin3Base, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8710065736483237863;
  static constexpr ::std::string_view definitionKey = {"\x00\x8e\x33\x1a\x77\x9f\x7c\x55\x38\xe2\x08\x9e\x78\xc8\x4a\xbc", 16};
};
template <> struct TSchemaAssociation<::cpp2::Foo, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -8710065736483237863;
  static constexpr ::std::string_view definitionKey = {"\xf4\xd2\xe5\x53\x5b\x1b\x97\xd8\x1b\xd1\x39\x24\x2c\x4f\x17\xba", 16};
};
} // namespace apache::thrift::detail
