/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/method_decorators/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/method_decorators/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/method_decorators/gen-cpp2/module_types_custom_protocol.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/method_decorators/gen-cpp2/module_data.h"
[[maybe_unused]] static constexpr std::string_view kModuleName = "module";


#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::Request>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::Request>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view Request::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Request>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Request::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Request>::name;
}

Request::Request(const Request&) = default;
Request& Request::operator=(const Request&) = default;
Request::Request() {
}


Request::~Request() {}

Request::Request([[maybe_unused]] Request&& other) noexcept :
    __fbthrift_field_id(std::move(other.__fbthrift_field_id)),
    __isset(other.__isset) {
}

Request& Request::operator=([[maybe_unused]] Request&& other) noexcept {
    this->__fbthrift_field_id = std::move(other.__fbthrift_field_id);
    __isset = other.__isset;
    return *this;
}


Request::Request(apache::thrift::FragileConstructor, ::std::string id__arg) :
    __fbthrift_field_id(std::move(id__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void Request::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_id = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void Request::__fbthrift_clear_terse_fields() {
}

bool Request::__fbthrift_is_empty() const {
  return false;
}

bool Request::operator==([[maybe_unused]] const Request& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Request::operator<([[maybe_unused]] const Request& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] Request& a, [[maybe_unused]] Request& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_id, b.__fbthrift_field_id);
  swap(a.__isset, b.__isset);
}



} // namespace cpp2

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::Response>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::Response>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view Response::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Response>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Response::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Response>::name;
}

Response::Response(const Response&) = default;
Response& Response::operator=(const Response&) = default;
Response::Response() {
}


Response::~Response() {}

Response::Response([[maybe_unused]] Response&& other) noexcept :
    __fbthrift_field_text(std::move(other.__fbthrift_field_text)),
    __isset(other.__isset) {
}

Response& Response::operator=([[maybe_unused]] Response&& other) noexcept {
    this->__fbthrift_field_text = std::move(other.__fbthrift_field_text);
    __isset = other.__isset;
    return *this;
}


Response::Response(apache::thrift::FragileConstructor, ::std::string text__arg) :
    __fbthrift_field_text(std::move(text__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void Response::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_text = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void Response::__fbthrift_clear_terse_fields() {
}

bool Response::__fbthrift_is_empty() const {
  return false;
}

bool Response::operator==([[maybe_unused]] const Response& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Response::operator<([[maybe_unused]] const Response& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] Response& a, [[maybe_unused]] Response& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_text, b.__fbthrift_field_text);
  swap(a.__isset, b.__isset);
}



} // namespace cpp2

namespace cpp2 { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace cpp2
namespace apache::thrift::detail::annotation {
}
