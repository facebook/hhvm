// Autogenerated by Thrift for thrift/compiler/test/fixtures/types/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "context"
    "errors"
    "fmt"
    "io"
    "reflect"
    "sync"

    included "included"
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = included.GoUnusedProtection__
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = io.EOF
var _ = reflect.Ptr
var _ = sync.OnceFunc
var _ = thrift.VOID
var _ = metadata.GoUnusedProtection__


type SomeService interface {
    BounceMap(ctx context.Context, m included.SomeMap) (included.SomeMap, error)
    BinaryKeyedMap(ctx context.Context, r []int64) (map[*TBinary]int64, error)
}

type SomeServiceClient interface {
    io.Closer
    BounceMap(ctx context.Context, m included.SomeMap) (included.SomeMap, error)
    BinaryKeyedMap(ctx context.Context, r []int64) (map[*TBinary]int64, error)
}

type someServiceClientImpl struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ SomeServiceClient = (*someServiceClientImpl)(nil)

func NewSomeServiceChannelClient(channel thrift.RequestChannel) SomeServiceClient {
    return &someServiceClientImpl{
        ch: channel,
    }
}

func (c *someServiceClientImpl) Close() error {
    return c.ch.Close()
}

func (c *someServiceClientImpl) BounceMap(ctx context.Context, m included.SomeMap) (included.SomeMap, error) {
    fbthriftReq := &reqSomeServiceBounceMap{
        M: m,
    }
    fbthriftResp := newRespSomeServiceBounceMap()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "bounce_map", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return nil, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return nil, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *someServiceClientImpl) BinaryKeyedMap(ctx context.Context, r []int64) (map[*TBinary]int64, error) {
    fbthriftReq := &reqSomeServiceBinaryKeyedMap{
        R: r,
    }
    fbthriftResp := newRespSomeServiceBinaryKeyedMap()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "binary_keyed_map", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return nil, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return nil, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}


type SomeServiceProcessor struct {
    processorFunctionMap map[string]thrift.ProcessorFunction
    functionServiceMap   map[string]string
    handler              SomeService
}

func NewSomeServiceProcessor(handler SomeService) *SomeServiceProcessor {
    p := &SomeServiceProcessor{
        handler:              handler,
        processorFunctionMap: make(map[string]thrift.ProcessorFunction),
        functionServiceMap:   make(map[string]string),
    }
    p.AddToProcessorFunctionMap("bounce_map", &procFuncSomeServiceBounceMap{handler: handler})
    p.AddToProcessorFunctionMap("binary_keyed_map", &procFuncSomeServiceBinaryKeyedMap{handler: handler})
    p.AddToFunctionServiceMap("bounce_map", "SomeService")
    p.AddToFunctionServiceMap("binary_keyed_map", "SomeService")

    return p
}

func (p *SomeServiceProcessor) AddToProcessorFunctionMap(key string, processorFunction thrift.ProcessorFunction) {
    p.processorFunctionMap[key] = processorFunction
}

func (p *SomeServiceProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *SomeServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction) {
    return p.processorFunctionMap[key]
}

func (p *SomeServiceProcessor) ProcessorFunctionMap() map[string]thrift.ProcessorFunction {
    return p.processorFunctionMap
}

func (p *SomeServiceProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func (p *SomeServiceProcessor) PackageName() string {
    return "module"
}

func (p *SomeServiceProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("module.SomeService")
}


type procFuncSomeServiceBounceMap struct {
    handler SomeService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncSomeServiceBounceMap)(nil)

func (p *procFuncSomeServiceBounceMap) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqSomeServiceBounceMap()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncSomeServiceBounceMap) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) error {
    messageType := thrift.REPLY
    if _, ok := result.(*thrift.ApplicationException); ok {
        messageType = thrift.EXCEPTION
    }

    if err := encoder.WriteMessageBegin("bounce_map", messageType, seqId); err != nil {
        return err
    }
    if err := result.Write(encoder); err != nil {
        return err
    }
    if err := encoder.WriteMessageEnd(); err != nil {
        return err
    }
    return encoder.Flush()
}

func (p *procFuncSomeServiceBounceMap) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    args := reqStruct.(*reqSomeServiceBounceMap)
    result := newRespSomeServiceBounceMap()
    retval, err := p.handler.BounceMap(ctx, args.M)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing BounceMap: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = retval
    return result, nil
}

type procFuncSomeServiceBinaryKeyedMap struct {
    handler SomeService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncSomeServiceBinaryKeyedMap)(nil)

func (p *procFuncSomeServiceBinaryKeyedMap) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqSomeServiceBinaryKeyedMap()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncSomeServiceBinaryKeyedMap) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) error {
    messageType := thrift.REPLY
    if _, ok := result.(*thrift.ApplicationException); ok {
        messageType = thrift.EXCEPTION
    }

    if err := encoder.WriteMessageBegin("binary_keyed_map", messageType, seqId); err != nil {
        return err
    }
    if err := result.Write(encoder); err != nil {
        return err
    }
    if err := encoder.WriteMessageEnd(); err != nil {
        return err
    }
    return encoder.Flush()
}

func (p *procFuncSomeServiceBinaryKeyedMap) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    args := reqStruct.(*reqSomeServiceBinaryKeyedMap)
    result := newRespSomeServiceBinaryKeyedMap()
    retval, err := p.handler.BinaryKeyedMap(ctx, args.R)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing BinaryKeyedMap: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = retval
    return result, nil
}

