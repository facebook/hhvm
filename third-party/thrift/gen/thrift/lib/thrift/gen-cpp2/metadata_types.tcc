/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/lib/thrift/gen-cpp2/metadata_types.h"

#include <thrift/lib/cpp2/gen/module_types_tcc.h>

namespace apache { namespace thrift { namespace metadata {

}}} // apache::thrift::metadata
namespace std {

} // std


namespace apache {
namespace thrift {
namespace detail {

template <>
struct TccStructTraits<::apache::thrift::metadata::ThriftListType> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::apache::thrift::metadata::ThriftSetType> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::apache::thrift::metadata::ThriftMapType> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::apache::thrift::metadata::ThriftEnumType> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::apache::thrift::metadata::ThriftStructType> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::apache::thrift::metadata::ThriftUnionType> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::apache::thrift::metadata::ThriftTypedefType> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::apache::thrift::metadata::ThriftType> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::apache::thrift::metadata::ThriftEnum> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::apache::thrift::metadata::ThriftField> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::apache::thrift::metadata::ThriftStruct> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::apache::thrift::metadata::ThriftException> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::apache::thrift::metadata::ThriftFunction> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::apache::thrift::metadata::ThriftService> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::apache::thrift::metadata::ThriftMetadata> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

template <class Protocol_>
void ThriftListType::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_valueType:
  {
    _readState.beforeSubobject(iprot);
    
    std::unique_ptr< ::apache::thrift::metadata::ThriftType> ptr = std::make_unique< ::apache::thrift::metadata::ThriftType>();
    ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::read(iprot, ptr.get());
    this->valueType = std::move(ptr);
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<ThriftListType>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_valueType;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t ThriftListType::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftListType");
  if (this->valueType) {
    xfer += prot_->serializedFieldSize("valueType", apache::thrift::protocol::T_STRUCT, 1);
    if (this->valueType) {
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::serializedSize(prot_, this->valueType.get());
    }
    else {
      xfer += prot_->serializedStructSize("ThriftType");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftListType::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftListType");
  if (this->valueType) {
    xfer += prot_->serializedFieldSize("valueType", apache::thrift::protocol::T_STRUCT, 1);
    if (this->valueType) {
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::serializedSizeZC(prot_, this->valueType.get());
    }
    else {
      xfer += prot_->serializedStructSize("ThriftType");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftListType::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ThriftListType");
  if (this->valueType) {
    xfer += prot_->writeFieldBegin("valueType", apache::thrift::protocol::T_STRUCT, 1);
    if (this->valueType) {
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::write(prot_, this->valueType.get());
    }
    else {
      xfer += prot_->writeStructBegin("ThriftType");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void ThriftListType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ThriftListType::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ThriftListType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ThriftListType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void ThriftListType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ThriftListType::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ThriftListType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ThriftListType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // apache::thrift::metadata
namespace apache { namespace thrift { namespace metadata {

template <class Protocol_>
void ThriftSetType::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_valueType:
  {
    _readState.beforeSubobject(iprot);
    
    std::unique_ptr< ::apache::thrift::metadata::ThriftType> ptr = std::make_unique< ::apache::thrift::metadata::ThriftType>();
    ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::read(iprot, ptr.get());
    this->valueType = std::move(ptr);
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<ThriftSetType>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_valueType;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t ThriftSetType::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftSetType");
  if (this->valueType) {
    xfer += prot_->serializedFieldSize("valueType", apache::thrift::protocol::T_STRUCT, 1);
    if (this->valueType) {
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::serializedSize(prot_, this->valueType.get());
    }
    else {
      xfer += prot_->serializedStructSize("ThriftType");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftSetType::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftSetType");
  if (this->valueType) {
    xfer += prot_->serializedFieldSize("valueType", apache::thrift::protocol::T_STRUCT, 1);
    if (this->valueType) {
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::serializedSizeZC(prot_, this->valueType.get());
    }
    else {
      xfer += prot_->serializedStructSize("ThriftType");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftSetType::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ThriftSetType");
  if (this->valueType) {
    xfer += prot_->writeFieldBegin("valueType", apache::thrift::protocol::T_STRUCT, 1);
    if (this->valueType) {
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::write(prot_, this->valueType.get());
    }
    else {
      xfer += prot_->writeStructBegin("ThriftType");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void ThriftSetType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ThriftSetType::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ThriftSetType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ThriftSetType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void ThriftSetType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ThriftSetType::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ThriftSetType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ThriftSetType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // apache::thrift::metadata
namespace apache { namespace thrift { namespace metadata {

template <class Protocol_>
void ThriftMapType::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_keyType:
  {
    _readState.beforeSubobject(iprot);
    
    std::unique_ptr< ::apache::thrift::metadata::ThriftType> ptr = std::make_unique< ::apache::thrift::metadata::ThriftType>();
    ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::read(iprot, ptr.get());
    this->keyType = std::move(ptr);
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_valueType:
  {
    _readState.beforeSubobject(iprot);
    
    std::unique_ptr< ::apache::thrift::metadata::ThriftType> ptr = std::make_unique< ::apache::thrift::metadata::ThriftType>();
    ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::read(iprot, ptr.get());
    this->valueType = std::move(ptr);
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<ThriftMapType>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_keyType;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_valueType;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t ThriftMapType::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftMapType");
  if (this->keyType) {
    xfer += prot_->serializedFieldSize("keyType", apache::thrift::protocol::T_STRUCT, 1);
    if (this->keyType) {
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::serializedSize(prot_, this->keyType.get());
    }
    else {
      xfer += prot_->serializedStructSize("ThriftType");
      xfer += prot_->serializedSizeStop();
    }
  }
  if (this->valueType) {
    xfer += prot_->serializedFieldSize("valueType", apache::thrift::protocol::T_STRUCT, 2);
    if (this->valueType) {
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::serializedSize(prot_, this->valueType.get());
    }
    else {
      xfer += prot_->serializedStructSize("ThriftType");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftMapType::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftMapType");
  if (this->keyType) {
    xfer += prot_->serializedFieldSize("keyType", apache::thrift::protocol::T_STRUCT, 1);
    if (this->keyType) {
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::serializedSizeZC(prot_, this->keyType.get());
    }
    else {
      xfer += prot_->serializedStructSize("ThriftType");
      xfer += prot_->serializedSizeStop();
    }
  }
  if (this->valueType) {
    xfer += prot_->serializedFieldSize("valueType", apache::thrift::protocol::T_STRUCT, 2);
    if (this->valueType) {
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::serializedSizeZC(prot_, this->valueType.get());
    }
    else {
      xfer += prot_->serializedStructSize("ThriftType");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftMapType::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ThriftMapType");
  if (this->keyType) {
    xfer += prot_->writeFieldBegin("keyType", apache::thrift::protocol::T_STRUCT, 1);
    if (this->keyType) {
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::write(prot_, this->keyType.get());
    }
    else {
      xfer += prot_->writeStructBegin("ThriftType");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  if (this->valueType) {
    xfer += prot_->writeFieldBegin("valueType", apache::thrift::protocol::T_STRUCT, 2);
    if (this->valueType) {
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::write(prot_, this->valueType.get());
    }
    else {
      xfer += prot_->writeStructBegin("ThriftType");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void ThriftMapType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ThriftMapType::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ThriftMapType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ThriftMapType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void ThriftMapType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ThriftMapType::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ThriftMapType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ThriftMapType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // apache::thrift::metadata
namespace apache { namespace thrift { namespace metadata {

template <class Protocol_>
void ThriftEnumType::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_name:
  {
    
    iprot->readString(this->name);
    this->__isset.name = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<ThriftEnumType>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_name;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t ThriftEnumType::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftEnumType");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftEnumType::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftEnumType");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftEnumType::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ThriftEnumType");
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void ThriftEnumType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ThriftEnumType::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ThriftEnumType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ThriftEnumType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void ThriftEnumType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ThriftEnumType::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ThriftEnumType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ThriftEnumType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // apache::thrift::metadata
namespace apache { namespace thrift { namespace metadata {

template <class Protocol_>
void ThriftStructType::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_name:
  {
    
    iprot->readString(this->name);
    this->__isset.name = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<ThriftStructType>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_name;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t ThriftStructType::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftStructType");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftStructType::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftStructType");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftStructType::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ThriftStructType");
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void ThriftStructType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ThriftStructType::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ThriftStructType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ThriftStructType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void ThriftStructType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ThriftStructType::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ThriftStructType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ThriftStructType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // apache::thrift::metadata
namespace apache { namespace thrift { namespace metadata {

template <class Protocol_>
void ThriftUnionType::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_name:
  {
    
    iprot->readString(this->name);
    this->__isset.name = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<ThriftUnionType>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_name;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t ThriftUnionType::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftUnionType");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftUnionType::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftUnionType");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftUnionType::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ThriftUnionType");
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void ThriftUnionType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ThriftUnionType::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ThriftUnionType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ThriftUnionType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void ThriftUnionType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ThriftUnionType::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ThriftUnionType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ThriftUnionType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // apache::thrift::metadata
namespace apache { namespace thrift { namespace metadata {

template <class Protocol_>
void ThriftTypedefType::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_name:
  {
    
    iprot->readString(this->name);
    this->__isset.name = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_underlyingType:
  {
    _readState.beforeSubobject(iprot);
    
    std::unique_ptr< ::apache::thrift::metadata::ThriftType> ptr = std::make_unique< ::apache::thrift::metadata::ThriftType>();
    ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::read(iprot, ptr.get());
    this->underlyingType = std::move(ptr);
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<ThriftTypedefType>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_name;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_underlyingType;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t ThriftTypedefType::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftTypedefType");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  if (this->underlyingType) {
    xfer += prot_->serializedFieldSize("underlyingType", apache::thrift::protocol::T_STRUCT, 2);
    if (this->underlyingType) {
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::serializedSize(prot_, this->underlyingType.get());
    }
    else {
      xfer += prot_->serializedStructSize("ThriftType");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftTypedefType::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftTypedefType");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  if (this->underlyingType) {
    xfer += prot_->serializedFieldSize("underlyingType", apache::thrift::protocol::T_STRUCT, 2);
    if (this->underlyingType) {
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::serializedSizeZC(prot_, this->underlyingType.get());
    }
    else {
      xfer += prot_->serializedStructSize("ThriftType");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftTypedefType::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ThriftTypedefType");
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->name);
  xfer += prot_->writeFieldEnd();
  if (this->underlyingType) {
    xfer += prot_->writeFieldBegin("underlyingType", apache::thrift::protocol::T_STRUCT, 2);
    if (this->underlyingType) {
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::write(prot_, this->underlyingType.get());
    }
    else {
      xfer += prot_->writeStructBegin("ThriftType");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void ThriftTypedefType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ThriftTypedefType::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ThriftTypedefType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ThriftTypedefType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void ThriftTypedefType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ThriftTypedefType::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ThriftTypedefType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ThriftTypedefType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // apache::thrift::metadata
namespace apache { namespace thrift { namespace metadata {

template <class Protocol_>
void ThriftType::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;
  _readState.fieldId = 0;

  _readState.readStructBegin(iprot);

  _readState.readFieldBegin(iprot);
  if (_readState.atStop()) {
    this->__clear();
  } else {
    if (iprot->kUsesFieldNames()) {
      _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<ThriftType>>();
    }
    switch (_readState.fieldId) {
      case 1:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32)) {
          this->set_t_primitive();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::thrift::metadata::ThriftPrimitiveType>::readWithContext(*iprot, this->mutable_t_primitive(), _readState);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 2:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_t_list();
          _readState.beforeSubobject(iprot);
          ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftListType>::read(iprot, &this->mutable_t_list());
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 3:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_t_set();
          _readState.beforeSubobject(iprot);
          ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftSetType>::read(iprot, &this->mutable_t_set());
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 4:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_t_map();
          _readState.beforeSubobject(iprot);
          ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftMapType>::read(iprot, &this->mutable_t_map());
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 5:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_t_enum();
          _readState.beforeSubobject(iprot);
          ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftEnumType>::read(iprot, &this->mutable_t_enum());
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 6:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_t_struct();
          _readState.beforeSubobject(iprot);
          ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftStructType>::read(iprot, &this->mutable_t_struct());
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 7:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_t_union();
          _readState.beforeSubobject(iprot);
          ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftUnionType>::read(iprot, &this->mutable_t_union());
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 8:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_t_typedef();
          _readState.beforeSubobject(iprot);
          ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftTypedefType>::read(iprot, &this->mutable_t_typedef());
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      default:
      {
        _readState.skip(iprot);
        break;
      }
    }
    _readState.readFieldEnd(iprot);
    _readState.readFieldBegin(iprot);
    if (UNLIKELY(!_readState.atStop())) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  _readState.readStructEnd(iprot);
}
template <class Protocol_>
uint32_t ThriftType::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftType");
  switch(this->getType()) {
    case ThriftType::Type::t_primitive:
    {
      xfer += prot_->serializedFieldSize("t_primitive", apache::thrift::protocol::T_I32, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::thrift::metadata::ThriftPrimitiveType>::serializedSize<false>(*prot_, this->get_t_primitive());
      break;
    }
    case ThriftType::Type::t_list:
    {
      xfer += prot_->serializedFieldSize("t_list", apache::thrift::protocol::T_STRUCT, 2);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftListType>::serializedSize(prot_, &this->get_t_list());
      break;
    }
    case ThriftType::Type::t_set:
    {
      xfer += prot_->serializedFieldSize("t_set", apache::thrift::protocol::T_STRUCT, 3);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftSetType>::serializedSize(prot_, &this->get_t_set());
      break;
    }
    case ThriftType::Type::t_map:
    {
      xfer += prot_->serializedFieldSize("t_map", apache::thrift::protocol::T_STRUCT, 4);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftMapType>::serializedSize(prot_, &this->get_t_map());
      break;
    }
    case ThriftType::Type::t_enum:
    {
      xfer += prot_->serializedFieldSize("t_enum", apache::thrift::protocol::T_STRUCT, 5);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftEnumType>::serializedSize(prot_, &this->get_t_enum());
      break;
    }
    case ThriftType::Type::t_struct:
    {
      xfer += prot_->serializedFieldSize("t_struct", apache::thrift::protocol::T_STRUCT, 6);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftStructType>::serializedSize(prot_, &this->get_t_struct());
      break;
    }
    case ThriftType::Type::t_union:
    {
      xfer += prot_->serializedFieldSize("t_union", apache::thrift::protocol::T_STRUCT, 7);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftUnionType>::serializedSize(prot_, &this->get_t_union());
      break;
    }
    case ThriftType::Type::t_typedef:
    {
      xfer += prot_->serializedFieldSize("t_typedef", apache::thrift::protocol::T_STRUCT, 8);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftTypedefType>::serializedSize(prot_, &this->get_t_typedef());
      break;
    }
    case ThriftType::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftType::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftType");
  switch(this->getType()) {
    case ThriftType::Type::t_primitive:
    {
      xfer += prot_->serializedFieldSize("t_primitive", apache::thrift::protocol::T_I32, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::thrift::metadata::ThriftPrimitiveType>::serializedSize<false>(*prot_, this->get_t_primitive());
      break;
    }
    case ThriftType::Type::t_list:
    {
      xfer += prot_->serializedFieldSize("t_list", apache::thrift::protocol::T_STRUCT, 2);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftListType>::serializedSizeZC(prot_, &this->get_t_list());
      break;
    }
    case ThriftType::Type::t_set:
    {
      xfer += prot_->serializedFieldSize("t_set", apache::thrift::protocol::T_STRUCT, 3);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftSetType>::serializedSizeZC(prot_, &this->get_t_set());
      break;
    }
    case ThriftType::Type::t_map:
    {
      xfer += prot_->serializedFieldSize("t_map", apache::thrift::protocol::T_STRUCT, 4);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftMapType>::serializedSizeZC(prot_, &this->get_t_map());
      break;
    }
    case ThriftType::Type::t_enum:
    {
      xfer += prot_->serializedFieldSize("t_enum", apache::thrift::protocol::T_STRUCT, 5);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftEnumType>::serializedSizeZC(prot_, &this->get_t_enum());
      break;
    }
    case ThriftType::Type::t_struct:
    {
      xfer += prot_->serializedFieldSize("t_struct", apache::thrift::protocol::T_STRUCT, 6);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftStructType>::serializedSizeZC(prot_, &this->get_t_struct());
      break;
    }
    case ThriftType::Type::t_union:
    {
      xfer += prot_->serializedFieldSize("t_union", apache::thrift::protocol::T_STRUCT, 7);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftUnionType>::serializedSizeZC(prot_, &this->get_t_union());
      break;
    }
    case ThriftType::Type::t_typedef:
    {
      xfer += prot_->serializedFieldSize("t_typedef", apache::thrift::protocol::T_STRUCT, 8);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftTypedefType>::serializedSizeZC(prot_, &this->get_t_typedef());
      break;
    }
    case ThriftType::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftType::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ThriftType");
  switch(this->getType()) {
    case ThriftType::Type::t_primitive:
    {
      xfer += prot_->writeFieldBegin("t_primitive", apache::thrift::protocol::T_I32, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::apache::thrift::metadata::ThriftPrimitiveType>::write(*prot_, this->get_t_primitive());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ThriftType::Type::t_list:
    {
      xfer += prot_->writeFieldBegin("t_list", apache::thrift::protocol::T_STRUCT, 2);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftListType>::write(prot_, &this->get_t_list());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ThriftType::Type::t_set:
    {
      xfer += prot_->writeFieldBegin("t_set", apache::thrift::protocol::T_STRUCT, 3);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftSetType>::write(prot_, &this->get_t_set());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ThriftType::Type::t_map:
    {
      xfer += prot_->writeFieldBegin("t_map", apache::thrift::protocol::T_STRUCT, 4);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftMapType>::write(prot_, &this->get_t_map());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ThriftType::Type::t_enum:
    {
      xfer += prot_->writeFieldBegin("t_enum", apache::thrift::protocol::T_STRUCT, 5);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftEnumType>::write(prot_, &this->get_t_enum());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ThriftType::Type::t_struct:
    {
      xfer += prot_->writeFieldBegin("t_struct", apache::thrift::protocol::T_STRUCT, 6);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftStructType>::write(prot_, &this->get_t_struct());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ThriftType::Type::t_union:
    {
      xfer += prot_->writeFieldBegin("t_union", apache::thrift::protocol::T_STRUCT, 7);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftUnionType>::write(prot_, &this->get_t_union());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ThriftType::Type::t_typedef:
    {
      xfer += prot_->writeFieldBegin("t_typedef", apache::thrift::protocol::T_STRUCT, 8);
      xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftTypedefType>::write(prot_, &this->get_t_typedef());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ThriftType::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void ThriftType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ThriftType::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ThriftType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ThriftType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void ThriftType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ThriftType::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ThriftType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ThriftType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // apache::thrift::metadata
namespace apache { namespace thrift { namespace metadata {

template <class Protocol_>
void ThriftEnum::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_name:
  {
    
    iprot->readString(this->name);
    this->__isset.name = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_elements:
  {
    _readState.beforeSubobject(iprot);
    
    this->elements = ::std::map<int32_t, ::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int32_t, ::std::string>>::read(*iprot, this->elements);
    this->__isset.elements = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<ThriftEnum>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_name;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_elements;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t ThriftEnum::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftEnum");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("elements", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int32_t, ::std::string>>::serializedSize<false>(*prot_, this->elements);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftEnum::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftEnum");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("elements", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int32_t, ::std::string>>::serializedSize<false>(*prot_, this->elements);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftEnum::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ThriftEnum");
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("elements", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int32_t, ::std::string>>::write(*prot_, this->elements);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void ThriftEnum::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ThriftEnum::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ThriftEnum::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ThriftEnum::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void ThriftEnum::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ThriftEnum::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ThriftEnum::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ThriftEnum::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // apache::thrift::metadata
namespace apache { namespace thrift { namespace metadata {

template <class Protocol_>
void ThriftField::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_id:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->id, _readState);
    this->__isset.id = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_type:
  {
    _readState.beforeSubobject(iprot);
    ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::read(iprot, &this->type);
    this->__isset.type = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_name:
  {
    
    iprot->readString(this->name);
    this->__isset.name = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_is_optional:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, bool>::readWithContext(*iprot, this->is_optional, _readState);
    this->__isset.is_optional = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<ThriftField>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_id;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_type;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_name;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BOOL))) {
        goto _readField_is_optional;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t ThriftField::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftField");
  xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->id);
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::serializedSize(prot_, &this->type);
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("is_optional", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(this->is_optional);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftField::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftField");
  xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->id);
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::serializedSizeZC(prot_, &this->type);
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("is_optional", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(this->is_optional);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftField::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ThriftField");
  xfer += prot_->writeFieldBegin("id", apache::thrift::protocol::T_I32, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->id);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("type", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::write(prot_, &this->type);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeString(this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("is_optional", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->writeBool(this->is_optional);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void ThriftField::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ThriftField::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ThriftField::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ThriftField::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void ThriftField::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ThriftField::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ThriftField::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ThriftField::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // apache::thrift::metadata
namespace apache { namespace thrift { namespace metadata {

template <class Protocol_>
void ThriftStruct::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_name:
  {
    
    iprot->readString(this->name);
    this->__isset.name = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_fields:
  {
    _readState.beforeSubobject(iprot);
    
    this->fields = ::std::vector< ::apache::thrift::metadata::ThriftField>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftField>>::read(*iprot, this->fields);
    this->__isset.fields = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_is_union:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, bool>::readWithContext(*iprot, this->is_union, _readState);
    this->__isset.is_union = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<ThriftStruct>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_name;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_fields;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BOOL))) {
        goto _readField_is_union;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t ThriftStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftStruct");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("fields", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftField>>::serializedSize<false>(*prot_, this->fields);
  xfer += prot_->serializedFieldSize("is_union", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->serializedSizeBool(this->is_union);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftStruct");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("fields", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftField>>::serializedSize<false>(*prot_, this->fields);
  xfer += prot_->serializedFieldSize("is_union", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->serializedSizeBool(this->is_union);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ThriftStruct");
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fields", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftField>>::write(*prot_, this->fields);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("is_union", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->writeBool(this->is_union);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void ThriftStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ThriftStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ThriftStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ThriftStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void ThriftStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ThriftStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ThriftStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ThriftStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // apache::thrift::metadata
namespace apache { namespace thrift { namespace metadata {

template <class Protocol_>
void ThriftException::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_name:
  {
    
    iprot->readString(this->name);
    this->__isset.name = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_fields:
  {
    _readState.beforeSubobject(iprot);
    
    this->fields = ::std::vector< ::apache::thrift::metadata::ThriftField>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftField>>::read(*iprot, this->fields);
    this->__isset.fields = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<ThriftException>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_name;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_fields;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t ThriftException::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftException");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("fields", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftField>>::serializedSize<false>(*prot_, this->fields);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftException::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftException");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("fields", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftField>>::serializedSize<false>(*prot_, this->fields);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftException::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ThriftException");
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fields", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftField>>::write(*prot_, this->fields);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void ThriftException::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ThriftException::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ThriftException::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ThriftException::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void ThriftException::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ThriftException::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ThriftException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ThriftException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // apache::thrift::metadata
namespace apache { namespace thrift { namespace metadata {

template <class Protocol_>
void ThriftFunction::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_name:
  {
    
    iprot->readString(this->name);
    this->__isset.name = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_returnType:
  {
    _readState.beforeSubobject(iprot);
    ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::read(iprot, &this->returnType);
    this->__isset.returnType = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_arguments:
  {
    _readState.beforeSubobject(iprot);
    
    this->arguments = ::std::vector< ::apache::thrift::metadata::ThriftField>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftField>>::read(*iprot, this->arguments);
    this->__isset.arguments = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_exceptions:
  {
    _readState.beforeSubobject(iprot);
    
    this->exceptions = ::std::vector< ::apache::thrift::metadata::ThriftField>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftField>>::read(*iprot, this->exceptions);
    this->__isset.exceptions = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<ThriftFunction>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_name;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_returnType;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_arguments;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_exceptions;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t ThriftFunction::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftFunction");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("returnType", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::serializedSize(prot_, &this->returnType);
  xfer += prot_->serializedFieldSize("arguments", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftField>>::serializedSize<false>(*prot_, this->arguments);
  xfer += prot_->serializedFieldSize("exceptions", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftField>>::serializedSize<false>(*prot_, this->exceptions);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftFunction::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftFunction");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("returnType", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::serializedSizeZC(prot_, &this->returnType);
  xfer += prot_->serializedFieldSize("arguments", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftField>>::serializedSize<false>(*prot_, this->arguments);
  xfer += prot_->serializedFieldSize("exceptions", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftField>>::serializedSize<false>(*prot_, this->exceptions);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftFunction::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ThriftFunction");
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("returnType", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::write(prot_, &this->returnType);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("arguments", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftField>>::write(*prot_, this->arguments);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("exceptions", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftField>>::write(*prot_, this->exceptions);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void ThriftFunction::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ThriftFunction::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ThriftFunction::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ThriftFunction::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void ThriftFunction::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ThriftFunction::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ThriftFunction::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ThriftFunction::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // apache::thrift::metadata
namespace apache { namespace thrift { namespace metadata {

template <class Protocol_>
void ThriftService::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_name:
  {
    
    iprot->readString(this->name);
    this->__isset.name = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_functions:
  {
    _readState.beforeSubobject(iprot);
    
    this->functions = ::std::vector< ::apache::thrift::metadata::ThriftFunction>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftFunction>>::read(*iprot, this->functions);
    this->__isset.functions = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_parent:
  {
    
    iprot->readString(this->parent);
    this->__isset.parent = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<ThriftService>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_name;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_functions;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_parent;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t ThriftService::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftService");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("functions", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftFunction>>::serializedSize<false>(*prot_, this->functions);
  if (this->__isset.parent) {
    xfer += prot_->serializedFieldSize("parent", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeString(this->parent);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftService::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftService");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("functions", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftFunction>>::serializedSize<false>(*prot_, this->functions);
  if (this->__isset.parent) {
    xfer += prot_->serializedFieldSize("parent", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeString(this->parent);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftService::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ThriftService");
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("functions", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::apache::thrift::metadata::ThriftFunction>>::write(*prot_, this->functions);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.parent) {
    xfer += prot_->writeFieldBegin("parent", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->writeString(this->parent);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void ThriftService::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ThriftService::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ThriftService::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ThriftService::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void ThriftService::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ThriftService::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ThriftService::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ThriftService::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // apache::thrift::metadata
namespace apache { namespace thrift { namespace metadata {

template <class Protocol_>
void ThriftMetadata::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_file_name:
  {
    
    iprot->readString(this->file_name);
    this->__isset.file_name = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_enums:
  {
    _readState.beforeSubobject(iprot);
    
    this->enums = ::std::map<::std::string,  ::apache::thrift::metadata::ThriftEnum>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftEnum>>::read(*iprot, this->enums);
    this->__isset.enums = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          4,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_structs:
  {
    _readState.beforeSubobject(iprot);
    
    this->structs = ::std::map<::std::string,  ::apache::thrift::metadata::ThriftStruct>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftStruct>>::read(*iprot, this->structs);
    this->__isset.structs = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_exceptions:
  {
    _readState.beforeSubobject(iprot);
    
    this->exceptions = ::std::map<::std::string,  ::apache::thrift::metadata::ThriftException>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftException>>::read(*iprot, this->exceptions);
    this->__isset.exceptions = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_services:
  {
    _readState.beforeSubobject(iprot);
    
    this->services = ::std::map<::std::string,  ::apache::thrift::metadata::ThriftService>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftService>>::read(*iprot, this->services);
    this->__isset.services = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<ThriftMetadata>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_file_name;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_enums;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_structs;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_exceptions;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_services;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t ThriftMetadata::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftMetadata");
  xfer += prot_->serializedFieldSize("file_name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->file_name);
  xfer += prot_->serializedFieldSize("enums", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftEnum>>::serializedSize<false>(*prot_, this->enums);
  xfer += prot_->serializedFieldSize("structs", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftStruct>>::serializedSize<false>(*prot_, this->structs);
  xfer += prot_->serializedFieldSize("exceptions", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftException>>::serializedSize<false>(*prot_, this->exceptions);
  xfer += prot_->serializedFieldSize("services", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftService>>::serializedSize<false>(*prot_, this->services);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftMetadata::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ThriftMetadata");
  xfer += prot_->serializedFieldSize("file_name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->file_name);
  xfer += prot_->serializedFieldSize("enums", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftEnum>>::serializedSize<false>(*prot_, this->enums);
  xfer += prot_->serializedFieldSize("structs", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftStruct>>::serializedSize<false>(*prot_, this->structs);
  xfer += prot_->serializedFieldSize("exceptions", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftException>>::serializedSize<false>(*prot_, this->exceptions);
  xfer += prot_->serializedFieldSize("services", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftService>>::serializedSize<false>(*prot_, this->services);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ThriftMetadata::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ThriftMetadata");
  xfer += prot_->writeFieldBegin("file_name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->file_name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("enums", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftEnum>>::write(*prot_, this->enums);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("structs", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftStruct>>::write(*prot_, this->structs);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("exceptions", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftException>>::write(*prot_, this->exceptions);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("services", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftService>>::write(*prot_, this->services);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void ThriftMetadata::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ThriftMetadata::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ThriftMetadata::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ThriftMetadata::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void ThriftMetadata::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ThriftMetadata::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ThriftMetadata::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ThriftMetadata::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // apache::thrift::metadata
