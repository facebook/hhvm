[("\\A",
  (Shallow_decl_defs.Class
     { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
       sc_is_xhp = false; sc_has_xhp_keyword = false;
       sc_kind = (Cclass Concrete); sc_module = (Some ("A", []));
       sc_name = ([7:7-8], "\\A"); sc_tparams = [];
       sc_where_constraints = []; sc_extends = []; sc_uses = [];
       sc_xhp_attr_uses = []; sc_xhp_enum_values = {}; sc_req_extends = [];
       sc_req_implements = []; sc_implements = [];
       sc_support_dynamic_type = false; sc_consts = []; sc_typeconsts = [];
       sc_props = []; sc_sprops = []; sc_constructor = None;
       sc_static_methods = [];
       sc_methods =
       [{ Shallow_decl_defs.sm_name = ([9:19-20], "f");
          sm_type =
          (Rwitness_from_decl ([9:19-20]),
           (Tfun
              { ft_arity = (Fstandard ()); ft_tparams = [];
                ft_where_constraints = []; ft_params = [];
                ft_implicit_params = { capability = (CapDefaults [9:19-20]) };
                ft_ret =
                { et_enforced = Typing_defs_core.Unenforced;
                  et_type = (Rhint ([9:24-28]), (Tprim Tvoid)) };
                ft_flags =
                (make_ft_flags FSync ~return_disposable:false
                  ~returns_readonly:false ~support_dynamic_type:false
                  ~readonly_this:false);
                ft_ifc_decl = FDPolicied {PUBLIC} }));
          sm_visibility = Internal; sm_deprecated = None; sm_flags = (empty);
          sm_attributes = [] }
         ];
       sc_user_attributes =
       [{ Typing_defs_core.ua_name = ([6:3-11], "__Module");
          ua_classname_params = [] }
         ];
       sc_enum_type = None }));
  ("\\main",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([12:10-14]),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [12:10-14]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type = (Rhint ([12:18-22]), (Tprim Tvoid)) };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [12:10-14]; fe_php_std_lib = false;
        fe_support_dynamic_type = false }))
  ]

They matched!
