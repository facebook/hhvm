#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations


import typing as _typing

import enum

import folly.iobuf as _fbthrift_iobuf
import thrift.python.types as _fbthrift_python_types
import thrift.python.exceptions as _fbthrift_python_exceptions

import apache.thrift.op.patch.thrift_types

import apache.thrift.type.standard.thrift_types

import facebook.thrift.annotation.thrift.thrift_types


class MyEnum(_fbthrift_python_types.Enum, int):
    MyValue0: MyEnum = ...
    def _to_python(self) -> MyEnum: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyEnum": ...  # type: ignore
    def _to_py_deprecated(self) -> int: ...


class MyData(_fbthrift_python_types.Struct):
    data1: _typing.Final[str] = ...
    data2: _typing.Final[int] = ...
    def __init__(
        self, *,
        data1: _typing.Optional[str]=...,
        data2: _typing.Optional[int]=...
    ) -> None: ...

    def __call__(
        self, *,
        data1: _typing.Optional[str]=...,
        data2: _typing.Optional[int]=...
    ) -> MyData: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[str, int]]]: ...
    def _to_python(self) -> MyData: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyData": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyData": ...  # type: ignore


class InnerUnion(_fbthrift_python_types.Union):
    innerOption: _typing.Final[bytes] = ...
    def __init__(
        self, *,
        innerOption: _typing.Optional[bytes]=...
    ) -> None: ...


    class Type(enum.Enum):
        EMPTY: InnerUnion.Type = ...
        innerOption: InnerUnion.Type = ...

    @classmethod
    def fromValue(cls, value: _typing.Union[None, bytes]) -> InnerUnion: ...
    value: _typing.Final[_typing.Union[None, bytes]]
    type: Type
    def get_type(self) -> Type:...
    def _to_python(self) -> InnerUnion: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.InnerUnion": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.InnerUnion": ...  # type: ignore


class MyUnion(_fbthrift_python_types.Union):
    option1: _typing.Final[str] = ...
    option2: _typing.Final[int] = ...
    option3: _typing.Final[InnerUnion] = ...
    def __init__(
        self, *,
        option1: _typing.Optional[str]=...,
        option2: _typing.Optional[int]=...,
        option3: _typing.Optional[InnerUnion]=...
    ) -> None: ...


    class Type(enum.Enum):
        EMPTY: MyUnion.Type = ...
        option1: MyUnion.Type = ...
        option2: MyUnion.Type = ...
        option3: MyUnion.Type = ...

    @classmethod
    def fromValue(cls, value: _typing.Union[None, str, int, InnerUnion]) -> MyUnion: ...
    value: _typing.Final[_typing.Union[None, str, int, InnerUnion]]
    type: Type
    def get_type(self) -> Type:...
    def _to_python(self) -> MyUnion: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyUnion": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyUnion": ...  # type: ignore


class MyStruct(_fbthrift_python_types.Struct):
    mapMap: _typing.Final[_typing.Mapping[str, _typing.Mapping[str, int]]] = ...
    listMap: _typing.Final[_typing.Sequence[_typing.Mapping[str, int]]] = ...
    optMapVal: _typing.Final[_typing.Optional[_typing.Mapping[str, str]]] = ...
    optSetVal: _typing.Final[_typing.Optional[_typing.AbstractSet[str]]] = ...
    optListVal: _typing.Final[_typing.Optional[_typing.Sequence[int]]] = ...
    optLateStructVal: _typing.Final[_typing.Optional[LateDefStruct]] = ...
    optStructVal: _typing.Final[_typing.Optional[MyData]] = ...
    optEnumVal: _typing.Final[_typing.Optional[MyEnum]] = ...
    optBinaryVal: _typing.Final[_typing.Optional[_fbthrift_iobuf.IOBuf]] = ...
    optStringVal: _typing.Final[_typing.Optional[str]] = ...
    optDoubleVal: _typing.Final[_typing.Optional[float]] = ...
    optFloatVal: _typing.Final[_typing.Optional[float]] = ...
    optI64Val: _typing.Final[_typing.Optional[int]] = ...
    optI32Val: _typing.Final[_typing.Optional[int]] = ...
    optI16Val: _typing.Final[_typing.Optional[int]] = ...
    optByteVal: _typing.Final[_typing.Optional[int]] = ...
    optBoolVal: _typing.Final[_typing.Optional[bool]] = ...
    timeVal: _typing.Final[apache.thrift.type.standard.thrift_types.TimeStruct] = ...
    durationVal: _typing.Final[apache.thrift.type.standard.thrift_types.DurationStruct] = ...
    lateStructVal: _typing.Final[LateDefStruct] = ...
    unionVal: _typing.Final[MyUnion] = ...
    structVal: _typing.Final[MyData] = ...
    enumVal: _typing.Final[MyEnum] = ...
    binaryVal: _typing.Final[_fbthrift_iobuf.IOBuf] = ...
    stringVal: _typing.Final[str] = ...
    doubleVal: _typing.Final[float] = ...
    floatVal: _typing.Final[float] = ...
    i64Val: _typing.Final[int] = ...
    i32Val: _typing.Final[int] = ...
    i16Val: _typing.Final[int] = ...
    byteVal: _typing.Final[int] = ...
    boolVal: _typing.Final[bool] = ...
    def __init__(
        self, *,
        mapMap: _typing.Optional[_typing.Mapping[str, _typing.Mapping[str, int]]]=...,
        listMap: _typing.Optional[_typing.Sequence[_typing.Mapping[str, int]]]=...,
        optMapVal: _typing.Optional[_typing.Mapping[str, str]]=...,
        optSetVal: _typing.Optional[_typing.AbstractSet[str]]=...,
        optListVal: _typing.Optional[_typing.Sequence[int]]=...,
        optLateStructVal: _typing.Optional[LateDefStruct]=...,
        optStructVal: _typing.Optional[MyData]=...,
        optEnumVal: _typing.Optional[MyEnum]=...,
        optBinaryVal: _typing.Optional[_fbthrift_iobuf.IOBuf]=...,
        optStringVal: _typing.Optional[str]=...,
        optDoubleVal: _typing.Optional[float]=...,
        optFloatVal: _typing.Optional[float]=...,
        optI64Val: _typing.Optional[int]=...,
        optI32Val: _typing.Optional[int]=...,
        optI16Val: _typing.Optional[int]=...,
        optByteVal: _typing.Optional[int]=...,
        optBoolVal: _typing.Optional[bool]=...,
        timeVal: _typing.Optional[apache.thrift.type.standard.thrift_types.TimeStruct]=...,
        durationVal: _typing.Optional[apache.thrift.type.standard.thrift_types.DurationStruct]=...,
        lateStructVal: _typing.Optional[LateDefStruct]=...,
        unionVal: _typing.Optional[MyUnion]=...,
        structVal: _typing.Optional[MyData]=...,
        enumVal: _typing.Optional[MyEnum]=...,
        binaryVal: _typing.Optional[_fbthrift_iobuf.IOBuf]=...,
        stringVal: _typing.Optional[str]=...,
        doubleVal: _typing.Optional[float]=...,
        floatVal: _typing.Optional[float]=...,
        i64Val: _typing.Optional[int]=...,
        i32Val: _typing.Optional[int]=...,
        i16Val: _typing.Optional[int]=...,
        byteVal: _typing.Optional[int]=...,
        boolVal: _typing.Optional[bool]=...
    ) -> None: ...

    def __call__(
        self, *,
        mapMap: _typing.Optional[_typing.Mapping[str, _typing.Mapping[str, int]]]=...,
        listMap: _typing.Optional[_typing.Sequence[_typing.Mapping[str, int]]]=...,
        optMapVal: _typing.Optional[_typing.Mapping[str, str]]=...,
        optSetVal: _typing.Optional[_typing.AbstractSet[str]]=...,
        optListVal: _typing.Optional[_typing.Sequence[int]]=...,
        optLateStructVal: _typing.Optional[LateDefStruct]=...,
        optStructVal: _typing.Optional[MyData]=...,
        optEnumVal: _typing.Optional[MyEnum]=...,
        optBinaryVal: _typing.Optional[_fbthrift_iobuf.IOBuf]=...,
        optStringVal: _typing.Optional[str]=...,
        optDoubleVal: _typing.Optional[float]=...,
        optFloatVal: _typing.Optional[float]=...,
        optI64Val: _typing.Optional[int]=...,
        optI32Val: _typing.Optional[int]=...,
        optI16Val: _typing.Optional[int]=...,
        optByteVal: _typing.Optional[int]=...,
        optBoolVal: _typing.Optional[bool]=...,
        timeVal: _typing.Optional[apache.thrift.type.standard.thrift_types.TimeStruct]=...,
        durationVal: _typing.Optional[apache.thrift.type.standard.thrift_types.DurationStruct]=...,
        lateStructVal: _typing.Optional[LateDefStruct]=...,
        unionVal: _typing.Optional[MyUnion]=...,
        structVal: _typing.Optional[MyData]=...,
        enumVal: _typing.Optional[MyEnum]=...,
        binaryVal: _typing.Optional[_fbthrift_iobuf.IOBuf]=...,
        stringVal: _typing.Optional[str]=...,
        doubleVal: _typing.Optional[float]=...,
        floatVal: _typing.Optional[float]=...,
        i64Val: _typing.Optional[int]=...,
        i32Val: _typing.Optional[int]=...,
        i16Val: _typing.Optional[int]=...,
        byteVal: _typing.Optional[int]=...,
        boolVal: _typing.Optional[bool]=...
    ) -> MyStruct: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[_typing.Mapping[str, _typing.Mapping[str, int]], _typing.Sequence[_typing.Mapping[str, int]], _typing.Mapping[str, str], _typing.AbstractSet[str], _typing.Sequence[int], LateDefStruct, MyData, MyEnum, _fbthrift_iobuf.IOBuf, str, float, float, int, int, int, int, bool, apache.thrift.type.standard.thrift_types.TimeStruct, apache.thrift.type.standard.thrift_types.DurationStruct, LateDefStruct, MyUnion, MyData, MyEnum, _fbthrift_iobuf.IOBuf, str, float, float, int, int, int, int, bool]]]: ...
    def _to_python(self) -> MyStruct: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyStruct": ...  # type: ignore


class LateDefStruct(_fbthrift_python_types.Struct):
    def __init__(
        self,
    ) -> None: ...

    def __call__(
        self,
    ) -> LateDefStruct: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[None]]]: ...
    def _to_python(self) -> LateDefStruct: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.LateDefStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.LateDefStruct": ...  # type: ignore


class Recursive(_fbthrift_python_types.Struct):
    nodes: _typing.Final[_typing.Mapping[str, Recursive]] = ...
    def __init__(
        self, *,
        nodes: _typing.Optional[_typing.Mapping[str, Recursive]]=...
    ) -> None: ...

    def __call__(
        self, *,
        nodes: _typing.Optional[_typing.Mapping[str, Recursive]]=...
    ) -> Recursive: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[_typing.Mapping[str, Recursive]]]]: ...
    def _to_python(self) -> Recursive: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.Recursive": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.Recursive": ...  # type: ignore


class Bar(_fbthrift_python_types.Struct):
    loop: _typing.Final[Loop] = ...
    def __init__(
        self, *,
        loop: _typing.Optional[Loop]=...
    ) -> None: ...

    def __call__(
        self, *,
        loop: _typing.Optional[Loop]=...
    ) -> Bar: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[Loop]]]: ...
    def _to_python(self) -> Bar: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.Bar": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.Bar": ...  # type: ignore


class Loop(_fbthrift_python_types.Struct):
    bar: _typing.Final[Bar] = ...
    def __init__(
        self, *,
        bar: _typing.Optional[Bar]=...
    ) -> None: ...

    def __call__(
        self, *,
        bar: _typing.Optional[Bar]=...
    ) -> Loop: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[Bar]]]: ...
    def _to_python(self) -> Loop: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.Loop": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.Loop": ...  # type: ignore


class MyDataFieldPatch(_fbthrift_python_types.Struct):
    data1: _typing.Final[apache.thrift.op.patch.thrift_types.StringPatch] = ...
    data2: _typing.Final[apache.thrift.op.patch.thrift_types.I32Patch] = ...
    def __init__(
        self, *,
        data1: _typing.Optional[apache.thrift.op.patch.thrift_types.StringPatch]=...,
        data2: _typing.Optional[apache.thrift.op.patch.thrift_types.I32Patch]=...
    ) -> None: ...

    def __call__(
        self, *,
        data1: _typing.Optional[apache.thrift.op.patch.thrift_types.StringPatch]=...,
        data2: _typing.Optional[apache.thrift.op.patch.thrift_types.I32Patch]=...
    ) -> MyDataFieldPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[apache.thrift.op.patch.thrift_types.StringPatch, apache.thrift.op.patch.thrift_types.I32Patch]]]: ...
    def _to_python(self) -> MyDataFieldPatch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyDataFieldPatch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyDataFieldPatch": ...  # type: ignore


class MyDataPatch(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[MyData]] = ...
    clear: _typing.Final[bool] = ...
    patchPrior: _typing.Final[MyDataFieldPatch] = ...
    ensure: _typing.Final[MyData] = ...
    patch: _typing.Final[MyDataFieldPatch] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[MyData]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[MyDataFieldPatch]=...,
        ensure: _typing.Optional[MyData]=...,
        patch: _typing.Optional[MyDataFieldPatch]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[MyData]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[MyDataFieldPatch]=...,
        ensure: _typing.Optional[MyData]=...,
        patch: _typing.Optional[MyDataFieldPatch]=...
    ) -> MyDataPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[MyData, bool, MyDataFieldPatch, MyData, MyDataFieldPatch]]]: ...
    def _to_python(self) -> MyDataPatch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyDataPatch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyDataPatch": ...  # type: ignore


class InnerUnionFieldPatch(_fbthrift_python_types.Struct):
    innerOption: _typing.Final[apache.thrift.op.patch.thrift_types.BinaryPatch] = ...
    def __init__(
        self, *,
        innerOption: _typing.Optional[apache.thrift.op.patch.thrift_types.BinaryPatch]=...
    ) -> None: ...

    def __call__(
        self, *,
        innerOption: _typing.Optional[apache.thrift.op.patch.thrift_types.BinaryPatch]=...
    ) -> InnerUnionFieldPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[apache.thrift.op.patch.thrift_types.BinaryPatch]]]: ...
    def _to_python(self) -> InnerUnionFieldPatch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.InnerUnionFieldPatch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.InnerUnionFieldPatch": ...  # type: ignore


class InnerUnionPatch(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[InnerUnion]] = ...
    clear: _typing.Final[bool] = ...
    patchPrior: _typing.Final[InnerUnionFieldPatch] = ...
    ensure: _typing.Final[InnerUnion] = ...
    patch: _typing.Final[InnerUnionFieldPatch] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[InnerUnion]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[InnerUnionFieldPatch]=...,
        ensure: _typing.Optional[InnerUnion]=...,
        patch: _typing.Optional[InnerUnionFieldPatch]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[InnerUnion]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[InnerUnionFieldPatch]=...,
        ensure: _typing.Optional[InnerUnion]=...,
        patch: _typing.Optional[InnerUnionFieldPatch]=...
    ) -> InnerUnionPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[InnerUnion, bool, InnerUnionFieldPatch, InnerUnion, InnerUnionFieldPatch]]]: ...
    def _to_python(self) -> InnerUnionPatch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.InnerUnionPatch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.InnerUnionPatch": ...  # type: ignore


class MyUnionFieldPatch(_fbthrift_python_types.Struct):
    option1: _typing.Final[apache.thrift.op.patch.thrift_types.StringPatch] = ...
    option2: _typing.Final[apache.thrift.op.patch.thrift_types.I32Patch] = ...
    option3: _typing.Final[InnerUnionPatch] = ...
    def __init__(
        self, *,
        option1: _typing.Optional[apache.thrift.op.patch.thrift_types.StringPatch]=...,
        option2: _typing.Optional[apache.thrift.op.patch.thrift_types.I32Patch]=...,
        option3: _typing.Optional[InnerUnionPatch]=...
    ) -> None: ...

    def __call__(
        self, *,
        option1: _typing.Optional[apache.thrift.op.patch.thrift_types.StringPatch]=...,
        option2: _typing.Optional[apache.thrift.op.patch.thrift_types.I32Patch]=...,
        option3: _typing.Optional[InnerUnionPatch]=...
    ) -> MyUnionFieldPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[apache.thrift.op.patch.thrift_types.StringPatch, apache.thrift.op.patch.thrift_types.I32Patch, InnerUnionPatch]]]: ...
    def _to_python(self) -> MyUnionFieldPatch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyUnionFieldPatch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyUnionFieldPatch": ...  # type: ignore


class MyUnionPatch(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[MyUnion]] = ...
    clear: _typing.Final[bool] = ...
    patchPrior: _typing.Final[MyUnionFieldPatch] = ...
    ensure: _typing.Final[MyUnion] = ...
    patch: _typing.Final[MyUnionFieldPatch] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[MyUnion]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[MyUnionFieldPatch]=...,
        ensure: _typing.Optional[MyUnion]=...,
        patch: _typing.Optional[MyUnionFieldPatch]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[MyUnion]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[MyUnionFieldPatch]=...,
        ensure: _typing.Optional[MyUnion]=...,
        patch: _typing.Optional[MyUnionFieldPatch]=...
    ) -> MyUnionPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[MyUnion, bool, MyUnionFieldPatch, MyUnion, MyUnionFieldPatch]]]: ...
    def _to_python(self) -> MyUnionPatch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyUnionPatch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyUnionPatch": ...  # type: ignore


class MyStructField10Patch(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[MyEnum]] = ...
    clear: _typing.Final[bool] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[MyEnum]=...,
        clear: _typing.Optional[bool]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[MyEnum]=...,
        clear: _typing.Optional[bool]=...
    ) -> MyStructField10Patch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[MyEnum, bool]]]: ...
    def _to_python(self) -> MyStructField10Patch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyStructField10Patch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyStructField10Patch": ...  # type: ignore


class MyStructField25Patch(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[MyEnum]] = ...
    clear: _typing.Final[bool] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[MyEnum]=...,
        clear: _typing.Optional[bool]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[MyEnum]=...,
        clear: _typing.Optional[bool]=...
    ) -> MyStructField25Patch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[MyEnum, bool]]]: ...
    def _to_python(self) -> MyStructField25Patch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyStructField25Patch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyStructField25Patch": ...  # type: ignore


class MyStructField28Patch(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[_typing.Sequence[int]]] = ...
    clear: _typing.Final[bool] = ...
    patch: _typing.Final[_typing.Mapping[int, apache.thrift.op.patch.thrift_types.I16Patch]] = ...
    remove: _typing.Final[_typing.Sequence[int]] = ...
    prepend: _typing.Final[_typing.Sequence[int]] = ...
    append: _typing.Final[_typing.Sequence[int]] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[_typing.Sequence[int]]=...,
        clear: _typing.Optional[bool]=...,
        patch: _typing.Optional[_typing.Mapping[int, apache.thrift.op.patch.thrift_types.I16Patch]]=...,
        remove: _typing.Optional[_typing.Sequence[int]]=...,
        prepend: _typing.Optional[_typing.Sequence[int]]=...,
        append: _typing.Optional[_typing.Sequence[int]]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[_typing.Sequence[int]]=...,
        clear: _typing.Optional[bool]=...,
        patch: _typing.Optional[_typing.Mapping[int, apache.thrift.op.patch.thrift_types.I16Patch]]=...,
        remove: _typing.Optional[_typing.Sequence[int]]=...,
        prepend: _typing.Optional[_typing.Sequence[int]]=...,
        append: _typing.Optional[_typing.Sequence[int]]=...
    ) -> MyStructField28Patch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[_typing.Sequence[int], bool, _typing.Mapping[int, apache.thrift.op.patch.thrift_types.I16Patch], _typing.Sequence[int], _typing.Sequence[int], _typing.Sequence[int]]]]: ...
    def _to_python(self) -> MyStructField28Patch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyStructField28Patch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyStructField28Patch": ...  # type: ignore


class MyStructField29Patch(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[_typing.AbstractSet[str]]] = ...
    clear: _typing.Final[bool] = ...
    remove: _typing.Final[_typing.AbstractSet[str]] = ...
    add: _typing.Final[_typing.AbstractSet[str]] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[_typing.AbstractSet[str]]=...,
        clear: _typing.Optional[bool]=...,
        remove: _typing.Optional[_typing.AbstractSet[str]]=...,
        add: _typing.Optional[_typing.AbstractSet[str]]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[_typing.AbstractSet[str]]=...,
        clear: _typing.Optional[bool]=...,
        remove: _typing.Optional[_typing.AbstractSet[str]]=...,
        add: _typing.Optional[_typing.AbstractSet[str]]=...
    ) -> MyStructField29Patch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[_typing.AbstractSet[str], bool, _typing.AbstractSet[str], _typing.AbstractSet[str]]]]: ...
    def _to_python(self) -> MyStructField29Patch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyStructField29Patch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyStructField29Patch": ...  # type: ignore


class MyStructField30Patch(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[_typing.Mapping[str, str]]] = ...
    clear: _typing.Final[bool] = ...
    patchPrior: _typing.Final[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.StringPatch]] = ...
    add: _typing.Final[_typing.Mapping[str, str]] = ...
    patch: _typing.Final[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.StringPatch]] = ...
    remove: _typing.Final[_typing.AbstractSet[str]] = ...
    put: _typing.Final[_typing.Mapping[str, str]] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[_typing.Mapping[str, str]]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.StringPatch]]=...,
        add: _typing.Optional[_typing.Mapping[str, str]]=...,
        patch: _typing.Optional[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.StringPatch]]=...,
        remove: _typing.Optional[_typing.AbstractSet[str]]=...,
        put: _typing.Optional[_typing.Mapping[str, str]]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[_typing.Mapping[str, str]]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.StringPatch]]=...,
        add: _typing.Optional[_typing.Mapping[str, str]]=...,
        patch: _typing.Optional[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.StringPatch]]=...,
        remove: _typing.Optional[_typing.AbstractSet[str]]=...,
        put: _typing.Optional[_typing.Mapping[str, str]]=...
    ) -> MyStructField30Patch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[_typing.Mapping[str, str], bool, _typing.Mapping[str, apache.thrift.op.patch.thrift_types.StringPatch], _typing.Mapping[str, str], _typing.Mapping[str, apache.thrift.op.patch.thrift_types.StringPatch], _typing.AbstractSet[str], _typing.Mapping[str, str]]]]: ...
    def _to_python(self) -> MyStructField30Patch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyStructField30Patch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyStructField30Patch": ...  # type: ignore


class MyStructField31Patch(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[_typing.Sequence[_typing.Mapping[str, int]]]] = ...
    clear: _typing.Final[bool] = ...
    patch: _typing.Final[_typing.Mapping[int, MyStructField31Patch1]] = ...
    remove: _typing.Final[_typing.Sequence[_typing.Mapping[str, int]]] = ...
    prepend: _typing.Final[_typing.Sequence[_typing.Mapping[str, int]]] = ...
    append: _typing.Final[_typing.Sequence[_typing.Mapping[str, int]]] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[_typing.Sequence[_typing.Mapping[str, int]]]=...,
        clear: _typing.Optional[bool]=...,
        patch: _typing.Optional[_typing.Mapping[int, MyStructField31Patch1]]=...,
        remove: _typing.Optional[_typing.Sequence[_typing.Mapping[str, int]]]=...,
        prepend: _typing.Optional[_typing.Sequence[_typing.Mapping[str, int]]]=...,
        append: _typing.Optional[_typing.Sequence[_typing.Mapping[str, int]]]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[_typing.Sequence[_typing.Mapping[str, int]]]=...,
        clear: _typing.Optional[bool]=...,
        patch: _typing.Optional[_typing.Mapping[int, MyStructField31Patch1]]=...,
        remove: _typing.Optional[_typing.Sequence[_typing.Mapping[str, int]]]=...,
        prepend: _typing.Optional[_typing.Sequence[_typing.Mapping[str, int]]]=...,
        append: _typing.Optional[_typing.Sequence[_typing.Mapping[str, int]]]=...
    ) -> MyStructField31Patch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[_typing.Sequence[_typing.Mapping[str, int]], bool, _typing.Mapping[int, MyStructField31Patch1], _typing.Sequence[_typing.Mapping[str, int]], _typing.Sequence[_typing.Mapping[str, int]], _typing.Sequence[_typing.Mapping[str, int]]]]]: ...
    def _to_python(self) -> MyStructField31Patch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyStructField31Patch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyStructField31Patch": ...  # type: ignore


class MyStructField31Patch1(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[_typing.Mapping[str, int]]] = ...
    clear: _typing.Final[bool] = ...
    patchPrior: _typing.Final[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.I32Patch]] = ...
    add: _typing.Final[_typing.Mapping[str, int]] = ...
    patch: _typing.Final[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.I32Patch]] = ...
    remove: _typing.Final[_typing.AbstractSet[str]] = ...
    put: _typing.Final[_typing.Mapping[str, int]] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[_typing.Mapping[str, int]]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.I32Patch]]=...,
        add: _typing.Optional[_typing.Mapping[str, int]]=...,
        patch: _typing.Optional[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.I32Patch]]=...,
        remove: _typing.Optional[_typing.AbstractSet[str]]=...,
        put: _typing.Optional[_typing.Mapping[str, int]]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[_typing.Mapping[str, int]]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.I32Patch]]=...,
        add: _typing.Optional[_typing.Mapping[str, int]]=...,
        patch: _typing.Optional[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.I32Patch]]=...,
        remove: _typing.Optional[_typing.AbstractSet[str]]=...,
        put: _typing.Optional[_typing.Mapping[str, int]]=...
    ) -> MyStructField31Patch1: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[_typing.Mapping[str, int], bool, _typing.Mapping[str, apache.thrift.op.patch.thrift_types.I32Patch], _typing.Mapping[str, int], _typing.Mapping[str, apache.thrift.op.patch.thrift_types.I32Patch], _typing.AbstractSet[str], _typing.Mapping[str, int]]]]: ...
    def _to_python(self) -> MyStructField31Patch1: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyStructField31Patch1": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyStructField31Patch1": ...  # type: ignore


class MyStructField32Patch(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[_typing.Mapping[str, _typing.Mapping[str, int]]]] = ...
    clear: _typing.Final[bool] = ...
    patchPrior: _typing.Final[_typing.Mapping[str, MyStructField32Patch1]] = ...
    add: _typing.Final[_typing.Mapping[str, _typing.Mapping[str, int]]] = ...
    patch: _typing.Final[_typing.Mapping[str, MyStructField32Patch1]] = ...
    remove: _typing.Final[_typing.AbstractSet[str]] = ...
    put: _typing.Final[_typing.Mapping[str, _typing.Mapping[str, int]]] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[_typing.Mapping[str, _typing.Mapping[str, int]]]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[_typing.Mapping[str, MyStructField32Patch1]]=...,
        add: _typing.Optional[_typing.Mapping[str, _typing.Mapping[str, int]]]=...,
        patch: _typing.Optional[_typing.Mapping[str, MyStructField32Patch1]]=...,
        remove: _typing.Optional[_typing.AbstractSet[str]]=...,
        put: _typing.Optional[_typing.Mapping[str, _typing.Mapping[str, int]]]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[_typing.Mapping[str, _typing.Mapping[str, int]]]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[_typing.Mapping[str, MyStructField32Patch1]]=...,
        add: _typing.Optional[_typing.Mapping[str, _typing.Mapping[str, int]]]=...,
        patch: _typing.Optional[_typing.Mapping[str, MyStructField32Patch1]]=...,
        remove: _typing.Optional[_typing.AbstractSet[str]]=...,
        put: _typing.Optional[_typing.Mapping[str, _typing.Mapping[str, int]]]=...
    ) -> MyStructField32Patch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[_typing.Mapping[str, _typing.Mapping[str, int]], bool, _typing.Mapping[str, MyStructField32Patch1], _typing.Mapping[str, _typing.Mapping[str, int]], _typing.Mapping[str, MyStructField32Patch1], _typing.AbstractSet[str], _typing.Mapping[str, _typing.Mapping[str, int]]]]]: ...
    def _to_python(self) -> MyStructField32Patch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyStructField32Patch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyStructField32Patch": ...  # type: ignore


class MyStructField32Patch1(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[_typing.Mapping[str, int]]] = ...
    clear: _typing.Final[bool] = ...
    patchPrior: _typing.Final[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.I32Patch]] = ...
    add: _typing.Final[_typing.Mapping[str, int]] = ...
    patch: _typing.Final[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.I32Patch]] = ...
    remove: _typing.Final[_typing.AbstractSet[str]] = ...
    put: _typing.Final[_typing.Mapping[str, int]] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[_typing.Mapping[str, int]]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.I32Patch]]=...,
        add: _typing.Optional[_typing.Mapping[str, int]]=...,
        patch: _typing.Optional[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.I32Patch]]=...,
        remove: _typing.Optional[_typing.AbstractSet[str]]=...,
        put: _typing.Optional[_typing.Mapping[str, int]]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[_typing.Mapping[str, int]]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.I32Patch]]=...,
        add: _typing.Optional[_typing.Mapping[str, int]]=...,
        patch: _typing.Optional[_typing.Mapping[str, apache.thrift.op.patch.thrift_types.I32Patch]]=...,
        remove: _typing.Optional[_typing.AbstractSet[str]]=...,
        put: _typing.Optional[_typing.Mapping[str, int]]=...
    ) -> MyStructField32Patch1: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[_typing.Mapping[str, int], bool, _typing.Mapping[str, apache.thrift.op.patch.thrift_types.I32Patch], _typing.Mapping[str, int], _typing.Mapping[str, apache.thrift.op.patch.thrift_types.I32Patch], _typing.AbstractSet[str], _typing.Mapping[str, int]]]]: ...
    def _to_python(self) -> MyStructField32Patch1: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyStructField32Patch1": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyStructField32Patch1": ...  # type: ignore


class MyStructFieldPatch(_fbthrift_python_types.Struct):
    mapMap: _typing.Final[MyStructField32Patch] = ...
    listMap: _typing.Final[MyStructField31Patch] = ...
    optMapVal: _typing.Final[MyStructField30Patch] = ...
    optSetVal: _typing.Final[MyStructField29Patch] = ...
    optListVal: _typing.Final[MyStructField28Patch] = ...
    optLateStructVal: _typing.Final[LateDefStructPatch] = ...
    optStructVal: _typing.Final[MyDataPatch] = ...
    optEnumVal: _typing.Final[MyStructField25Patch] = ...
    optBinaryVal: _typing.Final[apache.thrift.op.patch.thrift_types.BinaryPatch] = ...
    optStringVal: _typing.Final[apache.thrift.op.patch.thrift_types.StringPatch] = ...
    optDoubleVal: _typing.Final[apache.thrift.op.patch.thrift_types.DoublePatch] = ...
    optFloatVal: _typing.Final[apache.thrift.op.patch.thrift_types.FloatPatch] = ...
    optI64Val: _typing.Final[apache.thrift.op.patch.thrift_types.I64Patch] = ...
    optI32Val: _typing.Final[apache.thrift.op.patch.thrift_types.I32Patch] = ...
    optI16Val: _typing.Final[apache.thrift.op.patch.thrift_types.I16Patch] = ...
    optByteVal: _typing.Final[apache.thrift.op.patch.thrift_types.BytePatch] = ...
    optBoolVal: _typing.Final[apache.thrift.op.patch.thrift_types.BoolPatch] = ...
    timeVal: _typing.Final[apache.thrift.op.patch.thrift_types.TimePatch] = ...
    durationVal: _typing.Final[apache.thrift.op.patch.thrift_types.DurationPatch] = ...
    lateStructVal: _typing.Final[LateDefStructPatch] = ...
    unionVal: _typing.Final[MyUnionPatch] = ...
    structVal: _typing.Final[MyDataPatch] = ...
    enumVal: _typing.Final[MyStructField10Patch] = ...
    binaryVal: _typing.Final[apache.thrift.op.patch.thrift_types.BinaryPatch] = ...
    stringVal: _typing.Final[apache.thrift.op.patch.thrift_types.StringPatch] = ...
    doubleVal: _typing.Final[apache.thrift.op.patch.thrift_types.DoublePatch] = ...
    floatVal: _typing.Final[apache.thrift.op.patch.thrift_types.FloatPatch] = ...
    i64Val: _typing.Final[apache.thrift.op.patch.thrift_types.I64Patch] = ...
    i32Val: _typing.Final[apache.thrift.op.patch.thrift_types.I32Patch] = ...
    i16Val: _typing.Final[apache.thrift.op.patch.thrift_types.I16Patch] = ...
    byteVal: _typing.Final[apache.thrift.op.patch.thrift_types.BytePatch] = ...
    boolVal: _typing.Final[apache.thrift.op.patch.thrift_types.BoolPatch] = ...
    def __init__(
        self, *,
        mapMap: _typing.Optional[MyStructField32Patch]=...,
        listMap: _typing.Optional[MyStructField31Patch]=...,
        optMapVal: _typing.Optional[MyStructField30Patch]=...,
        optSetVal: _typing.Optional[MyStructField29Patch]=...,
        optListVal: _typing.Optional[MyStructField28Patch]=...,
        optLateStructVal: _typing.Optional[LateDefStructPatch]=...,
        optStructVal: _typing.Optional[MyDataPatch]=...,
        optEnumVal: _typing.Optional[MyStructField25Patch]=...,
        optBinaryVal: _typing.Optional[apache.thrift.op.patch.thrift_types.BinaryPatch]=...,
        optStringVal: _typing.Optional[apache.thrift.op.patch.thrift_types.StringPatch]=...,
        optDoubleVal: _typing.Optional[apache.thrift.op.patch.thrift_types.DoublePatch]=...,
        optFloatVal: _typing.Optional[apache.thrift.op.patch.thrift_types.FloatPatch]=...,
        optI64Val: _typing.Optional[apache.thrift.op.patch.thrift_types.I64Patch]=...,
        optI32Val: _typing.Optional[apache.thrift.op.patch.thrift_types.I32Patch]=...,
        optI16Val: _typing.Optional[apache.thrift.op.patch.thrift_types.I16Patch]=...,
        optByteVal: _typing.Optional[apache.thrift.op.patch.thrift_types.BytePatch]=...,
        optBoolVal: _typing.Optional[apache.thrift.op.patch.thrift_types.BoolPatch]=...,
        timeVal: _typing.Optional[apache.thrift.op.patch.thrift_types.TimePatch]=...,
        durationVal: _typing.Optional[apache.thrift.op.patch.thrift_types.DurationPatch]=...,
        lateStructVal: _typing.Optional[LateDefStructPatch]=...,
        unionVal: _typing.Optional[MyUnionPatch]=...,
        structVal: _typing.Optional[MyDataPatch]=...,
        enumVal: _typing.Optional[MyStructField10Patch]=...,
        binaryVal: _typing.Optional[apache.thrift.op.patch.thrift_types.BinaryPatch]=...,
        stringVal: _typing.Optional[apache.thrift.op.patch.thrift_types.StringPatch]=...,
        doubleVal: _typing.Optional[apache.thrift.op.patch.thrift_types.DoublePatch]=...,
        floatVal: _typing.Optional[apache.thrift.op.patch.thrift_types.FloatPatch]=...,
        i64Val: _typing.Optional[apache.thrift.op.patch.thrift_types.I64Patch]=...,
        i32Val: _typing.Optional[apache.thrift.op.patch.thrift_types.I32Patch]=...,
        i16Val: _typing.Optional[apache.thrift.op.patch.thrift_types.I16Patch]=...,
        byteVal: _typing.Optional[apache.thrift.op.patch.thrift_types.BytePatch]=...,
        boolVal: _typing.Optional[apache.thrift.op.patch.thrift_types.BoolPatch]=...
    ) -> None: ...

    def __call__(
        self, *,
        mapMap: _typing.Optional[MyStructField32Patch]=...,
        listMap: _typing.Optional[MyStructField31Patch]=...,
        optMapVal: _typing.Optional[MyStructField30Patch]=...,
        optSetVal: _typing.Optional[MyStructField29Patch]=...,
        optListVal: _typing.Optional[MyStructField28Patch]=...,
        optLateStructVal: _typing.Optional[LateDefStructPatch]=...,
        optStructVal: _typing.Optional[MyDataPatch]=...,
        optEnumVal: _typing.Optional[MyStructField25Patch]=...,
        optBinaryVal: _typing.Optional[apache.thrift.op.patch.thrift_types.BinaryPatch]=...,
        optStringVal: _typing.Optional[apache.thrift.op.patch.thrift_types.StringPatch]=...,
        optDoubleVal: _typing.Optional[apache.thrift.op.patch.thrift_types.DoublePatch]=...,
        optFloatVal: _typing.Optional[apache.thrift.op.patch.thrift_types.FloatPatch]=...,
        optI64Val: _typing.Optional[apache.thrift.op.patch.thrift_types.I64Patch]=...,
        optI32Val: _typing.Optional[apache.thrift.op.patch.thrift_types.I32Patch]=...,
        optI16Val: _typing.Optional[apache.thrift.op.patch.thrift_types.I16Patch]=...,
        optByteVal: _typing.Optional[apache.thrift.op.patch.thrift_types.BytePatch]=...,
        optBoolVal: _typing.Optional[apache.thrift.op.patch.thrift_types.BoolPatch]=...,
        timeVal: _typing.Optional[apache.thrift.op.patch.thrift_types.TimePatch]=...,
        durationVal: _typing.Optional[apache.thrift.op.patch.thrift_types.DurationPatch]=...,
        lateStructVal: _typing.Optional[LateDefStructPatch]=...,
        unionVal: _typing.Optional[MyUnionPatch]=...,
        structVal: _typing.Optional[MyDataPatch]=...,
        enumVal: _typing.Optional[MyStructField10Patch]=...,
        binaryVal: _typing.Optional[apache.thrift.op.patch.thrift_types.BinaryPatch]=...,
        stringVal: _typing.Optional[apache.thrift.op.patch.thrift_types.StringPatch]=...,
        doubleVal: _typing.Optional[apache.thrift.op.patch.thrift_types.DoublePatch]=...,
        floatVal: _typing.Optional[apache.thrift.op.patch.thrift_types.FloatPatch]=...,
        i64Val: _typing.Optional[apache.thrift.op.patch.thrift_types.I64Patch]=...,
        i32Val: _typing.Optional[apache.thrift.op.patch.thrift_types.I32Patch]=...,
        i16Val: _typing.Optional[apache.thrift.op.patch.thrift_types.I16Patch]=...,
        byteVal: _typing.Optional[apache.thrift.op.patch.thrift_types.BytePatch]=...,
        boolVal: _typing.Optional[apache.thrift.op.patch.thrift_types.BoolPatch]=...
    ) -> MyStructFieldPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[MyStructField32Patch, MyStructField31Patch, MyStructField30Patch, MyStructField29Patch, MyStructField28Patch, LateDefStructPatch, MyDataPatch, MyStructField25Patch, apache.thrift.op.patch.thrift_types.BinaryPatch, apache.thrift.op.patch.thrift_types.StringPatch, apache.thrift.op.patch.thrift_types.DoublePatch, apache.thrift.op.patch.thrift_types.FloatPatch, apache.thrift.op.patch.thrift_types.I64Patch, apache.thrift.op.patch.thrift_types.I32Patch, apache.thrift.op.patch.thrift_types.I16Patch, apache.thrift.op.patch.thrift_types.BytePatch, apache.thrift.op.patch.thrift_types.BoolPatch, apache.thrift.op.patch.thrift_types.TimePatch, apache.thrift.op.patch.thrift_types.DurationPatch, LateDefStructPatch, MyUnionPatch, MyDataPatch, MyStructField10Patch, apache.thrift.op.patch.thrift_types.BinaryPatch, apache.thrift.op.patch.thrift_types.StringPatch, apache.thrift.op.patch.thrift_types.DoublePatch, apache.thrift.op.patch.thrift_types.FloatPatch, apache.thrift.op.patch.thrift_types.I64Patch, apache.thrift.op.patch.thrift_types.I32Patch, apache.thrift.op.patch.thrift_types.I16Patch, apache.thrift.op.patch.thrift_types.BytePatch, apache.thrift.op.patch.thrift_types.BoolPatch]]]: ...
    def _to_python(self) -> MyStructFieldPatch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyStructFieldPatch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyStructFieldPatch": ...  # type: ignore


class MyStructPatch(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[MyStruct]] = ...
    clear: _typing.Final[bool] = ...
    patchPrior: _typing.Final[MyStructFieldPatch] = ...
    ensure: _typing.Final[MyStruct] = ...
    patch: _typing.Final[MyStructFieldPatch] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[MyStruct]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[MyStructFieldPatch]=...,
        ensure: _typing.Optional[MyStruct]=...,
        patch: _typing.Optional[MyStructFieldPatch]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[MyStruct]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[MyStructFieldPatch]=...,
        ensure: _typing.Optional[MyStruct]=...,
        patch: _typing.Optional[MyStructFieldPatch]=...
    ) -> MyStructPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[MyStruct, bool, MyStructFieldPatch, MyStruct, MyStructFieldPatch]]]: ...
    def _to_python(self) -> MyStructPatch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyStructPatch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyStructPatch": ...  # type: ignore


class LateDefStructFieldPatch(_fbthrift_python_types.Struct):
    def __init__(
        self,
    ) -> None: ...

    def __call__(
        self,
    ) -> LateDefStructFieldPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[None]]]: ...
    def _to_python(self) -> LateDefStructFieldPatch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.LateDefStructFieldPatch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.LateDefStructFieldPatch": ...  # type: ignore


class LateDefStructPatch(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[LateDefStruct]] = ...
    clear: _typing.Final[bool] = ...
    patchPrior: _typing.Final[LateDefStructFieldPatch] = ...
    ensure: _typing.Final[LateDefStruct] = ...
    patch: _typing.Final[LateDefStructFieldPatch] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[LateDefStruct]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[LateDefStructFieldPatch]=...,
        ensure: _typing.Optional[LateDefStruct]=...,
        patch: _typing.Optional[LateDefStructFieldPatch]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[LateDefStruct]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[LateDefStructFieldPatch]=...,
        ensure: _typing.Optional[LateDefStruct]=...,
        patch: _typing.Optional[LateDefStructFieldPatch]=...
    ) -> LateDefStructPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[LateDefStruct, bool, LateDefStructFieldPatch, LateDefStruct, LateDefStructFieldPatch]]]: ...
    def _to_python(self) -> LateDefStructPatch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.LateDefStructPatch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.LateDefStructPatch": ...  # type: ignore


class RecursiveField1Patch(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[_typing.Mapping[str, Recursive]]] = ...
    clear: _typing.Final[bool] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[_typing.Mapping[str, Recursive]]=...,
        clear: _typing.Optional[bool]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[_typing.Mapping[str, Recursive]]=...,
        clear: _typing.Optional[bool]=...
    ) -> RecursiveField1Patch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[_typing.Mapping[str, Recursive], bool]]]: ...
    def _to_python(self) -> RecursiveField1Patch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.RecursiveField1Patch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.RecursiveField1Patch": ...  # type: ignore


class RecursiveFieldPatch(_fbthrift_python_types.Struct):
    nodes: _typing.Final[RecursiveField1Patch] = ...
    def __init__(
        self, *,
        nodes: _typing.Optional[RecursiveField1Patch]=...
    ) -> None: ...

    def __call__(
        self, *,
        nodes: _typing.Optional[RecursiveField1Patch]=...
    ) -> RecursiveFieldPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[RecursiveField1Patch]]]: ...
    def _to_python(self) -> RecursiveFieldPatch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.RecursiveFieldPatch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.RecursiveFieldPatch": ...  # type: ignore


class RecursivePatch(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[Recursive]] = ...
    clear: _typing.Final[bool] = ...
    patchPrior: _typing.Final[RecursiveFieldPatch] = ...
    ensure: _typing.Final[Recursive] = ...
    patch: _typing.Final[RecursiveFieldPatch] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[Recursive]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[RecursiveFieldPatch]=...,
        ensure: _typing.Optional[Recursive]=...,
        patch: _typing.Optional[RecursiveFieldPatch]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[Recursive]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[RecursiveFieldPatch]=...,
        ensure: _typing.Optional[Recursive]=...,
        patch: _typing.Optional[RecursiveFieldPatch]=...
    ) -> RecursivePatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[Recursive, bool, RecursiveFieldPatch, Recursive, RecursiveFieldPatch]]]: ...
    def _to_python(self) -> RecursivePatch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.RecursivePatch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.RecursivePatch": ...  # type: ignore


class BarFieldPatch(_fbthrift_python_types.Struct):
    loop: _typing.Final[LoopPatch] = ...
    def __init__(
        self, *,
        loop: _typing.Optional[LoopPatch]=...
    ) -> None: ...

    def __call__(
        self, *,
        loop: _typing.Optional[LoopPatch]=...
    ) -> BarFieldPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[LoopPatch]]]: ...
    def _to_python(self) -> BarFieldPatch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.BarFieldPatch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.BarFieldPatch": ...  # type: ignore


class BarPatch(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[Bar]] = ...
    clear: _typing.Final[bool] = ...
    patchPrior: _typing.Final[BarFieldPatch] = ...
    ensure: _typing.Final[Bar] = ...
    patch: _typing.Final[BarFieldPatch] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[Bar]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[BarFieldPatch]=...,
        ensure: _typing.Optional[Bar]=...,
        patch: _typing.Optional[BarFieldPatch]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[Bar]=...,
        clear: _typing.Optional[bool]=...,
        patchPrior: _typing.Optional[BarFieldPatch]=...,
        ensure: _typing.Optional[Bar]=...,
        patch: _typing.Optional[BarFieldPatch]=...
    ) -> BarPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[Bar, bool, BarFieldPatch, Bar, BarFieldPatch]]]: ...
    def _to_python(self) -> BarPatch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.BarPatch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.BarPatch": ...  # type: ignore


class LoopFieldPatch(_fbthrift_python_types.Struct):
    bar: _typing.Final[BarPatch] = ...
    def __init__(
        self, *,
        bar: _typing.Optional[BarPatch]=...
    ) -> None: ...

    def __call__(
        self, *,
        bar: _typing.Optional[BarPatch]=...
    ) -> LoopFieldPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[BarPatch]]]: ...
    def _to_python(self) -> LoopFieldPatch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.LoopFieldPatch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.LoopFieldPatch": ...  # type: ignore


class LoopPatch(_fbthrift_python_types.Struct):
    assign: _typing.Final[_typing.Optional[Loop]] = ...
    clear: _typing.Final[bool] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[Loop]=...,
        clear: _typing.Optional[bool]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[Loop]=...,
        clear: _typing.Optional[bool]=...
    ) -> LoopPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[Loop, bool]]]: ...
    def _to_python(self) -> LoopPatch: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.LoopPatch": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.LoopPatch": ...  # type: ignore
