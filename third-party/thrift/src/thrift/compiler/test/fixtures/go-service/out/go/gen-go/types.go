// Autogenerated by Thrift for thrift/compiler/test/fixtures/go-service/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "fmt"
    "reflect"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = reflect.Ptr
var _ = thrift.VOID
var _ = metadata.GoUnusedProtection__

type GetEntityRequest struct {
    Id string `thrift:"id,1" json:"id" db:"id"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*GetEntityRequest)(nil)

func NewGetEntityRequest() *GetEntityRequest {
    return (&GetEntityRequest{}).setDefaults()
}

func (x *GetEntityRequest) GetId() string {
    return x.Id
}

func (x *GetEntityRequest) SetIdNonCompat(value string) *GetEntityRequest {
    x.Id = value
    return x
}

func (x *GetEntityRequest) SetId(value string) *GetEntityRequest {
    x.Id = value
    return x
}

func (x *GetEntityRequest) writeField1(p thrift.Encoder) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
        return thrift.PrependError("GetEntityRequest write field begin error: ", err)
    }

    item := x.Id
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("GetEntityRequest write field end error: ", err)
    }
    return nil
}

func (x *GetEntityRequest) readField1(p thrift.Decoder) error {  // Id
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Id = result
    return nil
}



func (x *GetEntityRequest) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("GetEntityRequest"); err != nil {
        return thrift.PrependError("GetEntityRequest write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("GetEntityRequest write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("GetEntityRequest write struct end error: ", err)
    }
    return nil
}

func (x *GetEntityRequest) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("GetEntityRequest read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("GetEntityRequest field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "id")):  // id
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("GetEntityRequest read struct end error: ", err)
    }

    return nil
}

func (x *GetEntityRequest) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *GetEntityRequest) setDefaults() *GetEntityRequest {
    return x.
        SetIdNonCompat("")
}

func (x *GetEntityRequest) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_GetEntityRequest
}

type GetEntityResponse struct {
    Entity string `thrift:"entity,1" json:"entity" db:"entity"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*GetEntityResponse)(nil)

func NewGetEntityResponse() *GetEntityResponse {
    return (&GetEntityResponse{}).setDefaults()
}

func (x *GetEntityResponse) GetEntity() string {
    return x.Entity
}

func (x *GetEntityResponse) SetEntityNonCompat(value string) *GetEntityResponse {
    x.Entity = value
    return x
}

func (x *GetEntityResponse) SetEntity(value string) *GetEntityResponse {
    x.Entity = value
    return x
}

func (x *GetEntityResponse) writeField1(p thrift.Encoder) error {  // Entity
    if err := p.WriteFieldBegin("entity", thrift.STRING, 1); err != nil {
        return thrift.PrependError("GetEntityResponse write field begin error: ", err)
    }

    item := x.Entity
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("GetEntityResponse write field end error: ", err)
    }
    return nil
}

func (x *GetEntityResponse) readField1(p thrift.Decoder) error {  // Entity
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Entity = result
    return nil
}



func (x *GetEntityResponse) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("GetEntityResponse"); err != nil {
        return thrift.PrependError("GetEntityResponse write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("GetEntityResponse write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("GetEntityResponse write struct end error: ", err)
    }
    return nil
}

func (x *GetEntityResponse) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("GetEntityResponse read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("GetEntityResponse field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "entity")):  // entity
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("GetEntityResponse read struct end error: ", err)
    }

    return nil
}

func (x *GetEntityResponse) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *GetEntityResponse) setDefaults() *GetEntityResponse {
    return x.
        SetEntityNonCompat("")
}

func (x *GetEntityResponse) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_GetEntityResponse
}

type NonComparableStruct struct {
    Foo string `thrift:"foo,1" json:"foo" db:"foo"`
    Bar []string `thrift:"bar,2" json:"bar" db:"bar"`
    Baz map[*NonComparableStruct]int64 `thrift:"baz,3" json:"baz" db:"baz"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*NonComparableStruct)(nil)

func NewNonComparableStruct() *NonComparableStruct {
    return (&NonComparableStruct{}).setDefaults()
}

func (x *NonComparableStruct) GetFoo() string {
    return x.Foo
}

func (x *NonComparableStruct) GetBar() []string {
    if !x.IsSetBar() {
        return make([]string, 0)
    }
    return x.Bar
}

func (x *NonComparableStruct) GetBaz() map[*NonComparableStruct]int64 {
    if !x.IsSetBaz() {
        return make(map[*NonComparableStruct]int64)
    }
    return x.Baz
}

func (x *NonComparableStruct) SetFooNonCompat(value string) *NonComparableStruct {
    x.Foo = value
    return x
}

func (x *NonComparableStruct) SetFoo(value string) *NonComparableStruct {
    x.Foo = value
    return x
}

func (x *NonComparableStruct) SetBarNonCompat(value []string) *NonComparableStruct {
    x.Bar = value
    return x
}

func (x *NonComparableStruct) SetBar(value []string) *NonComparableStruct {
    x.Bar = value
    return x
}

func (x *NonComparableStruct) SetBazNonCompat(value map[*NonComparableStruct]int64) *NonComparableStruct {
    x.Baz = value
    return x
}

func (x *NonComparableStruct) SetBaz(value map[*NonComparableStruct]int64) *NonComparableStruct {
    x.Baz = value
    return x
}

func (x *NonComparableStruct) IsSetBar() bool {
    return x != nil && x.Bar != nil
}

func (x *NonComparableStruct) IsSetBaz() bool {
    return x != nil && x.Baz != nil
}

func (x *NonComparableStruct) writeField1(p thrift.Encoder) error {  // Foo
    if err := p.WriteFieldBegin("foo", thrift.STRING, 1); err != nil {
        return thrift.PrependError("NonComparableStruct write field begin error: ", err)
    }

    item := x.Foo
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("NonComparableStruct write field end error: ", err)
    }
    return nil
}

func (x *NonComparableStruct) writeField2(p thrift.Encoder) error {  // Bar
    if err := p.WriteFieldBegin("bar", thrift.LIST, 2); err != nil {
        return thrift.PrependError("NonComparableStruct write field begin error: ", err)
    }

    item := x.Bar
    if err := p.WriteListBegin(thrift.STRING, len(item)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteString(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("NonComparableStruct write field end error: ", err)
    }
    return nil
}

func (x *NonComparableStruct) writeField3(p thrift.Encoder) error {  // Baz
    if err := p.WriteFieldBegin("baz", thrift.MAP, 3); err != nil {
        return thrift.PrependError("NonComparableStruct write field begin error: ", err)
    }

    item := x.Baz
    if err := p.WriteMapBegin(thrift.STRUCT, thrift.I64, len(item)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range item {
        if k == nil {
            return fmt.Errorf("%T write map: nil key is not allowed.", item)
        }
    
        {
            item := k
            if err := item.Write(p); err != nil {
                return err
            }
        }
    
        {
            item := v
            if err := p.WriteI64(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("NonComparableStruct write field end error: ", err)
    }
    return nil
}

func (x *NonComparableStruct) readField1(p thrift.Decoder) error {  // Foo
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Foo = result
    return nil
}

func (x *NonComparableStruct) readField2(p thrift.Decoder) error {  // Bar
    _ /* elemType */, size, err := p.ReadListBegin()
    if err != nil {
        return thrift.PrependError("error reading list begin: ", err)
    }
    
    listResult := make([]string, 0, size)
    for i := 0; i < size; i++ {
        var elem string
        {
            result, err := p.ReadString()
            if err != nil {
                return err
            }
            elem = result
        }
        listResult = append(listResult, elem)
    }
    
    if err := p.ReadListEnd(); err != nil {
        return thrift.PrependError("error reading list end: ", err)
    }
    result := listResult

    x.Bar = result
    return nil
}

func (x *NonComparableStruct) readField3(p thrift.Decoder) error {  // Baz
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
    if err != nil {
        return thrift.PrependError("error reading map begin: ", err)
    }
    
    mapResult := make(map[*NonComparableStruct]int64, size)
    for i := 0; i < size; i++ {
        var key *NonComparableStruct
        {
            result := NewNonComparableStruct()
            err := result.Read(p)
            if err != nil {
                return err
            }
            key = result
        }
    
        var value int64
        {
            result, err := p.ReadI64()
            if err != nil {
                return err
            }
            value = result
        }
    
        mapResult[key] = value
    }
    
    if err := p.ReadMapEnd(); err != nil {
        return thrift.PrependError("error reading map end: ", err)
    }
    result := mapResult

    x.Baz = result
    return nil
}



func (x *NonComparableStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("NonComparableStruct"); err != nil {
        return thrift.PrependError("NonComparableStruct write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("NonComparableStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("NonComparableStruct write struct end error: ", err)
    }
    return nil
}

func (x *NonComparableStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("NonComparableStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("NonComparableStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "foo")):  // foo
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.LIST) || (id == thrift.NO_FIELD_ID && fieldName == "bar")):  // bar
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.MAP) || (id == thrift.NO_FIELD_ID && fieldName == "baz")):  // baz
            fieldReadErr = x.readField3(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("NonComparableStruct read struct end error: ", err)
    }

    return nil
}

func (x *NonComparableStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *NonComparableStruct) setDefaults() *NonComparableStruct {
    return x.
        SetFooNonCompat("").
        SetBarNonCompat(make([]string, 0)).
        SetBazNonCompat(make(map[*NonComparableStruct]int64))
}

func (x *NonComparableStruct) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_NonComparableStruct
}

type reqGetEntityGetEntity struct {
    R *GetEntityRequest `thrift:"r,1" json:"r" db:"r"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetEntity)(nil)

// Deprecated: GetEntityGetEntityArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetEntityArgsDeprecated = reqGetEntityGetEntity

func newReqGetEntityGetEntity() *reqGetEntityGetEntity {
    return (&reqGetEntityGetEntity{}).setDefaults()
}

func (x *reqGetEntityGetEntity) GetR() *GetEntityRequest {
    if !x.IsSetR() {
        return nil
    }
    return x.R
}

func (x *reqGetEntityGetEntity) SetRNonCompat(value *GetEntityRequest) *reqGetEntityGetEntity {
    x.R = value
    return x
}

func (x *reqGetEntityGetEntity) SetR(value *GetEntityRequest) *reqGetEntityGetEntity {
    x.R = value
    return x
}

func (x *reqGetEntityGetEntity) IsSetR() bool {
    return x != nil && x.R != nil
}

func (x *reqGetEntityGetEntity) writeField1(p thrift.Encoder) error {  // R
    if !x.IsSetR() {
        return nil
    }

    if err := p.WriteFieldBegin("r", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError("reqGetEntityGetEntity write field begin error: ", err)
    }

    item := x.R
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetEntity write field end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetEntity) readField1(p thrift.Decoder) error {  // R
    result := NewGetEntityRequest()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.R = result
    return nil
}




func (x *reqGetEntityGetEntity) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetEntity"); err != nil {
        return thrift.PrependError("reqGetEntityGetEntity write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetEntity write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetEntity write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetEntity) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetEntity read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetEntity field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "r")):  // r
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetEntity read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetEntity) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetEntity) setDefaults() *reqGetEntityGetEntity {
    return x.
        SetRNonCompat(NewGetEntityRequest())
}

type respGetEntityGetEntity struct {
    Success *GetEntityResponse `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetEntity)(nil)
var _ thrift.WritableResult = (*respGetEntityGetEntity)(nil)

// Deprecated: GetEntityGetEntityResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetEntityResultDeprecated = respGetEntityGetEntity

func newRespGetEntityGetEntity() *respGetEntityGetEntity {
    return (&respGetEntityGetEntity{}).setDefaults()
}

func (x *respGetEntityGetEntity) GetSuccess() *GetEntityResponse {
    if !x.IsSetSuccess() {
        return nil
    }
    return x.Success
}

func (x *respGetEntityGetEntity) SetSuccessNonCompat(value *GetEntityResponse) *respGetEntityGetEntity {
    x.Success = value
    return x
}

func (x *respGetEntityGetEntity) SetSuccess(value *GetEntityResponse) *respGetEntityGetEntity {
    x.Success = value
    return x
}

func (x *respGetEntityGetEntity) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetEntity) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
        return thrift.PrependError("respGetEntityGetEntity write field begin error: ", err)
    }

    item := x.Success
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetEntity write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetEntity) readField0(p thrift.Decoder) error {  // Success
    result := NewGetEntityResponse()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.Success = result
    return nil
}




func (x *respGetEntityGetEntity) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetEntity) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetEntity"); err != nil {
        return thrift.PrependError("respGetEntityGetEntity write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetEntity write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetEntity write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetEntity) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetEntity read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetEntity field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetEntity read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetEntity) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetEntity) setDefaults() *respGetEntityGetEntity {
    return x
}

type reqGetEntityGetBool struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetBool)(nil)

// Deprecated: GetEntityGetBoolArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetBoolArgsDeprecated = reqGetEntityGetBool

func newReqGetEntityGetBool() *reqGetEntityGetBool {
    return (&reqGetEntityGetBool{}).setDefaults()
}



func (x *reqGetEntityGetBool) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetBool"); err != nil {
        return thrift.PrependError("reqGetEntityGetBool write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetBool write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetBool write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetBool) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetBool read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetBool field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetBool read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetBool) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetBool) setDefaults() *reqGetEntityGetBool {
    return x
}

type respGetEntityGetBool struct {
    Success *bool `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetBool)(nil)
var _ thrift.WritableResult = (*respGetEntityGetBool)(nil)

// Deprecated: GetEntityGetBoolResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetBoolResultDeprecated = respGetEntityGetBool

func newRespGetEntityGetBool() *respGetEntityGetBool {
    return (&respGetEntityGetBool{}).setDefaults()
}

func (x *respGetEntityGetBool) GetSuccess() bool {
    if !x.IsSetSuccess() {
        return false
    }
    return *x.Success
}

func (x *respGetEntityGetBool) SetSuccessNonCompat(value bool) *respGetEntityGetBool {
    x.Success = &value
    return x
}

func (x *respGetEntityGetBool) SetSuccess(value *bool) *respGetEntityGetBool {
    x.Success = value
    return x
}

func (x *respGetEntityGetBool) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetBool) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
        return thrift.PrependError("respGetEntityGetBool write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteBool(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetBool write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetBool) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadBool()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respGetEntityGetBool) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetBool) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetBool"); err != nil {
        return thrift.PrependError("respGetEntityGetBool write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetBool write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetBool write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetBool) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetBool read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetBool field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.BOOL) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetBool read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetBool) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetBool) setDefaults() *respGetEntityGetBool {
    return x
}

type reqGetEntityGetByte struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetByte)(nil)

// Deprecated: GetEntityGetByteArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetByteArgsDeprecated = reqGetEntityGetByte

func newReqGetEntityGetByte() *reqGetEntityGetByte {
    return (&reqGetEntityGetByte{}).setDefaults()
}



func (x *reqGetEntityGetByte) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetByte"); err != nil {
        return thrift.PrependError("reqGetEntityGetByte write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetByte write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetByte write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetByte) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetByte read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetByte field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetByte read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetByte) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetByte) setDefaults() *reqGetEntityGetByte {
    return x
}

type respGetEntityGetByte struct {
    Success *int8 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetByte)(nil)
var _ thrift.WritableResult = (*respGetEntityGetByte)(nil)

// Deprecated: GetEntityGetByteResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetByteResultDeprecated = respGetEntityGetByte

func newRespGetEntityGetByte() *respGetEntityGetByte {
    return (&respGetEntityGetByte{}).setDefaults()
}

func (x *respGetEntityGetByte) GetSuccess() int8 {
    if !x.IsSetSuccess() {
        return 0
    }
    return *x.Success
}

func (x *respGetEntityGetByte) SetSuccessNonCompat(value int8) *respGetEntityGetByte {
    x.Success = &value
    return x
}

func (x *respGetEntityGetByte) SetSuccess(value *int8) *respGetEntityGetByte {
    x.Success = value
    return x
}

func (x *respGetEntityGetByte) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetByte) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.BYTE, 0); err != nil {
        return thrift.PrependError("respGetEntityGetByte write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteByte(byte(item)); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetByte write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetByte) readField0(p thrift.Decoder) error {  // Success
    resultByte, err := p.ReadByte()
    result := int8(resultByte)
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respGetEntityGetByte) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetByte) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetByte"); err != nil {
        return thrift.PrependError("respGetEntityGetByte write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetByte write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetByte write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetByte) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetByte read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetByte field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.BYTE) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetByte read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetByte) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetByte) setDefaults() *respGetEntityGetByte {
    return x
}

type reqGetEntityGetI16 struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetI16)(nil)

// Deprecated: GetEntityGetI16ArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetI16ArgsDeprecated = reqGetEntityGetI16

func newReqGetEntityGetI16() *reqGetEntityGetI16 {
    return (&reqGetEntityGetI16{}).setDefaults()
}



func (x *reqGetEntityGetI16) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetI16"); err != nil {
        return thrift.PrependError("reqGetEntityGetI16 write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetI16 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetI16 write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetI16) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetI16 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetI16 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetI16 read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetI16) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetI16) setDefaults() *reqGetEntityGetI16 {
    return x
}

type respGetEntityGetI16 struct {
    Success *int16 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetI16)(nil)
var _ thrift.WritableResult = (*respGetEntityGetI16)(nil)

// Deprecated: GetEntityGetI16ResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetI16ResultDeprecated = respGetEntityGetI16

func newRespGetEntityGetI16() *respGetEntityGetI16 {
    return (&respGetEntityGetI16{}).setDefaults()
}

func (x *respGetEntityGetI16) GetSuccess() int16 {
    if !x.IsSetSuccess() {
        return 0
    }
    return *x.Success
}

func (x *respGetEntityGetI16) SetSuccessNonCompat(value int16) *respGetEntityGetI16 {
    x.Success = &value
    return x
}

func (x *respGetEntityGetI16) SetSuccess(value *int16) *respGetEntityGetI16 {
    x.Success = value
    return x
}

func (x *respGetEntityGetI16) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetI16) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.I16, 0); err != nil {
        return thrift.PrependError("respGetEntityGetI16 write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteI16(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetI16 write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetI16) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadI16()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respGetEntityGetI16) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetI16) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetI16"); err != nil {
        return thrift.PrependError("respGetEntityGetI16 write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetI16 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetI16 write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetI16) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetI16 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetI16 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.I16) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetI16 read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetI16) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetI16) setDefaults() *respGetEntityGetI16 {
    return x
}

type reqGetEntityGetI32 struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetI32)(nil)

// Deprecated: GetEntityGetI32ArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetI32ArgsDeprecated = reqGetEntityGetI32

func newReqGetEntityGetI32() *reqGetEntityGetI32 {
    return (&reqGetEntityGetI32{}).setDefaults()
}



func (x *reqGetEntityGetI32) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetI32"); err != nil {
        return thrift.PrependError("reqGetEntityGetI32 write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetI32 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetI32 write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetI32) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetI32 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetI32 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetI32 read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetI32) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetI32) setDefaults() *reqGetEntityGetI32 {
    return x
}

type respGetEntityGetI32 struct {
    Success *int32 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetI32)(nil)
var _ thrift.WritableResult = (*respGetEntityGetI32)(nil)

// Deprecated: GetEntityGetI32ResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetI32ResultDeprecated = respGetEntityGetI32

func newRespGetEntityGetI32() *respGetEntityGetI32 {
    return (&respGetEntityGetI32{}).setDefaults()
}

func (x *respGetEntityGetI32) GetSuccess() int32 {
    if !x.IsSetSuccess() {
        return 0
    }
    return *x.Success
}

func (x *respGetEntityGetI32) SetSuccessNonCompat(value int32) *respGetEntityGetI32 {
    x.Success = &value
    return x
}

func (x *respGetEntityGetI32) SetSuccess(value *int32) *respGetEntityGetI32 {
    x.Success = value
    return x
}

func (x *respGetEntityGetI32) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetI32) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.I32, 0); err != nil {
        return thrift.PrependError("respGetEntityGetI32 write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetI32 write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetI32) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respGetEntityGetI32) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetI32) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetI32"); err != nil {
        return thrift.PrependError("respGetEntityGetI32 write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetI32 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetI32 write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetI32) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetI32 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetI32 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetI32 read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetI32) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetI32) setDefaults() *respGetEntityGetI32 {
    return x
}

type reqGetEntityGetI64 struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetI64)(nil)

// Deprecated: GetEntityGetI64ArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetI64ArgsDeprecated = reqGetEntityGetI64

func newReqGetEntityGetI64() *reqGetEntityGetI64 {
    return (&reqGetEntityGetI64{}).setDefaults()
}



func (x *reqGetEntityGetI64) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetI64"); err != nil {
        return thrift.PrependError("reqGetEntityGetI64 write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetI64 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetI64 write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetI64) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetI64 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetI64 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetI64 read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetI64) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetI64) setDefaults() *reqGetEntityGetI64 {
    return x
}

type respGetEntityGetI64 struct {
    Success *int64 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetI64)(nil)
var _ thrift.WritableResult = (*respGetEntityGetI64)(nil)

// Deprecated: GetEntityGetI64ResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetI64ResultDeprecated = respGetEntityGetI64

func newRespGetEntityGetI64() *respGetEntityGetI64 {
    return (&respGetEntityGetI64{}).setDefaults()
}

func (x *respGetEntityGetI64) GetSuccess() int64 {
    if !x.IsSetSuccess() {
        return 0
    }
    return *x.Success
}

func (x *respGetEntityGetI64) SetSuccessNonCompat(value int64) *respGetEntityGetI64 {
    x.Success = &value
    return x
}

func (x *respGetEntityGetI64) SetSuccess(value *int64) *respGetEntityGetI64 {
    x.Success = value
    return x
}

func (x *respGetEntityGetI64) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetI64) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.I64, 0); err != nil {
        return thrift.PrependError("respGetEntityGetI64 write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetI64 write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetI64) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respGetEntityGetI64) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetI64) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetI64"); err != nil {
        return thrift.PrependError("respGetEntityGetI64 write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetI64 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetI64 write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetI64) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetI64 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetI64 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetI64 read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetI64) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetI64) setDefaults() *respGetEntityGetI64 {
    return x
}

type reqGetEntityGetDouble struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetDouble)(nil)

// Deprecated: GetEntityGetDoubleArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetDoubleArgsDeprecated = reqGetEntityGetDouble

func newReqGetEntityGetDouble() *reqGetEntityGetDouble {
    return (&reqGetEntityGetDouble{}).setDefaults()
}



func (x *reqGetEntityGetDouble) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetDouble"); err != nil {
        return thrift.PrependError("reqGetEntityGetDouble write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetDouble write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetDouble write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetDouble) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetDouble read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetDouble field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetDouble read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetDouble) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetDouble) setDefaults() *reqGetEntityGetDouble {
    return x
}

type respGetEntityGetDouble struct {
    Success *float64 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetDouble)(nil)
var _ thrift.WritableResult = (*respGetEntityGetDouble)(nil)

// Deprecated: GetEntityGetDoubleResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetDoubleResultDeprecated = respGetEntityGetDouble

func newRespGetEntityGetDouble() *respGetEntityGetDouble {
    return (&respGetEntityGetDouble{}).setDefaults()
}

func (x *respGetEntityGetDouble) GetSuccess() float64 {
    if !x.IsSetSuccess() {
        return 0.0
    }
    return *x.Success
}

func (x *respGetEntityGetDouble) SetSuccessNonCompat(value float64) *respGetEntityGetDouble {
    x.Success = &value
    return x
}

func (x *respGetEntityGetDouble) SetSuccess(value *float64) *respGetEntityGetDouble {
    x.Success = value
    return x
}

func (x *respGetEntityGetDouble) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetDouble) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.DOUBLE, 0); err != nil {
        return thrift.PrependError("respGetEntityGetDouble write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteDouble(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetDouble write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetDouble) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadDouble()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respGetEntityGetDouble) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetDouble) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetDouble"); err != nil {
        return thrift.PrependError("respGetEntityGetDouble write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetDouble write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetDouble write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetDouble) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetDouble read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetDouble field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.DOUBLE) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetDouble read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetDouble) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetDouble) setDefaults() *respGetEntityGetDouble {
    return x
}

type reqGetEntityGetString struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetString)(nil)

// Deprecated: GetEntityGetStringArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetStringArgsDeprecated = reqGetEntityGetString

func newReqGetEntityGetString() *reqGetEntityGetString {
    return (&reqGetEntityGetString{}).setDefaults()
}



func (x *reqGetEntityGetString) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetString"); err != nil {
        return thrift.PrependError("reqGetEntityGetString write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetString write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetString write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetString) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetString read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetString field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetString read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetString) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetString) setDefaults() *reqGetEntityGetString {
    return x
}

type respGetEntityGetString struct {
    Success *string `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetString)(nil)
var _ thrift.WritableResult = (*respGetEntityGetString)(nil)

// Deprecated: GetEntityGetStringResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetStringResultDeprecated = respGetEntityGetString

func newRespGetEntityGetString() *respGetEntityGetString {
    return (&respGetEntityGetString{}).setDefaults()
}

func (x *respGetEntityGetString) GetSuccess() string {
    if !x.IsSetSuccess() {
        return ""
    }
    return *x.Success
}

func (x *respGetEntityGetString) SetSuccessNonCompat(value string) *respGetEntityGetString {
    x.Success = &value
    return x
}

func (x *respGetEntityGetString) SetSuccess(value *string) *respGetEntityGetString {
    x.Success = value
    return x
}

func (x *respGetEntityGetString) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetString) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
        return thrift.PrependError("respGetEntityGetString write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetString write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetString) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respGetEntityGetString) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetString) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetString"); err != nil {
        return thrift.PrependError("respGetEntityGetString write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetString write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetString write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetString) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetString read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetString field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetString read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetString) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetString) setDefaults() *respGetEntityGetString {
    return x
}

type reqGetEntityGetBinary struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetBinary)(nil)

// Deprecated: GetEntityGetBinaryArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetBinaryArgsDeprecated = reqGetEntityGetBinary

func newReqGetEntityGetBinary() *reqGetEntityGetBinary {
    return (&reqGetEntityGetBinary{}).setDefaults()
}



func (x *reqGetEntityGetBinary) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetBinary"); err != nil {
        return thrift.PrependError("reqGetEntityGetBinary write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetBinary write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetBinary write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetBinary) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetBinary read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetBinary field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetBinary read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetBinary) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetBinary) setDefaults() *reqGetEntityGetBinary {
    return x
}

type respGetEntityGetBinary struct {
    Success []byte `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetBinary)(nil)
var _ thrift.WritableResult = (*respGetEntityGetBinary)(nil)

// Deprecated: GetEntityGetBinaryResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetBinaryResultDeprecated = respGetEntityGetBinary

func newRespGetEntityGetBinary() *respGetEntityGetBinary {
    return (&respGetEntityGetBinary{}).setDefaults()
}

func (x *respGetEntityGetBinary) GetSuccess() []byte {
    if !x.IsSetSuccess() {
        return []byte("")
    }
    return x.Success
}

func (x *respGetEntityGetBinary) SetSuccessNonCompat(value []byte) *respGetEntityGetBinary {
    x.Success = value
    return x
}

func (x *respGetEntityGetBinary) SetSuccess(value []byte) *respGetEntityGetBinary {
    x.Success = value
    return x
}

func (x *respGetEntityGetBinary) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetBinary) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
        return thrift.PrependError("respGetEntityGetBinary write field begin error: ", err)
    }

    item := x.Success
    if err := p.WriteBinary(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetBinary write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetBinary) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadBinary()
    if err != nil {
        return err
    }

    x.Success = result
    return nil
}



func (x *respGetEntityGetBinary) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetBinary) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetBinary"); err != nil {
        return thrift.PrependError("respGetEntityGetBinary write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetBinary write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetBinary write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetBinary) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetBinary read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetBinary field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetBinary read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetBinary) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetBinary) setDefaults() *respGetEntityGetBinary {
    return x
}

type reqGetEntityGetMap struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetMap)(nil)

// Deprecated: GetEntityGetMapArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetMapArgsDeprecated = reqGetEntityGetMap

func newReqGetEntityGetMap() *reqGetEntityGetMap {
    return (&reqGetEntityGetMap{}).setDefaults()
}



func (x *reqGetEntityGetMap) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetMap"); err != nil {
        return thrift.PrependError("reqGetEntityGetMap write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetMap write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetMap write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetMap) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetMap read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetMap field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetMap read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetMap) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetMap) setDefaults() *reqGetEntityGetMap {
    return x
}

type respGetEntityGetMap struct {
    Success map[string]string `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetMap)(nil)
var _ thrift.WritableResult = (*respGetEntityGetMap)(nil)

// Deprecated: GetEntityGetMapResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetMapResultDeprecated = respGetEntityGetMap

func newRespGetEntityGetMap() *respGetEntityGetMap {
    return (&respGetEntityGetMap{}).setDefaults()
}

func (x *respGetEntityGetMap) GetSuccess() map[string]string {
    if !x.IsSetSuccess() {
        return make(map[string]string)
    }
    return x.Success
}

func (x *respGetEntityGetMap) SetSuccessNonCompat(value map[string]string) *respGetEntityGetMap {
    x.Success = value
    return x
}

func (x *respGetEntityGetMap) SetSuccess(value map[string]string) *respGetEntityGetMap {
    x.Success = value
    return x
}

func (x *respGetEntityGetMap) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetMap) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
        return thrift.PrependError("respGetEntityGetMap write field begin error: ", err)
    }

    item := x.Success
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range item {
        {
            item := k
            if err := p.WriteString(item); err != nil {
                return err
            }
        }
    
        {
            item := v
            if err := p.WriteString(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetMap write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetMap) readField0(p thrift.Decoder) error {  // Success
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
    if err != nil {
        return thrift.PrependError("error reading map begin: ", err)
    }
    
    mapResult := make(map[string]string, size)
    for i := 0; i < size; i++ {
        var key string
        {
            result, err := p.ReadString()
            if err != nil {
                return err
            }
            key = result
        }
    
        var value string
        {
            result, err := p.ReadString()
            if err != nil {
                return err
            }
            value = result
        }
    
        mapResult[key] = value
    }
    
    if err := p.ReadMapEnd(); err != nil {
        return thrift.PrependError("error reading map end: ", err)
    }
    result := mapResult

    x.Success = result
    return nil
}



func (x *respGetEntityGetMap) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetMap) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetMap"); err != nil {
        return thrift.PrependError("respGetEntityGetMap write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetMap write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetMap write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetMap) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetMap read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetMap field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.MAP) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetMap read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetMap) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetMap) setDefaults() *respGetEntityGetMap {
    return x
}

type reqGetEntityGetSet struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetSet)(nil)

// Deprecated: GetEntityGetSetArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetSetArgsDeprecated = reqGetEntityGetSet

func newReqGetEntityGetSet() *reqGetEntityGetSet {
    return (&reqGetEntityGetSet{}).setDefaults()
}



func (x *reqGetEntityGetSet) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetSet"); err != nil {
        return thrift.PrependError("reqGetEntityGetSet write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetSet write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetSet write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetSet) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetSet read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetSet field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetSet read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetSet) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetSet) setDefaults() *reqGetEntityGetSet {
    return x
}

type respGetEntityGetSet struct {
    Success []string `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetSet)(nil)
var _ thrift.WritableResult = (*respGetEntityGetSet)(nil)

// Deprecated: GetEntityGetSetResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetSetResultDeprecated = respGetEntityGetSet

func newRespGetEntityGetSet() *respGetEntityGetSet {
    return (&respGetEntityGetSet{}).setDefaults()
}

func (x *respGetEntityGetSet) GetSuccess() []string {
    if !x.IsSetSuccess() {
        return make([]string, 0)
    }
    return x.Success
}

func (x *respGetEntityGetSet) SetSuccessNonCompat(value []string) *respGetEntityGetSet {
    x.Success = value
    return x
}

func (x *respGetEntityGetSet) SetSuccess(value []string) *respGetEntityGetSet {
    x.Success = value
    return x
}

func (x *respGetEntityGetSet) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetSet) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.SET, 0); err != nil {
        return thrift.PrependError("respGetEntityGetSet write field begin error: ", err)
    }

    item := x.Success
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
        return thrift.PrependError("error writing set begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteString(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteSetEnd(); err != nil {
        return thrift.PrependError("error writing set end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetSet write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetSet) readField0(p thrift.Decoder) error {  // Success
    _ /* elemType */, size, err := p.ReadSetBegin()
    if err != nil {
        return thrift.PrependError("error reading set begin: ", err)
    }
    
    setResult := make([]string, 0, size)
    for i := 0; i < size; i++ {
        var elem string
        {
            result, err := p.ReadString()
            if err != nil {
                return err
            }
            elem = result
        }
        setResult = append(setResult, elem)
    }
    
    if err := p.ReadSetEnd(); err != nil {
        return thrift.PrependError("error reading set end: ", err)
    }
    result := setResult

    x.Success = result
    return nil
}



func (x *respGetEntityGetSet) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetSet) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetSet"); err != nil {
        return thrift.PrependError("respGetEntityGetSet write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetSet write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetSet write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetSet) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetSet read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetSet field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.SET) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetSet read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetSet) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetSet) setDefaults() *respGetEntityGetSet {
    return x
}

type reqGetEntityGetList struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetList)(nil)

// Deprecated: GetEntityGetListArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetListArgsDeprecated = reqGetEntityGetList

func newReqGetEntityGetList() *reqGetEntityGetList {
    return (&reqGetEntityGetList{}).setDefaults()
}



func (x *reqGetEntityGetList) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetList"); err != nil {
        return thrift.PrependError("reqGetEntityGetList write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetList write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetList write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetList) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetList read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetList field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetList read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetList) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetList) setDefaults() *reqGetEntityGetList {
    return x
}

type respGetEntityGetList struct {
    Success []string `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetList)(nil)
var _ thrift.WritableResult = (*respGetEntityGetList)(nil)

// Deprecated: GetEntityGetListResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetListResultDeprecated = respGetEntityGetList

func newRespGetEntityGetList() *respGetEntityGetList {
    return (&respGetEntityGetList{}).setDefaults()
}

func (x *respGetEntityGetList) GetSuccess() []string {
    if !x.IsSetSuccess() {
        return make([]string, 0)
    }
    return x.Success
}

func (x *respGetEntityGetList) SetSuccessNonCompat(value []string) *respGetEntityGetList {
    x.Success = value
    return x
}

func (x *respGetEntityGetList) SetSuccess(value []string) *respGetEntityGetList {
    x.Success = value
    return x
}

func (x *respGetEntityGetList) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetList) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
        return thrift.PrependError("respGetEntityGetList write field begin error: ", err)
    }

    item := x.Success
    if err := p.WriteListBegin(thrift.STRING, len(item)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteString(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetList write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetList) readField0(p thrift.Decoder) error {  // Success
    _ /* elemType */, size, err := p.ReadListBegin()
    if err != nil {
        return thrift.PrependError("error reading list begin: ", err)
    }
    
    listResult := make([]string, 0, size)
    for i := 0; i < size; i++ {
        var elem string
        {
            result, err := p.ReadString()
            if err != nil {
                return err
            }
            elem = result
        }
        listResult = append(listResult, elem)
    }
    
    if err := p.ReadListEnd(); err != nil {
        return thrift.PrependError("error reading list end: ", err)
    }
    result := listResult

    x.Success = result
    return nil
}



func (x *respGetEntityGetList) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetList) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetList"); err != nil {
        return thrift.PrependError("respGetEntityGetList write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetList write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetList write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetList) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetList read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetList field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.LIST) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetList read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetList) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetList) setDefaults() *respGetEntityGetList {
    return x
}

type reqGetEntityGetLegacyStuff struct {
    NumNeg2 int64 `thrift:"numNeg2,-2" json:"numNeg2" db:"numNeg2"`
    NumNeg1 int64 `thrift:"numNeg1,-1" json:"numNeg1" db:"numNeg1"`
    NumPos int64 `thrift:"numPos,1" json:"numPos" db:"numPos"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetLegacyStuff)(nil)

// Deprecated: GetEntityGetLegacyStuffArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetLegacyStuffArgsDeprecated = reqGetEntityGetLegacyStuff

func newReqGetEntityGetLegacyStuff() *reqGetEntityGetLegacyStuff {
    return (&reqGetEntityGetLegacyStuff{}).setDefaults()
}

func (x *reqGetEntityGetLegacyStuff) GetNumNeg2() int64 {
    return x.NumNeg2
}

func (x *reqGetEntityGetLegacyStuff) GetNumNeg1() int64 {
    return x.NumNeg1
}

func (x *reqGetEntityGetLegacyStuff) GetNumPos() int64 {
    return x.NumPos
}

func (x *reqGetEntityGetLegacyStuff) SetNumNeg2NonCompat(value int64) *reqGetEntityGetLegacyStuff {
    x.NumNeg2 = value
    return x
}

func (x *reqGetEntityGetLegacyStuff) SetNumNeg2(value int64) *reqGetEntityGetLegacyStuff {
    x.NumNeg2 = value
    return x
}

func (x *reqGetEntityGetLegacyStuff) SetNumNeg1NonCompat(value int64) *reqGetEntityGetLegacyStuff {
    x.NumNeg1 = value
    return x
}

func (x *reqGetEntityGetLegacyStuff) SetNumNeg1(value int64) *reqGetEntityGetLegacyStuff {
    x.NumNeg1 = value
    return x
}

func (x *reqGetEntityGetLegacyStuff) SetNumPosNonCompat(value int64) *reqGetEntityGetLegacyStuff {
    x.NumPos = value
    return x
}

func (x *reqGetEntityGetLegacyStuff) SetNumPos(value int64) *reqGetEntityGetLegacyStuff {
    x.NumPos = value
    return x
}

func (x *reqGetEntityGetLegacyStuff) writeField_2(p thrift.Encoder) error {  // NumNeg2
    if err := p.WriteFieldBegin("numNeg2", thrift.I64, -2); err != nil {
        return thrift.PrependError("reqGetEntityGetLegacyStuff write field begin error: ", err)
    }

    item := x.NumNeg2
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetLegacyStuff write field end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetLegacyStuff) writeField_1(p thrift.Encoder) error {  // NumNeg1
    if err := p.WriteFieldBegin("numNeg1", thrift.I64, -1); err != nil {
        return thrift.PrependError("reqGetEntityGetLegacyStuff write field begin error: ", err)
    }

    item := x.NumNeg1
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetLegacyStuff write field end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetLegacyStuff) writeField1(p thrift.Encoder) error {  // NumPos
    if err := p.WriteFieldBegin("numPos", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqGetEntityGetLegacyStuff write field begin error: ", err)
    }

    item := x.NumPos
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetLegacyStuff write field end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetLegacyStuff) readField_2(p thrift.Decoder) error {  // NumNeg2
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.NumNeg2 = result
    return nil
}

func (x *reqGetEntityGetLegacyStuff) readField_1(p thrift.Decoder) error {  // NumNeg1
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.NumNeg1 = result
    return nil
}

func (x *reqGetEntityGetLegacyStuff) readField1(p thrift.Decoder) error {  // NumPos
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.NumPos = result
    return nil
}



func (x *reqGetEntityGetLegacyStuff) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetLegacyStuff"); err != nil {
        return thrift.PrependError("reqGetEntityGetLegacyStuff write struct begin error: ", err)
    }

    if err := x.writeField_2(p); err != nil {
        return err
    }
    if err := x.writeField_1(p); err != nil {
        return err
    }
    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetLegacyStuff write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetLegacyStuff write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetLegacyStuff) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetLegacyStuff read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetLegacyStuff field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == -2 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "numNeg2")):  // numNeg2
            fieldReadErr = x.readField_2(p)
        case ((id == -1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "numNeg1")):  // numNeg1
            fieldReadErr = x.readField_1(p)
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "numPos")):  // numPos
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetLegacyStuff read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetLegacyStuff) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetLegacyStuff) setDefaults() *reqGetEntityGetLegacyStuff {
    return x.
        SetNumNeg2NonCompat(0).
        SetNumNeg1NonCompat(0).
        SetNumPosNonCompat(0)
}

type respGetEntityGetLegacyStuff struct {
    Success *int32 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetLegacyStuff)(nil)
var _ thrift.WritableResult = (*respGetEntityGetLegacyStuff)(nil)

// Deprecated: GetEntityGetLegacyStuffResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetLegacyStuffResultDeprecated = respGetEntityGetLegacyStuff

func newRespGetEntityGetLegacyStuff() *respGetEntityGetLegacyStuff {
    return (&respGetEntityGetLegacyStuff{}).setDefaults()
}

func (x *respGetEntityGetLegacyStuff) GetSuccess() int32 {
    if !x.IsSetSuccess() {
        return 0
    }
    return *x.Success
}

func (x *respGetEntityGetLegacyStuff) SetSuccessNonCompat(value int32) *respGetEntityGetLegacyStuff {
    x.Success = &value
    return x
}

func (x *respGetEntityGetLegacyStuff) SetSuccess(value *int32) *respGetEntityGetLegacyStuff {
    x.Success = value
    return x
}

func (x *respGetEntityGetLegacyStuff) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetLegacyStuff) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.I32, 0); err != nil {
        return thrift.PrependError("respGetEntityGetLegacyStuff write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetLegacyStuff write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetLegacyStuff) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respGetEntityGetLegacyStuff) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetLegacyStuff) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetLegacyStuff"); err != nil {
        return thrift.PrependError("respGetEntityGetLegacyStuff write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetLegacyStuff write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetLegacyStuff write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetLegacyStuff) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetLegacyStuff read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetLegacyStuff field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetLegacyStuff read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetLegacyStuff) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetLegacyStuff) setDefaults() *respGetEntityGetLegacyStuff {
    return x
}

type reqGetEntityGetCtxCollision struct {
    Ctx int64 `thrift:"ctx,1" json:"ctx" db:"ctx"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetCtxCollision)(nil)

// Deprecated: GetEntityGetCtxCollisionArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetCtxCollisionArgsDeprecated = reqGetEntityGetCtxCollision

func newReqGetEntityGetCtxCollision() *reqGetEntityGetCtxCollision {
    return (&reqGetEntityGetCtxCollision{}).setDefaults()
}

func (x *reqGetEntityGetCtxCollision) GetCtx() int64 {
    return x.Ctx
}

func (x *reqGetEntityGetCtxCollision) SetCtxNonCompat(value int64) *reqGetEntityGetCtxCollision {
    x.Ctx = value
    return x
}

func (x *reqGetEntityGetCtxCollision) SetCtx(value int64) *reqGetEntityGetCtxCollision {
    x.Ctx = value
    return x
}

func (x *reqGetEntityGetCtxCollision) writeField1(p thrift.Encoder) error {  // Ctx
    if err := p.WriteFieldBegin("ctx", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqGetEntityGetCtxCollision write field begin error: ", err)
    }

    item := x.Ctx
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetCtxCollision write field end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetCtxCollision) readField1(p thrift.Decoder) error {  // Ctx
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Ctx = result
    return nil
}



func (x *reqGetEntityGetCtxCollision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetCtxCollision"); err != nil {
        return thrift.PrependError("reqGetEntityGetCtxCollision write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetCtxCollision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetCtxCollision write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetCtxCollision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetCtxCollision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetCtxCollision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "ctx")):  // ctx
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetCtxCollision read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetCtxCollision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetCtxCollision) setDefaults() *reqGetEntityGetCtxCollision {
    return x.
        SetCtxNonCompat(0)
}

type respGetEntityGetCtxCollision struct {
    Success *int32 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetCtxCollision)(nil)
var _ thrift.WritableResult = (*respGetEntityGetCtxCollision)(nil)

// Deprecated: GetEntityGetCtxCollisionResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetCtxCollisionResultDeprecated = respGetEntityGetCtxCollision

func newRespGetEntityGetCtxCollision() *respGetEntityGetCtxCollision {
    return (&respGetEntityGetCtxCollision{}).setDefaults()
}

func (x *respGetEntityGetCtxCollision) GetSuccess() int32 {
    if !x.IsSetSuccess() {
        return 0
    }
    return *x.Success
}

func (x *respGetEntityGetCtxCollision) SetSuccessNonCompat(value int32) *respGetEntityGetCtxCollision {
    x.Success = &value
    return x
}

func (x *respGetEntityGetCtxCollision) SetSuccess(value *int32) *respGetEntityGetCtxCollision {
    x.Success = value
    return x
}

func (x *respGetEntityGetCtxCollision) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetCtxCollision) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.I32, 0); err != nil {
        return thrift.PrependError("respGetEntityGetCtxCollision write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetCtxCollision write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetCtxCollision) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respGetEntityGetCtxCollision) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetCtxCollision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetCtxCollision"); err != nil {
        return thrift.PrependError("respGetEntityGetCtxCollision write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetCtxCollision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetCtxCollision write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetCtxCollision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetCtxCollision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetCtxCollision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetCtxCollision read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetCtxCollision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetCtxCollision) setDefaults() *respGetEntityGetCtxCollision {
    return x
}

type reqGetEntityGetCtx1Collision struct {
    Ctx int64 `thrift:"ctx,1" json:"ctx" db:"ctx"`
    Ctx1 int64 `thrift:"ctx1,2" json:"ctx1" db:"ctx1"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetCtx1Collision)(nil)

// Deprecated: GetEntityGetCtx1CollisionArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetCtx1CollisionArgsDeprecated = reqGetEntityGetCtx1Collision

func newReqGetEntityGetCtx1Collision() *reqGetEntityGetCtx1Collision {
    return (&reqGetEntityGetCtx1Collision{}).setDefaults()
}

func (x *reqGetEntityGetCtx1Collision) GetCtx() int64 {
    return x.Ctx
}

func (x *reqGetEntityGetCtx1Collision) GetCtx1() int64 {
    return x.Ctx1
}

func (x *reqGetEntityGetCtx1Collision) SetCtxNonCompat(value int64) *reqGetEntityGetCtx1Collision {
    x.Ctx = value
    return x
}

func (x *reqGetEntityGetCtx1Collision) SetCtx(value int64) *reqGetEntityGetCtx1Collision {
    x.Ctx = value
    return x
}

func (x *reqGetEntityGetCtx1Collision) SetCtx1NonCompat(value int64) *reqGetEntityGetCtx1Collision {
    x.Ctx1 = value
    return x
}

func (x *reqGetEntityGetCtx1Collision) SetCtx1(value int64) *reqGetEntityGetCtx1Collision {
    x.Ctx1 = value
    return x
}

func (x *reqGetEntityGetCtx1Collision) writeField1(p thrift.Encoder) error {  // Ctx
    if err := p.WriteFieldBegin("ctx", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqGetEntityGetCtx1Collision write field begin error: ", err)
    }

    item := x.Ctx
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetCtx1Collision write field end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetCtx1Collision) writeField2(p thrift.Encoder) error {  // Ctx1
    if err := p.WriteFieldBegin("ctx1", thrift.I64, 2); err != nil {
        return thrift.PrependError("reqGetEntityGetCtx1Collision write field begin error: ", err)
    }

    item := x.Ctx1
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetCtx1Collision write field end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetCtx1Collision) readField1(p thrift.Decoder) error {  // Ctx
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Ctx = result
    return nil
}

func (x *reqGetEntityGetCtx1Collision) readField2(p thrift.Decoder) error {  // Ctx1
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Ctx1 = result
    return nil
}



func (x *reqGetEntityGetCtx1Collision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetCtx1Collision"); err != nil {
        return thrift.PrependError("reqGetEntityGetCtx1Collision write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetCtx1Collision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetCtx1Collision write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetCtx1Collision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetCtx1Collision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetCtx1Collision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "ctx")):  // ctx
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "ctx1")):  // ctx1
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetCtx1Collision read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetCtx1Collision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetCtx1Collision) setDefaults() *reqGetEntityGetCtx1Collision {
    return x.
        SetCtxNonCompat(0).
        SetCtx1NonCompat(0)
}

type respGetEntityGetCtx1Collision struct {
    Success *int32 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetCtx1Collision)(nil)
var _ thrift.WritableResult = (*respGetEntityGetCtx1Collision)(nil)

// Deprecated: GetEntityGetCtx1CollisionResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetCtx1CollisionResultDeprecated = respGetEntityGetCtx1Collision

func newRespGetEntityGetCtx1Collision() *respGetEntityGetCtx1Collision {
    return (&respGetEntityGetCtx1Collision{}).setDefaults()
}

func (x *respGetEntityGetCtx1Collision) GetSuccess() int32 {
    if !x.IsSetSuccess() {
        return 0
    }
    return *x.Success
}

func (x *respGetEntityGetCtx1Collision) SetSuccessNonCompat(value int32) *respGetEntityGetCtx1Collision {
    x.Success = &value
    return x
}

func (x *respGetEntityGetCtx1Collision) SetSuccess(value *int32) *respGetEntityGetCtx1Collision {
    x.Success = value
    return x
}

func (x *respGetEntityGetCtx1Collision) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetCtx1Collision) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.I32, 0); err != nil {
        return thrift.PrependError("respGetEntityGetCtx1Collision write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetCtx1Collision write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetCtx1Collision) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respGetEntityGetCtx1Collision) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetCtx1Collision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetCtx1Collision"); err != nil {
        return thrift.PrependError("respGetEntityGetCtx1Collision write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetCtx1Collision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetCtx1Collision write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetCtx1Collision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetCtx1Collision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetCtx1Collision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetCtx1Collision read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetCtx1Collision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetCtx1Collision) setDefaults() *respGetEntityGetCtx1Collision {
    return x
}

type reqGetEntityGetContextCollision struct {
    Context int64 `thrift:"context,1" json:"context" db:"context"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetContextCollision)(nil)

// Deprecated: GetEntityGetContextCollisionArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetContextCollisionArgsDeprecated = reqGetEntityGetContextCollision

func newReqGetEntityGetContextCollision() *reqGetEntityGetContextCollision {
    return (&reqGetEntityGetContextCollision{}).setDefaults()
}

func (x *reqGetEntityGetContextCollision) GetContext() int64 {
    return x.Context
}

func (x *reqGetEntityGetContextCollision) SetContextNonCompat(value int64) *reqGetEntityGetContextCollision {
    x.Context = value
    return x
}

func (x *reqGetEntityGetContextCollision) SetContext(value int64) *reqGetEntityGetContextCollision {
    x.Context = value
    return x
}

func (x *reqGetEntityGetContextCollision) writeField1(p thrift.Encoder) error {  // Context
    if err := p.WriteFieldBegin("context", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqGetEntityGetContextCollision write field begin error: ", err)
    }

    item := x.Context
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetContextCollision write field end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetContextCollision) readField1(p thrift.Decoder) error {  // Context
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Context = result
    return nil
}



func (x *reqGetEntityGetContextCollision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetContextCollision"); err != nil {
        return thrift.PrependError("reqGetEntityGetContextCollision write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetContextCollision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetContextCollision write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetContextCollision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetContextCollision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetContextCollision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "context")):  // context
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetContextCollision read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetContextCollision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetContextCollision) setDefaults() *reqGetEntityGetContextCollision {
    return x.
        SetContextNonCompat(0)
}

type respGetEntityGetContextCollision struct {
    Success *int32 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetContextCollision)(nil)
var _ thrift.WritableResult = (*respGetEntityGetContextCollision)(nil)

// Deprecated: GetEntityGetContextCollisionResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetContextCollisionResultDeprecated = respGetEntityGetContextCollision

func newRespGetEntityGetContextCollision() *respGetEntityGetContextCollision {
    return (&respGetEntityGetContextCollision{}).setDefaults()
}

func (x *respGetEntityGetContextCollision) GetSuccess() int32 {
    if !x.IsSetSuccess() {
        return 0
    }
    return *x.Success
}

func (x *respGetEntityGetContextCollision) SetSuccessNonCompat(value int32) *respGetEntityGetContextCollision {
    x.Success = &value
    return x
}

func (x *respGetEntityGetContextCollision) SetSuccess(value *int32) *respGetEntityGetContextCollision {
    x.Success = value
    return x
}

func (x *respGetEntityGetContextCollision) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetContextCollision) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.I32, 0); err != nil {
        return thrift.PrependError("respGetEntityGetContextCollision write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetContextCollision write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetContextCollision) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respGetEntityGetContextCollision) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetContextCollision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetContextCollision"); err != nil {
        return thrift.PrependError("respGetEntityGetContextCollision write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetContextCollision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetContextCollision write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetContextCollision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetContextCollision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetContextCollision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetContextCollision read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetContextCollision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetContextCollision) setDefaults() *respGetEntityGetContextCollision {
    return x
}

type reqGetEntityGetOutCollision struct {
    Out int64 `thrift:"out,1" json:"out" db:"out"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetOutCollision)(nil)

// Deprecated: GetEntityGetOutCollisionArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetOutCollisionArgsDeprecated = reqGetEntityGetOutCollision

func newReqGetEntityGetOutCollision() *reqGetEntityGetOutCollision {
    return (&reqGetEntityGetOutCollision{}).setDefaults()
}

func (x *reqGetEntityGetOutCollision) GetOut() int64 {
    return x.Out
}

func (x *reqGetEntityGetOutCollision) SetOutNonCompat(value int64) *reqGetEntityGetOutCollision {
    x.Out = value
    return x
}

func (x *reqGetEntityGetOutCollision) SetOut(value int64) *reqGetEntityGetOutCollision {
    x.Out = value
    return x
}

func (x *reqGetEntityGetOutCollision) writeField1(p thrift.Encoder) error {  // Out
    if err := p.WriteFieldBegin("out", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqGetEntityGetOutCollision write field begin error: ", err)
    }

    item := x.Out
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetOutCollision write field end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetOutCollision) readField1(p thrift.Decoder) error {  // Out
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Out = result
    return nil
}



func (x *reqGetEntityGetOutCollision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetOutCollision"); err != nil {
        return thrift.PrependError("reqGetEntityGetOutCollision write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetOutCollision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetOutCollision write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetOutCollision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetOutCollision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetOutCollision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "out")):  // out
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetOutCollision read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetOutCollision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetOutCollision) setDefaults() *reqGetEntityGetOutCollision {
    return x.
        SetOutNonCompat(0)
}

type respGetEntityGetOutCollision struct {
    Success *int32 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetOutCollision)(nil)
var _ thrift.WritableResult = (*respGetEntityGetOutCollision)(nil)

// Deprecated: GetEntityGetOutCollisionResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetOutCollisionResultDeprecated = respGetEntityGetOutCollision

func newRespGetEntityGetOutCollision() *respGetEntityGetOutCollision {
    return (&respGetEntityGetOutCollision{}).setDefaults()
}

func (x *respGetEntityGetOutCollision) GetSuccess() int32 {
    if !x.IsSetSuccess() {
        return 0
    }
    return *x.Success
}

func (x *respGetEntityGetOutCollision) SetSuccessNonCompat(value int32) *respGetEntityGetOutCollision {
    x.Success = &value
    return x
}

func (x *respGetEntityGetOutCollision) SetSuccess(value *int32) *respGetEntityGetOutCollision {
    x.Success = value
    return x
}

func (x *respGetEntityGetOutCollision) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetOutCollision) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.I32, 0); err != nil {
        return thrift.PrependError("respGetEntityGetOutCollision write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetOutCollision write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetOutCollision) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respGetEntityGetOutCollision) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetOutCollision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetOutCollision"); err != nil {
        return thrift.PrependError("respGetEntityGetOutCollision write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetOutCollision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetOutCollision write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetOutCollision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetOutCollision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetOutCollision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetOutCollision read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetOutCollision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetOutCollision) setDefaults() *respGetEntityGetOutCollision {
    return x
}

type reqGetEntityGetOut1Collision struct {
    Out int64 `thrift:"out,1" json:"out" db:"out"`
    Out1 int64 `thrift:"out1,2" json:"out1" db:"out1"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetOut1Collision)(nil)

// Deprecated: GetEntityGetOut1CollisionArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetOut1CollisionArgsDeprecated = reqGetEntityGetOut1Collision

func newReqGetEntityGetOut1Collision() *reqGetEntityGetOut1Collision {
    return (&reqGetEntityGetOut1Collision{}).setDefaults()
}

func (x *reqGetEntityGetOut1Collision) GetOut() int64 {
    return x.Out
}

func (x *reqGetEntityGetOut1Collision) GetOut1() int64 {
    return x.Out1
}

func (x *reqGetEntityGetOut1Collision) SetOutNonCompat(value int64) *reqGetEntityGetOut1Collision {
    x.Out = value
    return x
}

func (x *reqGetEntityGetOut1Collision) SetOut(value int64) *reqGetEntityGetOut1Collision {
    x.Out = value
    return x
}

func (x *reqGetEntityGetOut1Collision) SetOut1NonCompat(value int64) *reqGetEntityGetOut1Collision {
    x.Out1 = value
    return x
}

func (x *reqGetEntityGetOut1Collision) SetOut1(value int64) *reqGetEntityGetOut1Collision {
    x.Out1 = value
    return x
}

func (x *reqGetEntityGetOut1Collision) writeField1(p thrift.Encoder) error {  // Out
    if err := p.WriteFieldBegin("out", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqGetEntityGetOut1Collision write field begin error: ", err)
    }

    item := x.Out
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetOut1Collision write field end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetOut1Collision) writeField2(p thrift.Encoder) error {  // Out1
    if err := p.WriteFieldBegin("out1", thrift.I64, 2); err != nil {
        return thrift.PrependError("reqGetEntityGetOut1Collision write field begin error: ", err)
    }

    item := x.Out1
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetOut1Collision write field end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetOut1Collision) readField1(p thrift.Decoder) error {  // Out
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Out = result
    return nil
}

func (x *reqGetEntityGetOut1Collision) readField2(p thrift.Decoder) error {  // Out1
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Out1 = result
    return nil
}



func (x *reqGetEntityGetOut1Collision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetOut1Collision"); err != nil {
        return thrift.PrependError("reqGetEntityGetOut1Collision write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetOut1Collision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetOut1Collision write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetOut1Collision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetOut1Collision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetOut1Collision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "out")):  // out
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "out1")):  // out1
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetOut1Collision read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetOut1Collision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetOut1Collision) setDefaults() *reqGetEntityGetOut1Collision {
    return x.
        SetOutNonCompat(0).
        SetOut1NonCompat(0)
}

type respGetEntityGetOut1Collision struct {
    Success *int32 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetOut1Collision)(nil)
var _ thrift.WritableResult = (*respGetEntityGetOut1Collision)(nil)

// Deprecated: GetEntityGetOut1CollisionResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetOut1CollisionResultDeprecated = respGetEntityGetOut1Collision

func newRespGetEntityGetOut1Collision() *respGetEntityGetOut1Collision {
    return (&respGetEntityGetOut1Collision{}).setDefaults()
}

func (x *respGetEntityGetOut1Collision) GetSuccess() int32 {
    if !x.IsSetSuccess() {
        return 0
    }
    return *x.Success
}

func (x *respGetEntityGetOut1Collision) SetSuccessNonCompat(value int32) *respGetEntityGetOut1Collision {
    x.Success = &value
    return x
}

func (x *respGetEntityGetOut1Collision) SetSuccess(value *int32) *respGetEntityGetOut1Collision {
    x.Success = value
    return x
}

func (x *respGetEntityGetOut1Collision) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetOut1Collision) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.I32, 0); err != nil {
        return thrift.PrependError("respGetEntityGetOut1Collision write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetOut1Collision write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetOut1Collision) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respGetEntityGetOut1Collision) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetOut1Collision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetOut1Collision"); err != nil {
        return thrift.PrependError("respGetEntityGetOut1Collision write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetOut1Collision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetOut1Collision write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetOut1Collision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetOut1Collision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetOut1Collision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetOut1Collision read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetOut1Collision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetOut1Collision) setDefaults() *respGetEntityGetOut1Collision {
    return x
}

type reqGetEntityGetInCollision struct {
    In int64 `thrift:"in,1" json:"in" db:"in"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetInCollision)(nil)

// Deprecated: GetEntityGetInCollisionArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetInCollisionArgsDeprecated = reqGetEntityGetInCollision

func newReqGetEntityGetInCollision() *reqGetEntityGetInCollision {
    return (&reqGetEntityGetInCollision{}).setDefaults()
}

func (x *reqGetEntityGetInCollision) GetIn() int64 {
    return x.In
}

func (x *reqGetEntityGetInCollision) SetInNonCompat(value int64) *reqGetEntityGetInCollision {
    x.In = value
    return x
}

func (x *reqGetEntityGetInCollision) SetIn(value int64) *reqGetEntityGetInCollision {
    x.In = value
    return x
}

func (x *reqGetEntityGetInCollision) writeField1(p thrift.Encoder) error {  // In
    if err := p.WriteFieldBegin("in", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqGetEntityGetInCollision write field begin error: ", err)
    }

    item := x.In
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetInCollision write field end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetInCollision) readField1(p thrift.Decoder) error {  // In
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.In = result
    return nil
}



func (x *reqGetEntityGetInCollision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetInCollision"); err != nil {
        return thrift.PrependError("reqGetEntityGetInCollision write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetInCollision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetInCollision write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetInCollision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetInCollision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetInCollision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "in")):  // in
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetInCollision read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetInCollision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetInCollision) setDefaults() *reqGetEntityGetInCollision {
    return x.
        SetInNonCompat(0)
}

type respGetEntityGetInCollision struct {
    Success *int32 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetInCollision)(nil)
var _ thrift.WritableResult = (*respGetEntityGetInCollision)(nil)

// Deprecated: GetEntityGetInCollisionResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetInCollisionResultDeprecated = respGetEntityGetInCollision

func newRespGetEntityGetInCollision() *respGetEntityGetInCollision {
    return (&respGetEntityGetInCollision{}).setDefaults()
}

func (x *respGetEntityGetInCollision) GetSuccess() int32 {
    if !x.IsSetSuccess() {
        return 0
    }
    return *x.Success
}

func (x *respGetEntityGetInCollision) SetSuccessNonCompat(value int32) *respGetEntityGetInCollision {
    x.Success = &value
    return x
}

func (x *respGetEntityGetInCollision) SetSuccess(value *int32) *respGetEntityGetInCollision {
    x.Success = value
    return x
}

func (x *respGetEntityGetInCollision) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetInCollision) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.I32, 0); err != nil {
        return thrift.PrependError("respGetEntityGetInCollision write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetInCollision write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetInCollision) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respGetEntityGetInCollision) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetInCollision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetInCollision"); err != nil {
        return thrift.PrependError("respGetEntityGetInCollision write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetInCollision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetInCollision write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetInCollision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetInCollision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetInCollision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetInCollision read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetInCollision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetInCollision) setDefaults() *respGetEntityGetInCollision {
    return x
}

type reqGetEntityGetIn1Collision struct {
    In int64 `thrift:"in,1" json:"in" db:"in"`
    In1 int64 `thrift:"in1,2" json:"in1" db:"in1"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetIn1Collision)(nil)

// Deprecated: GetEntityGetIn1CollisionArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetIn1CollisionArgsDeprecated = reqGetEntityGetIn1Collision

func newReqGetEntityGetIn1Collision() *reqGetEntityGetIn1Collision {
    return (&reqGetEntityGetIn1Collision{}).setDefaults()
}

func (x *reqGetEntityGetIn1Collision) GetIn() int64 {
    return x.In
}

func (x *reqGetEntityGetIn1Collision) GetIn1() int64 {
    return x.In1
}

func (x *reqGetEntityGetIn1Collision) SetInNonCompat(value int64) *reqGetEntityGetIn1Collision {
    x.In = value
    return x
}

func (x *reqGetEntityGetIn1Collision) SetIn(value int64) *reqGetEntityGetIn1Collision {
    x.In = value
    return x
}

func (x *reqGetEntityGetIn1Collision) SetIn1NonCompat(value int64) *reqGetEntityGetIn1Collision {
    x.In1 = value
    return x
}

func (x *reqGetEntityGetIn1Collision) SetIn1(value int64) *reqGetEntityGetIn1Collision {
    x.In1 = value
    return x
}

func (x *reqGetEntityGetIn1Collision) writeField1(p thrift.Encoder) error {  // In
    if err := p.WriteFieldBegin("in", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqGetEntityGetIn1Collision write field begin error: ", err)
    }

    item := x.In
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetIn1Collision write field end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetIn1Collision) writeField2(p thrift.Encoder) error {  // In1
    if err := p.WriteFieldBegin("in1", thrift.I64, 2); err != nil {
        return thrift.PrependError("reqGetEntityGetIn1Collision write field begin error: ", err)
    }

    item := x.In1
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetIn1Collision write field end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetIn1Collision) readField1(p thrift.Decoder) error {  // In
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.In = result
    return nil
}

func (x *reqGetEntityGetIn1Collision) readField2(p thrift.Decoder) error {  // In1
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.In1 = result
    return nil
}



func (x *reqGetEntityGetIn1Collision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetIn1Collision"); err != nil {
        return thrift.PrependError("reqGetEntityGetIn1Collision write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetIn1Collision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetIn1Collision write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetIn1Collision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetIn1Collision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetIn1Collision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "in")):  // in
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "in1")):  // in1
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetIn1Collision read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetIn1Collision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetIn1Collision) setDefaults() *reqGetEntityGetIn1Collision {
    return x.
        SetInNonCompat(0).
        SetIn1NonCompat(0)
}

type respGetEntityGetIn1Collision struct {
    Success *int32 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetIn1Collision)(nil)
var _ thrift.WritableResult = (*respGetEntityGetIn1Collision)(nil)

// Deprecated: GetEntityGetIn1CollisionResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetIn1CollisionResultDeprecated = respGetEntityGetIn1Collision

func newRespGetEntityGetIn1Collision() *respGetEntityGetIn1Collision {
    return (&respGetEntityGetIn1Collision{}).setDefaults()
}

func (x *respGetEntityGetIn1Collision) GetSuccess() int32 {
    if !x.IsSetSuccess() {
        return 0
    }
    return *x.Success
}

func (x *respGetEntityGetIn1Collision) SetSuccessNonCompat(value int32) *respGetEntityGetIn1Collision {
    x.Success = &value
    return x
}

func (x *respGetEntityGetIn1Collision) SetSuccess(value *int32) *respGetEntityGetIn1Collision {
    x.Success = value
    return x
}

func (x *respGetEntityGetIn1Collision) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetIn1Collision) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.I32, 0); err != nil {
        return thrift.PrependError("respGetEntityGetIn1Collision write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetIn1Collision write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetIn1Collision) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respGetEntityGetIn1Collision) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetIn1Collision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetIn1Collision"); err != nil {
        return thrift.PrependError("respGetEntityGetIn1Collision write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetIn1Collision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetIn1Collision write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetIn1Collision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetIn1Collision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetIn1Collision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetIn1Collision read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetIn1Collision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetIn1Collision) setDefaults() *respGetEntityGetIn1Collision {
    return x
}

type reqGetEntityGetErrCollision struct {
    Err int64 `thrift:"err,1" json:"err" db:"err"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetErrCollision)(nil)

// Deprecated: GetEntityGetErrCollisionArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetErrCollisionArgsDeprecated = reqGetEntityGetErrCollision

func newReqGetEntityGetErrCollision() *reqGetEntityGetErrCollision {
    return (&reqGetEntityGetErrCollision{}).setDefaults()
}

func (x *reqGetEntityGetErrCollision) GetErr() int64 {
    return x.Err
}

func (x *reqGetEntityGetErrCollision) SetErrNonCompat(value int64) *reqGetEntityGetErrCollision {
    x.Err = value
    return x
}

func (x *reqGetEntityGetErrCollision) SetErr(value int64) *reqGetEntityGetErrCollision {
    x.Err = value
    return x
}

func (x *reqGetEntityGetErrCollision) writeField1(p thrift.Encoder) error {  // Err
    if err := p.WriteFieldBegin("err", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqGetEntityGetErrCollision write field begin error: ", err)
    }

    item := x.Err
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetErrCollision write field end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetErrCollision) readField1(p thrift.Decoder) error {  // Err
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Err = result
    return nil
}



func (x *reqGetEntityGetErrCollision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetErrCollision"); err != nil {
        return thrift.PrependError("reqGetEntityGetErrCollision write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetErrCollision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetErrCollision write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetErrCollision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetErrCollision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetErrCollision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "err")):  // err
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetErrCollision read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetErrCollision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetErrCollision) setDefaults() *reqGetEntityGetErrCollision {
    return x.
        SetErrNonCompat(0)
}

type respGetEntityGetErrCollision struct {
    Success *int32 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetErrCollision)(nil)
var _ thrift.WritableResult = (*respGetEntityGetErrCollision)(nil)

// Deprecated: GetEntityGetErrCollisionResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetErrCollisionResultDeprecated = respGetEntityGetErrCollision

func newRespGetEntityGetErrCollision() *respGetEntityGetErrCollision {
    return (&respGetEntityGetErrCollision{}).setDefaults()
}

func (x *respGetEntityGetErrCollision) GetSuccess() int32 {
    if !x.IsSetSuccess() {
        return 0
    }
    return *x.Success
}

func (x *respGetEntityGetErrCollision) SetSuccessNonCompat(value int32) *respGetEntityGetErrCollision {
    x.Success = &value
    return x
}

func (x *respGetEntityGetErrCollision) SetSuccess(value *int32) *respGetEntityGetErrCollision {
    x.Success = value
    return x
}

func (x *respGetEntityGetErrCollision) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetErrCollision) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.I32, 0); err != nil {
        return thrift.PrependError("respGetEntityGetErrCollision write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetErrCollision write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetErrCollision) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respGetEntityGetErrCollision) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetErrCollision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetErrCollision"); err != nil {
        return thrift.PrependError("respGetEntityGetErrCollision write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetErrCollision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetErrCollision write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetErrCollision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetErrCollision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetErrCollision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetErrCollision read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetErrCollision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetErrCollision) setDefaults() *respGetEntityGetErrCollision {
    return x
}

type reqGetEntityGetErr1Collision struct {
    Err int64 `thrift:"err,1" json:"err" db:"err"`
    Err1 int64 `thrift:"err1,2" json:"err1" db:"err1"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqGetEntityGetErr1Collision)(nil)

// Deprecated: GetEntityGetErr1CollisionArgsDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetErr1CollisionArgsDeprecated = reqGetEntityGetErr1Collision

func newReqGetEntityGetErr1Collision() *reqGetEntityGetErr1Collision {
    return (&reqGetEntityGetErr1Collision{}).setDefaults()
}

func (x *reqGetEntityGetErr1Collision) GetErr() int64 {
    return x.Err
}

func (x *reqGetEntityGetErr1Collision) GetErr1() int64 {
    return x.Err1
}

func (x *reqGetEntityGetErr1Collision) SetErrNonCompat(value int64) *reqGetEntityGetErr1Collision {
    x.Err = value
    return x
}

func (x *reqGetEntityGetErr1Collision) SetErr(value int64) *reqGetEntityGetErr1Collision {
    x.Err = value
    return x
}

func (x *reqGetEntityGetErr1Collision) SetErr1NonCompat(value int64) *reqGetEntityGetErr1Collision {
    x.Err1 = value
    return x
}

func (x *reqGetEntityGetErr1Collision) SetErr1(value int64) *reqGetEntityGetErr1Collision {
    x.Err1 = value
    return x
}

func (x *reqGetEntityGetErr1Collision) writeField1(p thrift.Encoder) error {  // Err
    if err := p.WriteFieldBegin("err", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqGetEntityGetErr1Collision write field begin error: ", err)
    }

    item := x.Err
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetErr1Collision write field end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetErr1Collision) writeField2(p thrift.Encoder) error {  // Err1
    if err := p.WriteFieldBegin("err1", thrift.I64, 2); err != nil {
        return thrift.PrependError("reqGetEntityGetErr1Collision write field begin error: ", err)
    }

    item := x.Err1
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetErr1Collision write field end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetErr1Collision) readField1(p thrift.Decoder) error {  // Err
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Err = result
    return nil
}

func (x *reqGetEntityGetErr1Collision) readField2(p thrift.Decoder) error {  // Err1
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Err1 = result
    return nil
}



func (x *reqGetEntityGetErr1Collision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqGetEntityGetErr1Collision"); err != nil {
        return thrift.PrependError("reqGetEntityGetErr1Collision write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqGetEntityGetErr1Collision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetErr1Collision write struct end error: ", err)
    }
    return nil
}

func (x *reqGetEntityGetErr1Collision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqGetEntityGetErr1Collision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqGetEntityGetErr1Collision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "err")):  // err
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "err1")):  // err1
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqGetEntityGetErr1Collision read struct end error: ", err)
    }

    return nil
}

func (x *reqGetEntityGetErr1Collision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqGetEntityGetErr1Collision) setDefaults() *reqGetEntityGetErr1Collision {
    return x.
        SetErrNonCompat(0).
        SetErr1NonCompat(0)
}

type respGetEntityGetErr1Collision struct {
    Success *int32 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respGetEntityGetErr1Collision)(nil)
var _ thrift.WritableResult = (*respGetEntityGetErr1Collision)(nil)

// Deprecated: GetEntityGetErr1CollisionResultDeprecated is deprecated, since it is supposed to be internal.
type GetEntityGetErr1CollisionResultDeprecated = respGetEntityGetErr1Collision

func newRespGetEntityGetErr1Collision() *respGetEntityGetErr1Collision {
    return (&respGetEntityGetErr1Collision{}).setDefaults()
}

func (x *respGetEntityGetErr1Collision) GetSuccess() int32 {
    if !x.IsSetSuccess() {
        return 0
    }
    return *x.Success
}

func (x *respGetEntityGetErr1Collision) SetSuccessNonCompat(value int32) *respGetEntityGetErr1Collision {
    x.Success = &value
    return x
}

func (x *respGetEntityGetErr1Collision) SetSuccess(value *int32) *respGetEntityGetErr1Collision {
    x.Success = value
    return x
}

func (x *respGetEntityGetErr1Collision) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respGetEntityGetErr1Collision) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.I32, 0); err != nil {
        return thrift.PrependError("respGetEntityGetErr1Collision write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetErr1Collision write field end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetErr1Collision) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respGetEntityGetErr1Collision) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetErr1Collision) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respGetEntityGetErr1Collision"); err != nil {
        return thrift.PrependError("respGetEntityGetErr1Collision write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respGetEntityGetErr1Collision write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetErr1Collision write struct end error: ", err)
    }
    return nil
}

func (x *respGetEntityGetErr1Collision) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respGetEntityGetErr1Collision read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respGetEntityGetErr1Collision field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respGetEntityGetErr1Collision read struct end error: ", err)
    }

    return nil
}

func (x *respGetEntityGetErr1Collision) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respGetEntityGetErr1Collision) setDefaults() *respGetEntityGetErr1Collision {
    return x
}


// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {

}
