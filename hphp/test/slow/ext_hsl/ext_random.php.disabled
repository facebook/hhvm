<?hh
/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010-present Facebook, Inc. (http://www.facebook.com)  |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

/*
 * Tests that `pseudorandom_int` is filling up the whole range. With 160
 * repetitions, we expect a uniform distribution to produce values outside the
 * middle 80% of the range with probability 1 - 0.8^160 ~= 1 - 3e-16. So the
 * probability of this test failing should be negligible if `pseudorandom_int`
 * is uniform.
 */
function test_range() {
  $INT32_MIN = -2**31;
  $INT32_MAX = 2**31 - 1;
  $ITERS = 160;
  $test_ranges = array(
    array(0, 0),
    array(0, $INT32_MAX),
    array(0, PHP_INT_MAX),
    array($INT32_MIN, $INT32_MAX),
    array(PHP_INT_MIN, PHP_INT_MAX),
    array(-10, 0),
    array(-10, 10),
  );

  echo '= ', __FUNCTION__, ' =', "\n";
  foreach($test_ranges as $test_range) {
    $range_start = $test_range[0];
    $range_end = $test_range[1];
    $range_midpoint = $range_start/2 + $range_end/2;
    $expected_min = $range_midpoint - 0.9 * ($range_midpoint - $range_start);
    $expected_max = $range_midpoint + 0.9 * ($range_end - $range_midpoint);
    $min_so_far = PHP_INT_MAX;
    $max_so_far = PHP_INT_MIN;
    $failed = false;

    for ($i = 0; $i < $ITERS; $i++) {
      $result = HH\Lib\_Private\Native\pseudorandom_int($range_start, $range_end);
      if ($result < $range_start || $result > $range_end) {
        $failed = true;
        break;
      }
      $min_so_far = min($min_so_far, $result);
      $max_so_far = max($max_so_far, $result);
    }

    if ($min_so_far > $expected_min || $max_so_far < $expected_max) {
      $failed = true;
    }

    var_dump(!$failed);
  }
}

/*
 * Tests that `pseudorandom_int` consistently reproduces the same sequence of
 * numbers for the same seed.
 */
function test_seed() {
  // This temporarily checks for different sequences depending on whether we're
  // in a gcc or a clang build. Once the RNGs in the builds match, this will be
  // removed.
  $ITERS = 2;
  $expected_results = array(
    0 => array(
      array( // gcc
        -5905157716190485494,
        -4721634353514197466,
        5267568678021956279,
        4564694739155648417,
        4716024582865476389,
        -3557571502002766151,
        9006642058067838919,
        212903091104741193,
        -719947796408221992,
        3418902158060725822,
      ),
      array( // clang
        900450186894289455,
        3969543146641149120,
        1895649597198586619,
        827948490035658087,
        -1408320422220276013,
        2691271404617651954,
        -1151312763198686633,
        7226936298635050456,
        8553068346248842636,
        -2150124423770258751,
      ),
    ),
    PHP_INT_MAX => array(
      array( // gcc
        -3922533357572486084,
        -2791988998381936732,
        8768844979615628272,
        -8301590607843109893,
        1267176365419338187,
        5587999633893185103,
        -864406029802089078,
        2490533016158156170,
        5515869469975614735,
        -7387394822946981173,
      ),
      array( // clang
        -7422378986580066014,
        7607120784305990727,
        5331760257347419712,
        5165154706003526138,
        -8892443392435847392,
        8660855838641975931,
        1718781808164485227,
        -6527986301322975030,
        7551637291286289549,
        991259994952170583,
      ),
    ),
    12000 => array(
      array( // gcc
        9138063515627212189,
        -373597964056973761,
        7733295333169710568,
        4916729211128368718,
        8561398280166036064,
        4068607052431589710,
        -6681379839183423168,
        2111735243971731953,
        -5160969011704777297,
        -8141743121021715464,
      ),
      array( // clang
        -1788240644947521571,
        -1752586041433253095,
        -897580358901511798,
        -1880842057243932921,
        4814219474038450191,
        -7688862403842128692,
        -3849452460506182657,
        -3992774751795954772,
        4001099000446258017,
        -1915382071092976024,
      ),
    ),
    -12000 => array(
      array( // gcc
        4287515345518108590,
        3940653837216539211,
        -6684471431876313478,
        4018413173220676101,
        -3383455556614008150,
        5666247113437142048,
        2539630331999690084,
        990466375321888339,
        -814080857971603581,
        -2820435518130741041,
      ),
      array( // clang
        460653180596889520,
        5597995051021620590,
        1775718807355173004,
        -2893638933900555451,
        8826356920943572407,
        -188278098634002530,
        2950395916923801715,
        2112357092280707745,
        -8464805965197197688,
        98831443023028692,
      ),
    ),
  );

  echo '= ', __FUNCTION__, ' =', "\n";
  foreach ($expected_results as $seed => $expected_sequences) {
    $any_valid_sequence = false;
    foreach ($expected_sequences as $expected_sequence) {
      for ($i = 0; $i < $ITERS; $i++) {
        HH\Lib\_Private\Native\pseudorandom_seed($seed);
        $valid_sequence = true;
        foreach ($expected_sequence as $number) {
          $next_number = HH\Lib\_Private\Native\pseudorandom_int(PHP_INT_MIN, PHP_INT_MAX);
          if ($next_number !== $number) {
            $valid_sequence = false;
            break;
          }
        }
        if ($valid_sequence) {
          $any_valid_sequence = true;
        }
      }
      if ($any_valid_sequence) {
        break;
      }
    }
    var_dump($any_valid_sequence);
  }
}

test_range();
test_seed();
