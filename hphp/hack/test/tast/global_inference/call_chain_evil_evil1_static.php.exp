[(Class
    { c_span = [3:1-7:2]; c_annotation = (); c_mode = Mpartial;
      c_final = false; c_is_xhp = false; c_has_xhp_keyword = false;
      c_kind = Cnormal; c_name = ([3:7-8], "\\A"); c_tparams = [];
      c_extends = []; c_uses = []; c_use_as_alias = [];
      c_insteadof_alias = []; c_xhp_attr_uses = []; c_xhp_category = None;
      c_reqs = []; c_implements = []; c_where_constraints = [];
      c_consts = []; c_typeconsts = []; c_vars = [];
      c_methods =
      [{ m_span = [4:3-6:4]; m_annotation = (); m_final = false;
         m_abstract = false; m_static = true; m_visibility = Public;
         m_name = ([4:26-27], "f"); m_tparams = []; m_where_constraints = [];
         m_variadic = FVnonVariadic;
         m_params =
         [{ param_annotation = ([4:28-30], string);
            param_type_hint = ((string), None); param_is_variadic = false;
            param_pos = [4:28-30]; param_name = "$x"; param_expr = None;
            param_callconv = None; param_user_attributes = [];
            param_visibility = None }
           ];
         m_cap = ((mixed), None); m_unsafe_cap = ((mixed), None);
         m_body =
         { fb_ast =
           [([5:5-15],
             (Return (Some (([5:12-14], string), (Lvar ([5:12-14], $x))))))];
           fb_annotation = () };
         m_fun_kind = FSync; m_user_attributes = [];
         m_ret = ((string), None); m_external = false; m_doc_comment = None }
        ];
      c_attributes = []; c_xhp_children = []; c_xhp_attrs = [];
      c_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>;
        ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>;
        ns_const_uses = <opaque>; ns_name = None; ns_auto_ns_map = [];
        ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      c_user_attributes = []; c_file_attributes = []; c_enum = None;
      c_pu_enums = []; c_doc_comment = None; c_emit_id = None })
  ]
[(Class
    { c_span = [3:1-7:2]; c_annotation = (); c_mode = Mpartial;
      c_final = false; c_is_xhp = false; c_has_xhp_keyword = false;
      c_kind = Cnormal; c_name = ([3:7-8], "\\B"); c_tparams = [];
      c_extends = [([3:17-18], (Happly (([3:17-18], "\\A"), [])))];
      c_uses = []; c_use_as_alias = []; c_insteadof_alias = [];
      c_xhp_attr_uses = []; c_xhp_category = None; c_reqs = [];
      c_implements = []; c_where_constraints = []; c_consts = [];
      c_typeconsts = []; c_vars = [];
      c_methods =
      [{ m_span = [4:3-6:4]; m_annotation = (); m_final = false;
         m_abstract = false; m_static = true; m_visibility = Public;
         m_name = ([4:26-27], "f"); m_tparams = []; m_where_constraints = [];
         m_variadic = FVnonVariadic;
         m_params =
         [{ param_annotation = ([4:28-30], string);
            param_type_hint = ((string), None); param_is_variadic = false;
            param_pos = [4:28-30]; param_name = "$x"; param_expr = None;
            param_callconv = None; param_user_attributes = [];
            param_visibility = None }
           ];
         m_cap = ((mixed), None); m_unsafe_cap = ((mixed), None);
         m_body =
         { fb_ast =
           [([5:5-21],
             (Return
                (Some (([5:12-20], string),
                       (Call (
                          (([5:12-16], (function(string $x): string)),
                           (Class_const (
                              (([5:12-13], A), (CI ([5:12-13], "\\A"))),
                              ([5:15-16], "f")))),
                          [],
                          [(([5:17-19], string), (Lvar ([5:17-19], $x)))],
                          None))))))
             ];
           fb_annotation = () };
         m_fun_kind = FSync; m_user_attributes = [];
         m_ret = ((string), None); m_external = false; m_doc_comment = None }
        ];
      c_attributes = []; c_xhp_children = []; c_xhp_attrs = [];
      c_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>;
        ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>;
        ns_const_uses = <opaque>; ns_name = None; ns_auto_ns_map = [];
        ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      c_user_attributes = []; c_file_attributes = []; c_enum = None;
      c_pu_enums = []; c_doc_comment = None; c_emit_id = None })
  ]
[(Fun
    { f_span = [3:1-5:2]; f_annotation = (); f_mode = Mpartial;
      f_ret = ((string), None); f_name = ([3:10-11], "\\f"); f_tparams = [];
      f_where_constraints = []; f_variadic = FVnonVariadic; f_params = [];
      f_cap = ((nothing), None); f_unsafe_cap = ((mixed), None);
      f_body =
      { fb_ast =
        [([4:3-25],
          (Return
             (Some (([4:10-24], string),
                    (Call (
                       (([4:10-14], (function(string $x): string)),
                        (Class_const (
                           (([4:10-11], B), (CI ([4:10-11], "\\B"))),
                           ([4:13-14], "f")))),
                       [],
                       [(([4:15-23], string),
                         (Call (
                            (([4:15-19], (function(string $x): string)),
                             (Class_const (
                                (([4:15-16], A), (CI ([4:15-16], "\\A"))),
                                ([4:18-19], "f")))),
                            [], [(([4:20-22], string), (String ""))], None)))
                         ],
                       None))))))
          ];
        fb_annotation = () };
      f_fun_kind = FSync; f_user_attributes = []; f_file_attributes = [];
      f_external = false;
      f_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>;
        ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>;
        ns_const_uses = <opaque>; ns_name = None; ns_auto_ns_map = [];
        ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      f_doc_comment = None; f_static = false })
  ]
