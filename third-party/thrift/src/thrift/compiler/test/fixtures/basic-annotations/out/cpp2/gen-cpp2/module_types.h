/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/basic-annotations/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct name;
struct majorVer;
struct abstract;
struct annotation_with_quote;
struct class_;
struct annotation_with_trailing_comma;
struct empty_annotations;
struct my_enum;
struct cpp_type_annotation;
struct my_union;
struct id;
struct password;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_majorVer
#define APACHE_THRIFT_ACCESSOR_majorVer
APACHE_THRIFT_DEFINE_ACCESSOR(majorVer);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_abstract
#define APACHE_THRIFT_ACCESSOR_abstract
APACHE_THRIFT_DEFINE_ACCESSOR(abstract);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_annotation_with_quote
#define APACHE_THRIFT_ACCESSOR_annotation_with_quote
APACHE_THRIFT_DEFINE_ACCESSOR(annotation_with_quote);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_class_
#define APACHE_THRIFT_ACCESSOR_class_
APACHE_THRIFT_DEFINE_ACCESSOR(class_);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_annotation_with_trailing_comma
#define APACHE_THRIFT_ACCESSOR_annotation_with_trailing_comma
APACHE_THRIFT_DEFINE_ACCESSOR(annotation_with_trailing_comma);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_empty_annotations
#define APACHE_THRIFT_ACCESSOR_empty_annotations
APACHE_THRIFT_DEFINE_ACCESSOR(empty_annotations);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_my_enum
#define APACHE_THRIFT_ACCESSOR_my_enum
APACHE_THRIFT_DEFINE_ACCESSOR(my_enum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_cpp_type_annotation
#define APACHE_THRIFT_ACCESSOR_cpp_type_annotation
APACHE_THRIFT_DEFINE_ACCESSOR(cpp_type_annotation);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_my_union
#define APACHE_THRIFT_ACCESSOR_my_union
APACHE_THRIFT_DEFINE_ACCESSOR(my_union);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_id
#define APACHE_THRIFT_ACCESSOR_id
APACHE_THRIFT_DEFINE_ACCESSOR(id);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_password
#define APACHE_THRIFT_ACCESSOR_password
APACHE_THRIFT_DEFINE_ACCESSOR(password);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
namespace cpp2 {

/** Glean {"file": "thrift/compiler/test/fixtures/basic-annotations/src/module.thrift", "name": "YourEnum", "kind": "enum" } */
enum class YourEnum {
  MyValue1 = 0,
  MyValue2 = 1,
  REALM = 2,
};

} // namespace cpp2

template<> struct std::hash<::cpp2::YourEnum> :
  ::apache::thrift::detail::enum_hash<::cpp2::YourEnum> {};

namespace apache::thrift {

template <> struct TEnumTraits<::cpp2::YourEnum> {
  using type = ::cpp2::YourEnum;

  static constexpr std::size_t const size = 3;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "MyEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::MyValue1; }
  static constexpr type max() { return type::REALM; }

  static const std::vector<std::any>& annotations() noexcept;
  static const std::vector<std::any>& enumValueAnnotations(::cpp2::YourEnum) noexcept;
};

} // namespace apache::thrift
// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class MyStructNestedAnnotation;
namespace detail {
class YourUnion;
} // namespace detail
namespace detail {
class YourException;
} // namespace detail
namespace detail {
class YourStruct;
} // namespace detail
class SecretStruct;
} // namespace cpp2
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


namespace detail {
/** Glean {"file": "thrift/compiler/test/fixtures/basic-annotations/src/module.thrift", "name": "YourUnion", "kind": "union" } */
class YourUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = YourUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
  } ;

  YourUnion()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  YourUnion(YourUnion&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  YourUnion(const YourUnion& rhs);

  YourUnion& operator=(YourUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  YourUnion& operator=(const YourUnion& rhs);


  union storage_type {

  } ;

  bool operator==(const YourUnion&) const;
  bool operator<(const YourUnion&) const;

  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<YourUnion>;
  friend void swap(YourUnion& a, YourUnion& b);
};

template <class Protocol_>
unsigned long YourUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}
} // namespace detail

using YourUnion = ::apache::thrift::adapt_detail::adapted_t<::StaticCast, ::cpp2::detail::YourUnion>;

/** Glean {"file": "thrift/compiler/test/fixtures/basic-annotations/src/module.thrift", "name": "list_string_6884", "kind": "typedef" } */
using list_string_6884 = std::deque<std::string>;

namespace detail {
/** Glean {"file": "thrift/compiler/test/fixtures/basic-annotations/src/module.thrift", "name": "YourStruct", "kind": "struct" } */
class YourStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 9;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,2,1,3,4,5,6,7,8,9};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::majorVer,
    ::apache::thrift::ident::abstract,
    ::apache::thrift::ident::annotation_with_quote,
    ::apache::thrift::ident::class_,
    ::apache::thrift::ident::annotation_with_trailing_comma,
    ::apache::thrift::ident::empty_annotations,
    ::apache::thrift::ident::my_enum,
    ::apache::thrift::ident::cpp_type_annotation,
    ::apache::thrift::ident::my_union
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::enum_t<::cpp2::YourEnum>,
    ::apache::thrift::type::cpp_type<std::deque<std::string>, ::apache::thrift::type::list<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::adapted<::StaticCast, ::apache::thrift::type::union_t<::cpp2::detail::YourUnion>>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = YourStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  YourStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  YourStruct(apache::thrift::FragileConstructor, ::std::int64_t majorVer__arg, ::std::string abstract__arg, ::std::string annotation_with_quote__arg, ::std::string class___arg, ::std::string annotation_with_trailing_comma__arg, ::std::string empty_annotations__arg, ::cpp2::YourEnum my_enum__arg, ::cpp2::list_string_6884 cpp_type_annotation__arg, ::cpp2::YourUnion my_union__arg);

  YourStruct(YourStruct&&) noexcept;
  YourStruct(const YourStruct& src);


  YourStruct& operator=(YourStruct&&) noexcept;
  YourStruct& operator=(const YourStruct& src);

  ~YourStruct();

 private:
  ::std::int64_t __fbthrift_field_majorVer;
 private:
  ::std::string __fbthrift_field_abstract;
 private:
  ::std::string __fbthrift_field_annotation_with_quote;
 private:
  ::std::string __fbthrift_field_class_;
 private:
  ::std::string __fbthrift_field_annotation_with_trailing_comma;
 private:
  ::std::string __fbthrift_field_empty_annotations;
 private:
  ::cpp2::YourEnum __fbthrift_field_my_enum;
 private:
  ::cpp2::list_string_6884 __fbthrift_field_cpp_type_annotation;
 private:
  ::cpp2::YourUnion __fbthrift_field_my_union;
 private:
  apache::thrift::detail::isset_bitset<9, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const YourStruct&) const;
  bool operator<(const YourStruct&) const;

  /** Glean { "field": "majorVer" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> majorVer_ref() const& {
    return {this->__fbthrift_field_majorVer, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "majorVer" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> majorVer_ref() & {
    return {this->__fbthrift_field_majorVer, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "majorVer" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> majorVer_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_majorVer), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "majorVer" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> majorVer() const& {
    return {this->__fbthrift_field_majorVer, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "majorVer" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> majorVer() & {
    return {this->__fbthrift_field_majorVer, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "majorVer" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> majorVer() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_majorVer), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "abstract" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> abstract_ref() const& {
    return {this->__fbthrift_field_abstract, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "abstract" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> abstract_ref() & {
    return {this->__fbthrift_field_abstract, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "abstract" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> abstract_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_abstract), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "abstract" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> abstract() const& {
    return {this->__fbthrift_field_abstract, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "abstract" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> abstract() & {
    return {this->__fbthrift_field_abstract, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "abstract" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> abstract() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_abstract), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "annotation_with_quote" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> annotation_with_quote_ref() const& {
    return {this->__fbthrift_field_annotation_with_quote, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "annotation_with_quote" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> annotation_with_quote_ref() & {
    return {this->__fbthrift_field_annotation_with_quote, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "annotation_with_quote" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> annotation_with_quote_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_annotation_with_quote), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "annotation_with_quote" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> annotation_with_quote() const& {
    return {this->__fbthrift_field_annotation_with_quote, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "annotation_with_quote" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> annotation_with_quote() & {
    return {this->__fbthrift_field_annotation_with_quote, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "annotation_with_quote" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> annotation_with_quote() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_annotation_with_quote), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "class_" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> class__ref() const& {
    return {this->__fbthrift_field_class_, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "class_" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> class__ref() & {
    return {this->__fbthrift_field_class_, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "class_" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> class__ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_class_), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "class_" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> class_() const& {
    return {this->__fbthrift_field_class_, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "class_" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> class_() & {
    return {this->__fbthrift_field_class_, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "class_" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> class_() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_class_), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "annotation_with_trailing_comma" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> annotation_with_trailing_comma_ref() const& {
    return {this->__fbthrift_field_annotation_with_trailing_comma, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "annotation_with_trailing_comma" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> annotation_with_trailing_comma_ref() & {
    return {this->__fbthrift_field_annotation_with_trailing_comma, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "annotation_with_trailing_comma" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> annotation_with_trailing_comma_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_annotation_with_trailing_comma), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "annotation_with_trailing_comma" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> annotation_with_trailing_comma() const& {
    return {this->__fbthrift_field_annotation_with_trailing_comma, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "annotation_with_trailing_comma" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> annotation_with_trailing_comma() & {
    return {this->__fbthrift_field_annotation_with_trailing_comma, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "annotation_with_trailing_comma" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> annotation_with_trailing_comma() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_annotation_with_trailing_comma), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "empty_annotations" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> empty_annotations_ref() const& {
    return {this->__fbthrift_field_empty_annotations, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "empty_annotations" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> empty_annotations_ref() & {
    return {this->__fbthrift_field_empty_annotations, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "empty_annotations" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> empty_annotations_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_empty_annotations), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "empty_annotations" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> empty_annotations() const& {
    return {this->__fbthrift_field_empty_annotations, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "empty_annotations" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> empty_annotations() & {
    return {this->__fbthrift_field_empty_annotations, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "empty_annotations" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> empty_annotations() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_empty_annotations), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "my_enum" } */
  template <typename..., typename fbthrift_T = ::cpp2::YourEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> my_enum_ref() const& {
    return {this->__fbthrift_field_my_enum, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "my_enum" } */
  template <typename..., typename fbthrift_T = ::cpp2::YourEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> my_enum_ref() & {
    return {this->__fbthrift_field_my_enum, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "my_enum" } */
  template <typename..., typename fbthrift_T = ::cpp2::YourEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> my_enum_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_my_enum), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "my_enum" } */
  template <typename..., typename fbthrift_T = ::cpp2::YourEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> my_enum() const& {
    return {this->__fbthrift_field_my_enum, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "my_enum" } */
  template <typename..., typename fbthrift_T = ::cpp2::YourEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> my_enum() & {
    return {this->__fbthrift_field_my_enum, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "my_enum" } */
  template <typename..., typename fbthrift_T = ::cpp2::YourEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> my_enum() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_my_enum), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "cpp_type_annotation" } */
  template <typename..., typename fbthrift_T = ::cpp2::list_string_6884>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> cpp_type_annotation_ref() const& {
    return {this->__fbthrift_field_cpp_type_annotation, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "cpp_type_annotation" } */
  template <typename..., typename fbthrift_T = ::cpp2::list_string_6884>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> cpp_type_annotation_ref() & {
    return {this->__fbthrift_field_cpp_type_annotation, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "cpp_type_annotation" } */
  template <typename..., typename fbthrift_T = ::cpp2::list_string_6884>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> cpp_type_annotation_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_cpp_type_annotation), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "cpp_type_annotation" } */
  template <typename..., typename fbthrift_T = ::cpp2::list_string_6884>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> cpp_type_annotation() const& {
    return {this->__fbthrift_field_cpp_type_annotation, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "cpp_type_annotation" } */
  template <typename..., typename fbthrift_T = ::cpp2::list_string_6884>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> cpp_type_annotation() & {
    return {this->__fbthrift_field_cpp_type_annotation, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "cpp_type_annotation" } */
  template <typename..., typename fbthrift_T = ::cpp2::list_string_6884>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> cpp_type_annotation() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_cpp_type_annotation), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "my_union" } */
  template <typename..., typename fbthrift_T = ::cpp2::YourUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> my_union_ref() const& {
    return {this->__fbthrift_field_my_union, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "my_union" } */
  template <typename..., typename fbthrift_T = ::cpp2::YourUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> my_union_ref() & {
    return {this->__fbthrift_field_my_union, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "my_union" } */
  template <typename..., typename fbthrift_T = ::cpp2::YourUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> my_union_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_my_union), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "my_union" } */
  template <typename..., typename fbthrift_T = ::cpp2::YourUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> my_union() const& {
    return {this->__fbthrift_field_my_union, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "my_union" } */
  template <typename..., typename fbthrift_T = ::cpp2::YourUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> my_union() & {
    return {this->__fbthrift_field_my_union, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "my_union" } */
  template <typename..., typename fbthrift_T = ::cpp2::YourUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> my_union() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_my_union), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "majorVer" } */
  [[deprecated("Use `FOO.majorVer().value()` instead of `FOO.get_majorVer()`")]]
  ::std::int64_t get_majorVer() const;

  /** Glean { "field": "majorVer" } */
  [[deprecated("Use `FOO.majorVer() = BAR` instead of `FOO.set_majorVer(BAR)`")]]
  ::std::int64_t& set_majorVer(::std::int64_t majorVer_);

  /** Glean { "field": "abstract" } */
  [[deprecated("Use `FOO.abstract().value()` instead of `FOO.get_abstract()`")]]
  const ::std::string& get_abstract() const& {
    return __fbthrift_field_abstract;
  }

  /** Glean { "field": "abstract" } */
  [[deprecated("Use `FOO.abstract().value()` instead of `FOO.get_abstract()`")]]
  ::std::string get_abstract() && {
    return static_cast<::std::string&&>(__fbthrift_field_abstract);
  }

  /** Glean { "field": "abstract" } */
  template <typename T_YourStruct_abstract_struct_setter = ::std::string>
  [[deprecated("Use `FOO.abstract() = BAR` instead of `FOO.set_abstract(BAR)`")]]
  ::std::string& set_abstract(T_YourStruct_abstract_struct_setter&& abstract_) {
    abstract_ref() = std::forward<T_YourStruct_abstract_struct_setter>(abstract_);
    return __fbthrift_field_abstract;
  }

  /** Glean { "field": "annotation_with_quote" } */
  [[deprecated("Use `FOO.annotation_with_quote().value()` instead of `FOO.get_annotation_with_quote()`")]]
  const ::std::string& get_annotation_with_quote() const& {
    return __fbthrift_field_annotation_with_quote;
  }

  /** Glean { "field": "annotation_with_quote" } */
  [[deprecated("Use `FOO.annotation_with_quote().value()` instead of `FOO.get_annotation_with_quote()`")]]
  ::std::string get_annotation_with_quote() && {
    return static_cast<::std::string&&>(__fbthrift_field_annotation_with_quote);
  }

  /** Glean { "field": "annotation_with_quote" } */
  template <typename T_YourStruct_annotation_with_quote_struct_setter = ::std::string>
  [[deprecated("Use `FOO.annotation_with_quote() = BAR` instead of `FOO.set_annotation_with_quote(BAR)`")]]
  ::std::string& set_annotation_with_quote(T_YourStruct_annotation_with_quote_struct_setter&& annotation_with_quote_) {
    annotation_with_quote_ref() = std::forward<T_YourStruct_annotation_with_quote_struct_setter>(annotation_with_quote_);
    return __fbthrift_field_annotation_with_quote;
  }

  /** Glean { "field": "class_" } */
  [[deprecated("Use `FOO.class_().value()` instead of `FOO.get_class_()`")]]
  const ::std::string& get_class_() const& {
    return __fbthrift_field_class_;
  }

  /** Glean { "field": "class_" } */
  [[deprecated("Use `FOO.class_().value()` instead of `FOO.get_class_()`")]]
  ::std::string get_class_() && {
    return static_cast<::std::string&&>(__fbthrift_field_class_);
  }

  /** Glean { "field": "class_" } */
  template <typename T_YourStruct_class__struct_setter = ::std::string>
  [[deprecated("Use `FOO.class_() = BAR` instead of `FOO.set_class_(BAR)`")]]
  ::std::string& set_class_(T_YourStruct_class__struct_setter&& class__) {
    class__ref() = std::forward<T_YourStruct_class__struct_setter>(class__);
    return __fbthrift_field_class_;
  }

  /** Glean { "field": "annotation_with_trailing_comma" } */
  [[deprecated("Use `FOO.annotation_with_trailing_comma().value()` instead of `FOO.get_annotation_with_trailing_comma()`")]]
  const ::std::string& get_annotation_with_trailing_comma() const& {
    return __fbthrift_field_annotation_with_trailing_comma;
  }

  /** Glean { "field": "annotation_with_trailing_comma" } */
  [[deprecated("Use `FOO.annotation_with_trailing_comma().value()` instead of `FOO.get_annotation_with_trailing_comma()`")]]
  ::std::string get_annotation_with_trailing_comma() && {
    return static_cast<::std::string&&>(__fbthrift_field_annotation_with_trailing_comma);
  }

  /** Glean { "field": "annotation_with_trailing_comma" } */
  template <typename T_YourStruct_annotation_with_trailing_comma_struct_setter = ::std::string>
  [[deprecated("Use `FOO.annotation_with_trailing_comma() = BAR` instead of `FOO.set_annotation_with_trailing_comma(BAR)`")]]
  ::std::string& set_annotation_with_trailing_comma(T_YourStruct_annotation_with_trailing_comma_struct_setter&& annotation_with_trailing_comma_) {
    annotation_with_trailing_comma_ref() = std::forward<T_YourStruct_annotation_with_trailing_comma_struct_setter>(annotation_with_trailing_comma_);
    return __fbthrift_field_annotation_with_trailing_comma;
  }

  /** Glean { "field": "empty_annotations" } */
  [[deprecated("Use `FOO.empty_annotations().value()` instead of `FOO.get_empty_annotations()`")]]
  const ::std::string& get_empty_annotations() const& {
    return __fbthrift_field_empty_annotations;
  }

  /** Glean { "field": "empty_annotations" } */
  [[deprecated("Use `FOO.empty_annotations().value()` instead of `FOO.get_empty_annotations()`")]]
  ::std::string get_empty_annotations() && {
    return static_cast<::std::string&&>(__fbthrift_field_empty_annotations);
  }

  /** Glean { "field": "empty_annotations" } */
  template <typename T_YourStruct_empty_annotations_struct_setter = ::std::string>
  [[deprecated("Use `FOO.empty_annotations() = BAR` instead of `FOO.set_empty_annotations(BAR)`")]]
  ::std::string& set_empty_annotations(T_YourStruct_empty_annotations_struct_setter&& empty_annotations_) {
    empty_annotations_ref() = std::forward<T_YourStruct_empty_annotations_struct_setter>(empty_annotations_);
    return __fbthrift_field_empty_annotations;
  }

  /** Glean { "field": "my_enum" } */
  [[deprecated("Use `FOO.my_enum().value()` instead of `FOO.get_my_enum()`")]]
  ::cpp2::YourEnum get_my_enum() const;

  /** Glean { "field": "my_enum" } */
  [[deprecated("Use `FOO.my_enum() = BAR` instead of `FOO.set_my_enum(BAR)`")]]
  ::cpp2::YourEnum& set_my_enum(::cpp2::YourEnum my_enum_);

  /** Glean { "field": "cpp_type_annotation" } */
  [[deprecated("Use `FOO.cpp_type_annotation().value()` instead of `FOO.get_cpp_type_annotation()`")]]
  const ::cpp2::list_string_6884& get_cpp_type_annotation() const&;

  /** Glean { "field": "cpp_type_annotation" } */
  [[deprecated("Use `FOO.cpp_type_annotation().value()` instead of `FOO.get_cpp_type_annotation()`")]]
  ::cpp2::list_string_6884 get_cpp_type_annotation() &&;

  /** Glean { "field": "cpp_type_annotation" } */
  template <typename T_YourStruct_cpp_type_annotation_struct_setter = ::cpp2::list_string_6884>
  [[deprecated("Use `FOO.cpp_type_annotation() = BAR` instead of `FOO.set_cpp_type_annotation(BAR)`")]]
  ::cpp2::list_string_6884& set_cpp_type_annotation(T_YourStruct_cpp_type_annotation_struct_setter&& cpp_type_annotation_) {
    cpp_type_annotation_ref() = std::forward<T_YourStruct_cpp_type_annotation_struct_setter>(cpp_type_annotation_);
    return __fbthrift_field_cpp_type_annotation;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<YourStruct>;
  friend void swap(YourStruct& a, YourStruct& b);
};

template <class Protocol_>
unsigned long YourStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}
} // namespace detail

using YourStruct = ::apache::thrift::adapt_detail::adapted_t<::StaticCast, ::cpp2::detail::YourStruct>;

/** Glean {"file": "thrift/compiler/test/fixtures/basic-annotations/src/module.thrift", "name": "AwesomeStruct", "kind": "typedef" } */
using AwesomeStruct = ::cpp2::YourStruct;
/** Glean {"file": "thrift/compiler/test/fixtures/basic-annotations/src/module.thrift", "name": "FantasticStruct", "kind": "typedef" } */
using FantasticStruct = ::cpp2::YourStruct;

/** Glean {"file": "thrift/compiler/test/fixtures/basic-annotations/src/module.thrift", "name": "MyStructNestedAnnotation", "kind": "struct" } */
class MyStructNestedAnnotation final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::name
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructNestedAnnotation;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructNestedAnnotation();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructNestedAnnotation(apache::thrift::FragileConstructor, ::std::string name__arg);

  MyStructNestedAnnotation(MyStructNestedAnnotation&&) noexcept;

  MyStructNestedAnnotation(const MyStructNestedAnnotation& src);


  MyStructNestedAnnotation& operator=(MyStructNestedAnnotation&&) noexcept;
  MyStructNestedAnnotation& operator=(const MyStructNestedAnnotation& src);

  ~MyStructNestedAnnotation();

 private:
  ::std::string __fbthrift_field_name;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructNestedAnnotation&) const;
  bool operator<(const MyStructNestedAnnotation&) const;

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  ::std::string get_name() && {
    return static_cast<::std::string&&>(__fbthrift_field_name);
  }

  /** Glean { "field": "name" } */
  template <typename T_MyStructNestedAnnotation_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name() = BAR` instead of `FOO.set_name(BAR)`")]]
  ::std::string& set_name(T_MyStructNestedAnnotation_name_struct_setter&& name_) {
    name_ref() = std::forward<T_MyStructNestedAnnotation_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructNestedAnnotation>;
  friend void swap(MyStructNestedAnnotation& a, MyStructNestedAnnotation& b);
};

template <class Protocol_>
unsigned long MyStructNestedAnnotation::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


namespace detail {
/** Glean {"file": "thrift/compiler/test/fixtures/basic-annotations/src/module.thrift", "name": "YourException", "kind": "exception" } */
class FOLLY_EXPORT YourException : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::SAFE;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = YourException;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  YourException();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  YourException(apache::thrift::FragileConstructor);

  YourException(YourException&&) noexcept;

  YourException(const YourException& src);


  YourException& operator=(YourException&&) noexcept;
  YourException& operator=(const YourException& src);

  ~YourException() override;


 public:

  bool operator==(const YourException&) const;
  bool operator<(const YourException&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2::detail::YourException";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<YourException>;
  friend void swap(YourException& a, YourException& b);
};

template <class Protocol_>
unsigned long YourException::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}
} // namespace detail

using YourException = ::apache::thrift::adapt_detail::adapted_t<::StaticCast, ::cpp2::detail::YourException>;


/** Glean {"file": "thrift/compiler/test/fixtures/basic-annotations/src/module.thrift", "name": "SecretStruct", "kind": "struct" } */
class SecretStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::id,
    ::apache::thrift::ident::password
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SecretStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  SecretStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SecretStruct(apache::thrift::FragileConstructor, ::std::int64_t id__arg, ::std::string password__arg);

  SecretStruct(SecretStruct&&) noexcept;

  SecretStruct(const SecretStruct& src);


  SecretStruct& operator=(SecretStruct&&) noexcept;
  SecretStruct& operator=(const SecretStruct& src);

  ~SecretStruct();

 private:
  ::std::int64_t __fbthrift_field_id;
 private:
  ::std::string __fbthrift_field_password;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SecretStruct&) const;
  bool operator<(const SecretStruct&) const;

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> id_ref() const& {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> id_ref() & {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> id_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_id), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> id() const& {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> id() & {
    return {this->__fbthrift_field_id, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "id" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> id() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_id), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "password" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> password_ref() const& {
    return {this->__fbthrift_field_password, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "password" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> password_ref() & {
    return {this->__fbthrift_field_password, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "password" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> password_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_password), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "password" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> password() const& {
    return {this->__fbthrift_field_password, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "password" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> password() & {
    return {this->__fbthrift_field_password, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "password" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> password() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_password), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "id" } */
  [[deprecated("Use `FOO.id().value()` instead of `FOO.get_id()`")]]
  ::std::int64_t get_id() const;

  /** Glean { "field": "id" } */
  [[deprecated("Use `FOO.id() = BAR` instead of `FOO.set_id(BAR)`")]]
  ::std::int64_t& set_id(::std::int64_t id_);

  /** Glean { "field": "password" } */
  [[deprecated("Use `FOO.password().value()` instead of `FOO.get_password()`")]]
  const ::std::string& get_password() const& {
    return __fbthrift_field_password;
  }

  /** Glean { "field": "password" } */
  [[deprecated("Use `FOO.password().value()` instead of `FOO.get_password()`")]]
  ::std::string get_password() && {
    return static_cast<::std::string&&>(__fbthrift_field_password);
  }

  /** Glean { "field": "password" } */
  template <typename T_SecretStruct_password_struct_setter = ::std::string>
  [[deprecated("Use `FOO.password() = BAR` instead of `FOO.set_password(BAR)`")]]
  ::std::string& set_password(T_SecretStruct_password_struct_setter&& password_) {
    password_ref() = std::forward<T_SecretStruct_password_struct_setter>(password_);
    return __fbthrift_field_password;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SecretStruct>;
  friend void swap(SecretStruct& a, SecretStruct& b);
};

template <class Protocol_>
unsigned long SecretStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace cpp2

namespace apache::thrift {

template <> struct TEnumDataStorage<::cpp2::detail::YourUnion::Type>;

template <> struct TEnumTraits<::cpp2::detail::YourUnion::Type> {
  using type = ::cpp2::detail::YourUnion::Type;

  static constexpr std::size_t const size = 0;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

};
} // namespace apache::thrift

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::cpp2::MyStructNestedAnnotation, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 5752107916518885951;
  static constexpr ::std::string_view definitionKey = {"\xac\x19\x92\x2b\x5e\x95\x8c\xbc\xbc\x6b\x17\x41\xa6\x6c\xfe\x1e", 16};
};
template <> struct TSchemaAssociation<::cpp2::detail::YourUnion, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 5752107916518885951;
  static constexpr ::std::string_view definitionKey = {"\x99\x26\x12\x02\x2e\x43\x17\x1f\x85\x48\x1b\x8b\x53\xd0\x3d\x7e", 16};
};
template <> struct TSchemaAssociation<::cpp2::detail::YourException, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 5752107916518885951;
  static constexpr ::std::string_view definitionKey = {"\x31\x68\x80\xff\xa7\xd1\x87\x47\xc9\x0e\x89\xf3\x1a\xf9\xd9\x60", 16};
};
template <> struct TSchemaAssociation<::cpp2::detail::YourStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 5752107916518885951;
  static constexpr ::std::string_view definitionKey = {"\x56\x7d\xaf\xeb\x75\xa2\x14\x86\xcd\x2c\x45\xbd\x9f\xab\x56\x46", 16};
};
template <> struct TSchemaAssociation<::cpp2::SecretStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 5752107916518885951;
  static constexpr ::std::string_view definitionKey = {"\x3e\x5d\x36\x12\x97\xa7\x26\x39\xda\x8d\x26\xb1\x02\xb2\x8c\x92", 16};
};
template <> struct TSchemaAssociation<::cpp2::YourEnum, true> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 5752107916518885951;
  static constexpr ::std::string_view definitionKey = {"\xde\x55\xc7\x67\xc2\xfe\xc8\x3c\x18\x48\x5d\xb5\x93\x13\x3f\x0f", 16};
};
} // namespace apache::thrift::detail
