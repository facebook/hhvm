/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.adapter;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class AdaptTemplatedTestStruct implements TBase, java.io.Serializable, Cloneable, Comparable<AdaptTemplatedTestStruct> {
  private static final TStruct STRUCT_DESC = new TStruct("AdaptTemplatedTestStruct");
  private static final TField ADAPTED_BOOL_FIELD_DESC = new TField("adaptedBool", TType.BOOL, (short)1);
  private static final TField ADAPTED_BYTE_FIELD_DESC = new TField("adaptedByte", TType.BYTE, (short)2);
  private static final TField ADAPTED_SHORT_FIELD_DESC = new TField("adaptedShort", TType.I16, (short)3);
  private static final TField ADAPTED_INTEGER_FIELD_DESC = new TField("adaptedInteger", TType.I32, (short)4);
  private static final TField ADAPTED_LONG_FIELD_DESC = new TField("adaptedLong", TType.I64, (short)5);
  private static final TField ADAPTED_DOUBLE_FIELD_DESC = new TField("adaptedDouble", TType.DOUBLE, (short)6);
  private static final TField ADAPTED_STRING_FIELD_DESC = new TField("adaptedString", TType.STRING, (short)7);
  private static final TField ADAPTED_LIST_FIELD_DESC = new TField("adaptedList", TType.LIST, (short)8);
  private static final TField ADAPTED_SET_FIELD_DESC = new TField("adaptedSet", TType.SET, (short)9);
  private static final TField ADAPTED_MAP_FIELD_DESC = new TField("adaptedMap", TType.MAP, (short)10);
  private static final TField ADAPTED_BOOL_DEFAULT_FIELD_DESC = new TField("adaptedBoolDefault", TType.BOOL, (short)11);
  private static final TField ADAPTED_BYTE_DEFAULT_FIELD_DESC = new TField("adaptedByteDefault", TType.BYTE, (short)12);
  private static final TField ADAPTED_SHORT_DEFAULT_FIELD_DESC = new TField("adaptedShortDefault", TType.I16, (short)13);
  private static final TField ADAPTED_INTEGER_DEFAULT_FIELD_DESC = new TField("adaptedIntegerDefault", TType.I32, (short)14);
  private static final TField ADAPTED_LONG_DEFAULT_FIELD_DESC = new TField("adaptedLongDefault", TType.I64, (short)15);
  private static final TField ADAPTED_DOUBLE_DEFAULT_FIELD_DESC = new TField("adaptedDoubleDefault", TType.DOUBLE, (short)16);
  private static final TField ADAPTED_STRING_DEFAULT_FIELD_DESC = new TField("adaptedStringDefault", TType.STRING, (short)17);
  private static final TField ADAPTED_ENUM_FIELD_DESC = new TField("adaptedEnum", TType.I32, (short)18);
  private static final TField ADAPTED_LIST_DEFAULT_FIELD_DESC = new TField("adaptedListDefault", TType.LIST, (short)19);
  private static final TField ADAPTED_SET_DEFAULT_FIELD_DESC = new TField("adaptedSetDefault", TType.SET, (short)20);
  private static final TField ADAPTED_MAP_DEFAULT_FIELD_DESC = new TField("adaptedMapDefault", TType.MAP, (short)21);
  private static final TField DOUBLE_TYPEDEF_BOOL_FIELD_DESC = new TField("doubleTypedefBool", TType.BOOL, (short)22);

  public boolean adaptedBool;
  public byte adaptedByte;
  public short adaptedShort;
  public int adaptedInteger;
  public long adaptedLong;
  public double adaptedDouble;
  public String adaptedString;
  public List<Long> adaptedList;
  public Set<Long> adaptedSet;
  public Map<Long,Long> adaptedMap;
  public boolean adaptedBoolDefault;
  public byte adaptedByteDefault;
  public short adaptedShortDefault;
  public int adaptedIntegerDefault;
  public long adaptedLongDefault;
  public double adaptedDoubleDefault;
  public String adaptedStringDefault;
  public ThriftAdaptedEnum adaptedEnum;
  public List<Long> adaptedListDefault;
  public Set<Long> adaptedSetDefault;
  public Map<Long,Long> adaptedMapDefault;
  public boolean doubleTypedefBool;
  public static final int ADAPTEDBOOL = 1;
  public static final int ADAPTEDBYTE = 2;
  public static final int ADAPTEDSHORT = 3;
  public static final int ADAPTEDINTEGER = 4;
  public static final int ADAPTEDLONG = 5;
  public static final int ADAPTEDDOUBLE = 6;
  public static final int ADAPTEDSTRING = 7;
  public static final int ADAPTEDLIST = 8;
  public static final int ADAPTEDSET = 9;
  public static final int ADAPTEDMAP = 10;
  public static final int ADAPTEDBOOLDEFAULT = 11;
  public static final int ADAPTEDBYTEDEFAULT = 12;
  public static final int ADAPTEDSHORTDEFAULT = 13;
  public static final int ADAPTEDINTEGERDEFAULT = 14;
  public static final int ADAPTEDLONGDEFAULT = 15;
  public static final int ADAPTEDDOUBLEDEFAULT = 16;
  public static final int ADAPTEDSTRINGDEFAULT = 17;
  public static final int ADAPTEDENUM = 18;
  public static final int ADAPTEDLISTDEFAULT = 19;
  public static final int ADAPTEDSETDEFAULT = 20;
  public static final int ADAPTEDMAPDEFAULT = 21;
  public static final int DOUBLETYPEDEFBOOL = 22;

  // isset id assignments
  private static final int __ADAPTEDBOOL_ISSET_ID = 0;
  private static final int __ADAPTEDBYTE_ISSET_ID = 1;
  private static final int __ADAPTEDSHORT_ISSET_ID = 2;
  private static final int __ADAPTEDINTEGER_ISSET_ID = 3;
  private static final int __ADAPTEDLONG_ISSET_ID = 4;
  private static final int __ADAPTEDDOUBLE_ISSET_ID = 5;
  private static final int __ADAPTEDBOOLDEFAULT_ISSET_ID = 6;
  private static final int __ADAPTEDBYTEDEFAULT_ISSET_ID = 7;
  private static final int __ADAPTEDSHORTDEFAULT_ISSET_ID = 8;
  private static final int __ADAPTEDINTEGERDEFAULT_ISSET_ID = 9;
  private static final int __ADAPTEDLONGDEFAULT_ISSET_ID = 10;
  private static final int __ADAPTEDDOUBLEDEFAULT_ISSET_ID = 11;
  private static final int __DOUBLETYPEDEFBOOL_ISSET_ID = 12;
  private BitSet __isset_bit_vector = new BitSet(13);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ADAPTEDBOOL, new FieldMetaData("adaptedBool", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(ADAPTEDBYTE, new FieldMetaData("adaptedByte", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMetaDataMap.put(ADAPTEDSHORT, new FieldMetaData("adaptedShort", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
    tmpMetaDataMap.put(ADAPTEDINTEGER, new FieldMetaData("adaptedInteger", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(ADAPTEDLONG, new FieldMetaData("adaptedLong", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(ADAPTEDDOUBLE, new FieldMetaData("adaptedDouble", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMetaDataMap.put(ADAPTEDSTRING, new FieldMetaData("adaptedString", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(ADAPTEDLIST, new FieldMetaData("adaptedList", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(ADAPTEDSET, new FieldMetaData("adaptedSet", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(ADAPTEDMAP, new FieldMetaData("adaptedMap", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I64), 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(ADAPTEDBOOLDEFAULT, new FieldMetaData("adaptedBoolDefault", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(ADAPTEDBYTEDEFAULT, new FieldMetaData("adaptedByteDefault", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMetaDataMap.put(ADAPTEDSHORTDEFAULT, new FieldMetaData("adaptedShortDefault", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
    tmpMetaDataMap.put(ADAPTEDINTEGERDEFAULT, new FieldMetaData("adaptedIntegerDefault", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(ADAPTEDLONGDEFAULT, new FieldMetaData("adaptedLongDefault", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(ADAPTEDDOUBLEDEFAULT, new FieldMetaData("adaptedDoubleDefault", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMetaDataMap.put(ADAPTEDSTRINGDEFAULT, new FieldMetaData("adaptedStringDefault", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(ADAPTEDENUM, new FieldMetaData("adaptedEnum", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(ADAPTEDLISTDEFAULT, new FieldMetaData("adaptedListDefault", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(ADAPTEDSETDEFAULT, new FieldMetaData("adaptedSetDefault", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(ADAPTEDMAPDEFAULT, new FieldMetaData("adaptedMapDefault", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I64), 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(DOUBLETYPEDEFBOOL, new FieldMetaData("doubleTypedefBool", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(AdaptTemplatedTestStruct.class, metaDataMap);
  }

  public AdaptTemplatedTestStruct() {
    this.adaptedBoolDefault = true;

    this.adaptedByteDefault = (byte)1;

    this.adaptedShortDefault = (short)2;

    this.adaptedIntegerDefault = 3;

    this.adaptedLongDefault = 4L;

    this.adaptedDoubleDefault = (double)5;

    this.adaptedStringDefault = "6";

    this.adaptedEnum = test.fixtures.adapter.ThriftAdaptedEnum.One;

    this.adaptedListDefault = new ArrayList<Long>();
    this.adaptedListDefault.add(1L);

    this.adaptedSetDefault = new HashSet<Long>();
    this.adaptedSetDefault.add(1L);

    this.adaptedMapDefault = new HashMap<Long,Long>();
    this.adaptedMapDefault.put(1L, 1L);

  }

  public AdaptTemplatedTestStruct(
      boolean adaptedBool,
      byte adaptedByte,
      short adaptedShort,
      int adaptedInteger,
      long adaptedLong,
      double adaptedDouble,
      String adaptedString,
      List<Long> adaptedList,
      Set<Long> adaptedSet,
      Map<Long,Long> adaptedMap,
      boolean adaptedBoolDefault,
      byte adaptedByteDefault,
      short adaptedShortDefault,
      int adaptedIntegerDefault,
      long adaptedLongDefault,
      double adaptedDoubleDefault,
      String adaptedStringDefault,
      ThriftAdaptedEnum adaptedEnum,
      List<Long> adaptedListDefault,
      Set<Long> adaptedSetDefault,
      Map<Long,Long> adaptedMapDefault,
      boolean doubleTypedefBool) {
    this();
    this.adaptedBool = adaptedBool;
    setAdaptedBoolIsSet(true);
    this.adaptedByte = adaptedByte;
    setAdaptedByteIsSet(true);
    this.adaptedShort = adaptedShort;
    setAdaptedShortIsSet(true);
    this.adaptedInteger = adaptedInteger;
    setAdaptedIntegerIsSet(true);
    this.adaptedLong = adaptedLong;
    setAdaptedLongIsSet(true);
    this.adaptedDouble = adaptedDouble;
    setAdaptedDoubleIsSet(true);
    this.adaptedString = adaptedString;
    this.adaptedList = adaptedList;
    this.adaptedSet = adaptedSet;
    this.adaptedMap = adaptedMap;
    this.adaptedBoolDefault = adaptedBoolDefault;
    setAdaptedBoolDefaultIsSet(true);
    this.adaptedByteDefault = adaptedByteDefault;
    setAdaptedByteDefaultIsSet(true);
    this.adaptedShortDefault = adaptedShortDefault;
    setAdaptedShortDefaultIsSet(true);
    this.adaptedIntegerDefault = adaptedIntegerDefault;
    setAdaptedIntegerDefaultIsSet(true);
    this.adaptedLongDefault = adaptedLongDefault;
    setAdaptedLongDefaultIsSet(true);
    this.adaptedDoubleDefault = adaptedDoubleDefault;
    setAdaptedDoubleDefaultIsSet(true);
    this.adaptedStringDefault = adaptedStringDefault;
    this.adaptedEnum = adaptedEnum;
    this.adaptedListDefault = adaptedListDefault;
    this.adaptedSetDefault = adaptedSetDefault;
    this.adaptedMapDefault = adaptedMapDefault;
    this.doubleTypedefBool = doubleTypedefBool;
    setDoubleTypedefBoolIsSet(true);
  }

  public static class Builder {
    private boolean adaptedBool;
    private byte adaptedByte;
    private short adaptedShort;
    private int adaptedInteger;
    private long adaptedLong;
    private double adaptedDouble;
    private String adaptedString;
    private List<Long> adaptedList;
    private Set<Long> adaptedSet;
    private Map<Long,Long> adaptedMap;
    private boolean adaptedBoolDefault;
    private byte adaptedByteDefault;
    private short adaptedShortDefault;
    private int adaptedIntegerDefault;
    private long adaptedLongDefault;
    private double adaptedDoubleDefault;
    private String adaptedStringDefault;
    private ThriftAdaptedEnum adaptedEnum;
    private List<Long> adaptedListDefault;
    private Set<Long> adaptedSetDefault;
    private Map<Long,Long> adaptedMapDefault;
    private boolean doubleTypedefBool;

    BitSet __optional_isset = new BitSet(13);

    public Builder() {
    }

    public Builder setAdaptedBool(final boolean adaptedBool) {
      this.adaptedBool = adaptedBool;
      __optional_isset.set(__ADAPTEDBOOL_ISSET_ID, true);
      return this;
    }

    public Builder setAdaptedByte(final byte adaptedByte) {
      this.adaptedByte = adaptedByte;
      __optional_isset.set(__ADAPTEDBYTE_ISSET_ID, true);
      return this;
    }

    public Builder setAdaptedShort(final short adaptedShort) {
      this.adaptedShort = adaptedShort;
      __optional_isset.set(__ADAPTEDSHORT_ISSET_ID, true);
      return this;
    }

    public Builder setAdaptedInteger(final int adaptedInteger) {
      this.adaptedInteger = adaptedInteger;
      __optional_isset.set(__ADAPTEDINTEGER_ISSET_ID, true);
      return this;
    }

    public Builder setAdaptedLong(final long adaptedLong) {
      this.adaptedLong = adaptedLong;
      __optional_isset.set(__ADAPTEDLONG_ISSET_ID, true);
      return this;
    }

    public Builder setAdaptedDouble(final double adaptedDouble) {
      this.adaptedDouble = adaptedDouble;
      __optional_isset.set(__ADAPTEDDOUBLE_ISSET_ID, true);
      return this;
    }

    public Builder setAdaptedString(final String adaptedString) {
      this.adaptedString = adaptedString;
      return this;
    }

    public Builder setAdaptedList(final List<Long> adaptedList) {
      this.adaptedList = adaptedList;
      return this;
    }

    public Builder setAdaptedSet(final Set<Long> adaptedSet) {
      this.adaptedSet = adaptedSet;
      return this;
    }

    public Builder setAdaptedMap(final Map<Long,Long> adaptedMap) {
      this.adaptedMap = adaptedMap;
      return this;
    }

    public Builder setAdaptedBoolDefault(final boolean adaptedBoolDefault) {
      this.adaptedBoolDefault = adaptedBoolDefault;
      __optional_isset.set(__ADAPTEDBOOLDEFAULT_ISSET_ID, true);
      return this;
    }

    public Builder setAdaptedByteDefault(final byte adaptedByteDefault) {
      this.adaptedByteDefault = adaptedByteDefault;
      __optional_isset.set(__ADAPTEDBYTEDEFAULT_ISSET_ID, true);
      return this;
    }

    public Builder setAdaptedShortDefault(final short adaptedShortDefault) {
      this.adaptedShortDefault = adaptedShortDefault;
      __optional_isset.set(__ADAPTEDSHORTDEFAULT_ISSET_ID, true);
      return this;
    }

    public Builder setAdaptedIntegerDefault(final int adaptedIntegerDefault) {
      this.adaptedIntegerDefault = adaptedIntegerDefault;
      __optional_isset.set(__ADAPTEDINTEGERDEFAULT_ISSET_ID, true);
      return this;
    }

    public Builder setAdaptedLongDefault(final long adaptedLongDefault) {
      this.adaptedLongDefault = adaptedLongDefault;
      __optional_isset.set(__ADAPTEDLONGDEFAULT_ISSET_ID, true);
      return this;
    }

    public Builder setAdaptedDoubleDefault(final double adaptedDoubleDefault) {
      this.adaptedDoubleDefault = adaptedDoubleDefault;
      __optional_isset.set(__ADAPTEDDOUBLEDEFAULT_ISSET_ID, true);
      return this;
    }

    public Builder setAdaptedStringDefault(final String adaptedStringDefault) {
      this.adaptedStringDefault = adaptedStringDefault;
      return this;
    }

    public Builder setAdaptedEnum(final ThriftAdaptedEnum adaptedEnum) {
      this.adaptedEnum = adaptedEnum;
      return this;
    }

    public Builder setAdaptedListDefault(final List<Long> adaptedListDefault) {
      this.adaptedListDefault = adaptedListDefault;
      return this;
    }

    public Builder setAdaptedSetDefault(final Set<Long> adaptedSetDefault) {
      this.adaptedSetDefault = adaptedSetDefault;
      return this;
    }

    public Builder setAdaptedMapDefault(final Map<Long,Long> adaptedMapDefault) {
      this.adaptedMapDefault = adaptedMapDefault;
      return this;
    }

    public Builder setDoubleTypedefBool(final boolean doubleTypedefBool) {
      this.doubleTypedefBool = doubleTypedefBool;
      __optional_isset.set(__DOUBLETYPEDEFBOOL_ISSET_ID, true);
      return this;
    }

    public AdaptTemplatedTestStruct build() {
      AdaptTemplatedTestStruct result = new AdaptTemplatedTestStruct();
      if (__optional_isset.get(__ADAPTEDBOOL_ISSET_ID)) {
        result.setAdaptedBool(this.adaptedBool);
      }
      if (__optional_isset.get(__ADAPTEDBYTE_ISSET_ID)) {
        result.setAdaptedByte(this.adaptedByte);
      }
      if (__optional_isset.get(__ADAPTEDSHORT_ISSET_ID)) {
        result.setAdaptedShort(this.adaptedShort);
      }
      if (__optional_isset.get(__ADAPTEDINTEGER_ISSET_ID)) {
        result.setAdaptedInteger(this.adaptedInteger);
      }
      if (__optional_isset.get(__ADAPTEDLONG_ISSET_ID)) {
        result.setAdaptedLong(this.adaptedLong);
      }
      if (__optional_isset.get(__ADAPTEDDOUBLE_ISSET_ID)) {
        result.setAdaptedDouble(this.adaptedDouble);
      }
      result.setAdaptedString(this.adaptedString);
      result.setAdaptedList(this.adaptedList);
      result.setAdaptedSet(this.adaptedSet);
      result.setAdaptedMap(this.adaptedMap);
      if (__optional_isset.get(__ADAPTEDBOOLDEFAULT_ISSET_ID)) {
        result.setAdaptedBoolDefault(this.adaptedBoolDefault);
      }
      if (__optional_isset.get(__ADAPTEDBYTEDEFAULT_ISSET_ID)) {
        result.setAdaptedByteDefault(this.adaptedByteDefault);
      }
      if (__optional_isset.get(__ADAPTEDSHORTDEFAULT_ISSET_ID)) {
        result.setAdaptedShortDefault(this.adaptedShortDefault);
      }
      if (__optional_isset.get(__ADAPTEDINTEGERDEFAULT_ISSET_ID)) {
        result.setAdaptedIntegerDefault(this.adaptedIntegerDefault);
      }
      if (__optional_isset.get(__ADAPTEDLONGDEFAULT_ISSET_ID)) {
        result.setAdaptedLongDefault(this.adaptedLongDefault);
      }
      if (__optional_isset.get(__ADAPTEDDOUBLEDEFAULT_ISSET_ID)) {
        result.setAdaptedDoubleDefault(this.adaptedDoubleDefault);
      }
      result.setAdaptedStringDefault(this.adaptedStringDefault);
      result.setAdaptedEnum(this.adaptedEnum);
      result.setAdaptedListDefault(this.adaptedListDefault);
      result.setAdaptedSetDefault(this.adaptedSetDefault);
      result.setAdaptedMapDefault(this.adaptedMapDefault);
      if (__optional_isset.get(__DOUBLETYPEDEFBOOL_ISSET_ID)) {
        result.setDoubleTypedefBool(this.doubleTypedefBool);
      }
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdaptTemplatedTestStruct(AdaptTemplatedTestStruct other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.adaptedBool = TBaseHelper.deepCopy(other.adaptedBool);
    this.adaptedByte = TBaseHelper.deepCopy(other.adaptedByte);
    this.adaptedShort = TBaseHelper.deepCopy(other.adaptedShort);
    this.adaptedInteger = TBaseHelper.deepCopy(other.adaptedInteger);
    this.adaptedLong = TBaseHelper.deepCopy(other.adaptedLong);
    this.adaptedDouble = TBaseHelper.deepCopy(other.adaptedDouble);
    if (other.isSetAdaptedString()) {
      this.adaptedString = TBaseHelper.deepCopy(other.adaptedString);
    }
    if (other.isSetAdaptedList()) {
      this.adaptedList = TBaseHelper.deepCopy(other.adaptedList);
    }
    if (other.isSetAdaptedSet()) {
      this.adaptedSet = TBaseHelper.deepCopy(other.adaptedSet);
    }
    if (other.isSetAdaptedMap()) {
      this.adaptedMap = TBaseHelper.deepCopy(other.adaptedMap);
    }
    this.adaptedBoolDefault = TBaseHelper.deepCopy(other.adaptedBoolDefault);
    this.adaptedByteDefault = TBaseHelper.deepCopy(other.adaptedByteDefault);
    this.adaptedShortDefault = TBaseHelper.deepCopy(other.adaptedShortDefault);
    this.adaptedIntegerDefault = TBaseHelper.deepCopy(other.adaptedIntegerDefault);
    this.adaptedLongDefault = TBaseHelper.deepCopy(other.adaptedLongDefault);
    this.adaptedDoubleDefault = TBaseHelper.deepCopy(other.adaptedDoubleDefault);
    if (other.isSetAdaptedStringDefault()) {
      this.adaptedStringDefault = TBaseHelper.deepCopy(other.adaptedStringDefault);
    }
    if (other.isSetAdaptedEnum()) {
      this.adaptedEnum = TBaseHelper.deepCopy(other.adaptedEnum);
    }
    if (other.isSetAdaptedListDefault()) {
      this.adaptedListDefault = TBaseHelper.deepCopy(other.adaptedListDefault);
    }
    if (other.isSetAdaptedSetDefault()) {
      this.adaptedSetDefault = TBaseHelper.deepCopy(other.adaptedSetDefault);
    }
    if (other.isSetAdaptedMapDefault()) {
      this.adaptedMapDefault = TBaseHelper.deepCopy(other.adaptedMapDefault);
    }
    this.doubleTypedefBool = TBaseHelper.deepCopy(other.doubleTypedefBool);
  }

  public AdaptTemplatedTestStruct deepCopy() {
    return new AdaptTemplatedTestStruct(this);
  }

  public boolean isAdaptedBool() {
    return this.adaptedBool;
  }

  public AdaptTemplatedTestStruct setAdaptedBool(boolean adaptedBool) {
    this.adaptedBool = adaptedBool;
    setAdaptedBoolIsSet(true);
    return this;
  }

  public void unsetAdaptedBool() {
    __isset_bit_vector.clear(__ADAPTEDBOOL_ISSET_ID);
  }

  // Returns true if field adaptedBool is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedBool() {
    return __isset_bit_vector.get(__ADAPTEDBOOL_ISSET_ID);
  }

  public void setAdaptedBoolIsSet(boolean __value) {
    __isset_bit_vector.set(__ADAPTEDBOOL_ISSET_ID, __value);
  }

  public byte getAdaptedByte() {
    return this.adaptedByte;
  }

  public AdaptTemplatedTestStruct setAdaptedByte(byte adaptedByte) {
    this.adaptedByte = adaptedByte;
    setAdaptedByteIsSet(true);
    return this;
  }

  public void unsetAdaptedByte() {
    __isset_bit_vector.clear(__ADAPTEDBYTE_ISSET_ID);
  }

  // Returns true if field adaptedByte is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedByte() {
    return __isset_bit_vector.get(__ADAPTEDBYTE_ISSET_ID);
  }

  public void setAdaptedByteIsSet(boolean __value) {
    __isset_bit_vector.set(__ADAPTEDBYTE_ISSET_ID, __value);
  }

  public short getAdaptedShort() {
    return this.adaptedShort;
  }

  public AdaptTemplatedTestStruct setAdaptedShort(short adaptedShort) {
    this.adaptedShort = adaptedShort;
    setAdaptedShortIsSet(true);
    return this;
  }

  public void unsetAdaptedShort() {
    __isset_bit_vector.clear(__ADAPTEDSHORT_ISSET_ID);
  }

  // Returns true if field adaptedShort is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedShort() {
    return __isset_bit_vector.get(__ADAPTEDSHORT_ISSET_ID);
  }

  public void setAdaptedShortIsSet(boolean __value) {
    __isset_bit_vector.set(__ADAPTEDSHORT_ISSET_ID, __value);
  }

  public int getAdaptedInteger() {
    return this.adaptedInteger;
  }

  public AdaptTemplatedTestStruct setAdaptedInteger(int adaptedInteger) {
    this.adaptedInteger = adaptedInteger;
    setAdaptedIntegerIsSet(true);
    return this;
  }

  public void unsetAdaptedInteger() {
    __isset_bit_vector.clear(__ADAPTEDINTEGER_ISSET_ID);
  }

  // Returns true if field adaptedInteger is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedInteger() {
    return __isset_bit_vector.get(__ADAPTEDINTEGER_ISSET_ID);
  }

  public void setAdaptedIntegerIsSet(boolean __value) {
    __isset_bit_vector.set(__ADAPTEDINTEGER_ISSET_ID, __value);
  }

  public long getAdaptedLong() {
    return this.adaptedLong;
  }

  public AdaptTemplatedTestStruct setAdaptedLong(long adaptedLong) {
    this.adaptedLong = adaptedLong;
    setAdaptedLongIsSet(true);
    return this;
  }

  public void unsetAdaptedLong() {
    __isset_bit_vector.clear(__ADAPTEDLONG_ISSET_ID);
  }

  // Returns true if field adaptedLong is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedLong() {
    return __isset_bit_vector.get(__ADAPTEDLONG_ISSET_ID);
  }

  public void setAdaptedLongIsSet(boolean __value) {
    __isset_bit_vector.set(__ADAPTEDLONG_ISSET_ID, __value);
  }

  public double getAdaptedDouble() {
    return this.adaptedDouble;
  }

  public AdaptTemplatedTestStruct setAdaptedDouble(double adaptedDouble) {
    this.adaptedDouble = adaptedDouble;
    setAdaptedDoubleIsSet(true);
    return this;
  }

  public void unsetAdaptedDouble() {
    __isset_bit_vector.clear(__ADAPTEDDOUBLE_ISSET_ID);
  }

  // Returns true if field adaptedDouble is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedDouble() {
    return __isset_bit_vector.get(__ADAPTEDDOUBLE_ISSET_ID);
  }

  public void setAdaptedDoubleIsSet(boolean __value) {
    __isset_bit_vector.set(__ADAPTEDDOUBLE_ISSET_ID, __value);
  }

  public String getAdaptedString() {
    return this.adaptedString;
  }

  public AdaptTemplatedTestStruct setAdaptedString(String adaptedString) {
    this.adaptedString = adaptedString;
    return this;
  }

  public void unsetAdaptedString() {
    this.adaptedString = null;
  }

  // Returns true if field adaptedString is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedString() {
    return this.adaptedString != null;
  }

  public void setAdaptedStringIsSet(boolean __value) {
    if (!__value) {
      this.adaptedString = null;
    }
  }

  public List<Long> getAdaptedList() {
    return this.adaptedList;
  }

  public AdaptTemplatedTestStruct setAdaptedList(List<Long> adaptedList) {
    this.adaptedList = adaptedList;
    return this;
  }

  public void unsetAdaptedList() {
    this.adaptedList = null;
  }

  // Returns true if field adaptedList is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedList() {
    return this.adaptedList != null;
  }

  public void setAdaptedListIsSet(boolean __value) {
    if (!__value) {
      this.adaptedList = null;
    }
  }

  public Set<Long> getAdaptedSet() {
    return this.adaptedSet;
  }

  public AdaptTemplatedTestStruct setAdaptedSet(Set<Long> adaptedSet) {
    this.adaptedSet = adaptedSet;
    return this;
  }

  public void unsetAdaptedSet() {
    this.adaptedSet = null;
  }

  // Returns true if field adaptedSet is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedSet() {
    return this.adaptedSet != null;
  }

  public void setAdaptedSetIsSet(boolean __value) {
    if (!__value) {
      this.adaptedSet = null;
    }
  }

  public Map<Long,Long> getAdaptedMap() {
    return this.adaptedMap;
  }

  public AdaptTemplatedTestStruct setAdaptedMap(Map<Long,Long> adaptedMap) {
    this.adaptedMap = adaptedMap;
    return this;
  }

  public void unsetAdaptedMap() {
    this.adaptedMap = null;
  }

  // Returns true if field adaptedMap is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedMap() {
    return this.adaptedMap != null;
  }

  public void setAdaptedMapIsSet(boolean __value) {
    if (!__value) {
      this.adaptedMap = null;
    }
  }

  public boolean isAdaptedBoolDefault() {
    return this.adaptedBoolDefault;
  }

  public AdaptTemplatedTestStruct setAdaptedBoolDefault(boolean adaptedBoolDefault) {
    this.adaptedBoolDefault = adaptedBoolDefault;
    setAdaptedBoolDefaultIsSet(true);
    return this;
  }

  public void unsetAdaptedBoolDefault() {
    __isset_bit_vector.clear(__ADAPTEDBOOLDEFAULT_ISSET_ID);
  }

  // Returns true if field adaptedBoolDefault is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedBoolDefault() {
    return __isset_bit_vector.get(__ADAPTEDBOOLDEFAULT_ISSET_ID);
  }

  public void setAdaptedBoolDefaultIsSet(boolean __value) {
    __isset_bit_vector.set(__ADAPTEDBOOLDEFAULT_ISSET_ID, __value);
  }

  public byte getAdaptedByteDefault() {
    return this.adaptedByteDefault;
  }

  public AdaptTemplatedTestStruct setAdaptedByteDefault(byte adaptedByteDefault) {
    this.adaptedByteDefault = adaptedByteDefault;
    setAdaptedByteDefaultIsSet(true);
    return this;
  }

  public void unsetAdaptedByteDefault() {
    __isset_bit_vector.clear(__ADAPTEDBYTEDEFAULT_ISSET_ID);
  }

  // Returns true if field adaptedByteDefault is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedByteDefault() {
    return __isset_bit_vector.get(__ADAPTEDBYTEDEFAULT_ISSET_ID);
  }

  public void setAdaptedByteDefaultIsSet(boolean __value) {
    __isset_bit_vector.set(__ADAPTEDBYTEDEFAULT_ISSET_ID, __value);
  }

  public short getAdaptedShortDefault() {
    return this.adaptedShortDefault;
  }

  public AdaptTemplatedTestStruct setAdaptedShortDefault(short adaptedShortDefault) {
    this.adaptedShortDefault = adaptedShortDefault;
    setAdaptedShortDefaultIsSet(true);
    return this;
  }

  public void unsetAdaptedShortDefault() {
    __isset_bit_vector.clear(__ADAPTEDSHORTDEFAULT_ISSET_ID);
  }

  // Returns true if field adaptedShortDefault is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedShortDefault() {
    return __isset_bit_vector.get(__ADAPTEDSHORTDEFAULT_ISSET_ID);
  }

  public void setAdaptedShortDefaultIsSet(boolean __value) {
    __isset_bit_vector.set(__ADAPTEDSHORTDEFAULT_ISSET_ID, __value);
  }

  public int getAdaptedIntegerDefault() {
    return this.adaptedIntegerDefault;
  }

  public AdaptTemplatedTestStruct setAdaptedIntegerDefault(int adaptedIntegerDefault) {
    this.adaptedIntegerDefault = adaptedIntegerDefault;
    setAdaptedIntegerDefaultIsSet(true);
    return this;
  }

  public void unsetAdaptedIntegerDefault() {
    __isset_bit_vector.clear(__ADAPTEDINTEGERDEFAULT_ISSET_ID);
  }

  // Returns true if field adaptedIntegerDefault is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedIntegerDefault() {
    return __isset_bit_vector.get(__ADAPTEDINTEGERDEFAULT_ISSET_ID);
  }

  public void setAdaptedIntegerDefaultIsSet(boolean __value) {
    __isset_bit_vector.set(__ADAPTEDINTEGERDEFAULT_ISSET_ID, __value);
  }

  public long getAdaptedLongDefault() {
    return this.adaptedLongDefault;
  }

  public AdaptTemplatedTestStruct setAdaptedLongDefault(long adaptedLongDefault) {
    this.adaptedLongDefault = adaptedLongDefault;
    setAdaptedLongDefaultIsSet(true);
    return this;
  }

  public void unsetAdaptedLongDefault() {
    __isset_bit_vector.clear(__ADAPTEDLONGDEFAULT_ISSET_ID);
  }

  // Returns true if field adaptedLongDefault is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedLongDefault() {
    return __isset_bit_vector.get(__ADAPTEDLONGDEFAULT_ISSET_ID);
  }

  public void setAdaptedLongDefaultIsSet(boolean __value) {
    __isset_bit_vector.set(__ADAPTEDLONGDEFAULT_ISSET_ID, __value);
  }

  public double getAdaptedDoubleDefault() {
    return this.adaptedDoubleDefault;
  }

  public AdaptTemplatedTestStruct setAdaptedDoubleDefault(double adaptedDoubleDefault) {
    this.adaptedDoubleDefault = adaptedDoubleDefault;
    setAdaptedDoubleDefaultIsSet(true);
    return this;
  }

  public void unsetAdaptedDoubleDefault() {
    __isset_bit_vector.clear(__ADAPTEDDOUBLEDEFAULT_ISSET_ID);
  }

  // Returns true if field adaptedDoubleDefault is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedDoubleDefault() {
    return __isset_bit_vector.get(__ADAPTEDDOUBLEDEFAULT_ISSET_ID);
  }

  public void setAdaptedDoubleDefaultIsSet(boolean __value) {
    __isset_bit_vector.set(__ADAPTEDDOUBLEDEFAULT_ISSET_ID, __value);
  }

  public String getAdaptedStringDefault() {
    return this.adaptedStringDefault;
  }

  public AdaptTemplatedTestStruct setAdaptedStringDefault(String adaptedStringDefault) {
    this.adaptedStringDefault = adaptedStringDefault;
    return this;
  }

  public void unsetAdaptedStringDefault() {
    this.adaptedStringDefault = null;
  }

  // Returns true if field adaptedStringDefault is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedStringDefault() {
    return this.adaptedStringDefault != null;
  }

  public void setAdaptedStringDefaultIsSet(boolean __value) {
    if (!__value) {
      this.adaptedStringDefault = null;
    }
  }

  public ThriftAdaptedEnum getAdaptedEnum() {
    return this.adaptedEnum;
  }

  public AdaptTemplatedTestStruct setAdaptedEnum(ThriftAdaptedEnum adaptedEnum) {
    this.adaptedEnum = adaptedEnum;
    return this;
  }

  public void unsetAdaptedEnum() {
    this.adaptedEnum = null;
  }

  // Returns true if field adaptedEnum is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedEnum() {
    return this.adaptedEnum != null;
  }

  public void setAdaptedEnumIsSet(boolean __value) {
    if (!__value) {
      this.adaptedEnum = null;
    }
  }

  public List<Long> getAdaptedListDefault() {
    return this.adaptedListDefault;
  }

  public AdaptTemplatedTestStruct setAdaptedListDefault(List<Long> adaptedListDefault) {
    this.adaptedListDefault = adaptedListDefault;
    return this;
  }

  public void unsetAdaptedListDefault() {
    this.adaptedListDefault = null;
  }

  // Returns true if field adaptedListDefault is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedListDefault() {
    return this.adaptedListDefault != null;
  }

  public void setAdaptedListDefaultIsSet(boolean __value) {
    if (!__value) {
      this.adaptedListDefault = null;
    }
  }

  public Set<Long> getAdaptedSetDefault() {
    return this.adaptedSetDefault;
  }

  public AdaptTemplatedTestStruct setAdaptedSetDefault(Set<Long> adaptedSetDefault) {
    this.adaptedSetDefault = adaptedSetDefault;
    return this;
  }

  public void unsetAdaptedSetDefault() {
    this.adaptedSetDefault = null;
  }

  // Returns true if field adaptedSetDefault is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedSetDefault() {
    return this.adaptedSetDefault != null;
  }

  public void setAdaptedSetDefaultIsSet(boolean __value) {
    if (!__value) {
      this.adaptedSetDefault = null;
    }
  }

  public Map<Long,Long> getAdaptedMapDefault() {
    return this.adaptedMapDefault;
  }

  public AdaptTemplatedTestStruct setAdaptedMapDefault(Map<Long,Long> adaptedMapDefault) {
    this.adaptedMapDefault = adaptedMapDefault;
    return this;
  }

  public void unsetAdaptedMapDefault() {
    this.adaptedMapDefault = null;
  }

  // Returns true if field adaptedMapDefault is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedMapDefault() {
    return this.adaptedMapDefault != null;
  }

  public void setAdaptedMapDefaultIsSet(boolean __value) {
    if (!__value) {
      this.adaptedMapDefault = null;
    }
  }

  public boolean isDoubleTypedefBool() {
    return this.doubleTypedefBool;
  }

  public AdaptTemplatedTestStruct setDoubleTypedefBool(boolean doubleTypedefBool) {
    this.doubleTypedefBool = doubleTypedefBool;
    setDoubleTypedefBoolIsSet(true);
    return this;
  }

  public void unsetDoubleTypedefBool() {
    __isset_bit_vector.clear(__DOUBLETYPEDEFBOOL_ISSET_ID);
  }

  // Returns true if field doubleTypedefBool is set (has been assigned a value) and false otherwise
  public boolean isSetDoubleTypedefBool() {
    return __isset_bit_vector.get(__DOUBLETYPEDEFBOOL_ISSET_ID);
  }

  public void setDoubleTypedefBoolIsSet(boolean __value) {
    __isset_bit_vector.set(__DOUBLETYPEDEFBOOL_ISSET_ID, __value);
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case ADAPTEDBOOL:
      if (__value == null) {
        unsetAdaptedBool();
      } else {
        setAdaptedBool((Boolean)__value);
      }
      break;

    case ADAPTEDBYTE:
      if (__value == null) {
        unsetAdaptedByte();
      } else {
        setAdaptedByte((Byte)__value);
      }
      break;

    case ADAPTEDSHORT:
      if (__value == null) {
        unsetAdaptedShort();
      } else {
        setAdaptedShort((Short)__value);
      }
      break;

    case ADAPTEDINTEGER:
      if (__value == null) {
        unsetAdaptedInteger();
      } else {
        setAdaptedInteger((Integer)__value);
      }
      break;

    case ADAPTEDLONG:
      if (__value == null) {
        unsetAdaptedLong();
      } else {
        setAdaptedLong((Long)__value);
      }
      break;

    case ADAPTEDDOUBLE:
      if (__value == null) {
        unsetAdaptedDouble();
      } else {
        setAdaptedDouble((Double)__value);
      }
      break;

    case ADAPTEDSTRING:
      if (__value == null) {
        unsetAdaptedString();
      } else {
        setAdaptedString((String)__value);
      }
      break;

    case ADAPTEDLIST:
      if (__value == null) {
        unsetAdaptedList();
      } else {
        setAdaptedList((List<Long>)__value);
      }
      break;

    case ADAPTEDSET:
      if (__value == null) {
        unsetAdaptedSet();
      } else {
        setAdaptedSet((Set<Long>)__value);
      }
      break;

    case ADAPTEDMAP:
      if (__value == null) {
        unsetAdaptedMap();
      } else {
        setAdaptedMap((Map<Long,Long>)__value);
      }
      break;

    case ADAPTEDBOOLDEFAULT:
      if (__value == null) {
        unsetAdaptedBoolDefault();
      } else {
        setAdaptedBoolDefault((Boolean)__value);
      }
      break;

    case ADAPTEDBYTEDEFAULT:
      if (__value == null) {
        unsetAdaptedByteDefault();
      } else {
        setAdaptedByteDefault((Byte)__value);
      }
      break;

    case ADAPTEDSHORTDEFAULT:
      if (__value == null) {
        unsetAdaptedShortDefault();
      } else {
        setAdaptedShortDefault((Short)__value);
      }
      break;

    case ADAPTEDINTEGERDEFAULT:
      if (__value == null) {
        unsetAdaptedIntegerDefault();
      } else {
        setAdaptedIntegerDefault((Integer)__value);
      }
      break;

    case ADAPTEDLONGDEFAULT:
      if (__value == null) {
        unsetAdaptedLongDefault();
      } else {
        setAdaptedLongDefault((Long)__value);
      }
      break;

    case ADAPTEDDOUBLEDEFAULT:
      if (__value == null) {
        unsetAdaptedDoubleDefault();
      } else {
        setAdaptedDoubleDefault((Double)__value);
      }
      break;

    case ADAPTEDSTRINGDEFAULT:
      if (__value == null) {
        unsetAdaptedStringDefault();
      } else {
        setAdaptedStringDefault((String)__value);
      }
      break;

    case ADAPTEDENUM:
      if (__value == null) {
        unsetAdaptedEnum();
      } else {
        setAdaptedEnum((ThriftAdaptedEnum)__value);
      }
      break;

    case ADAPTEDLISTDEFAULT:
      if (__value == null) {
        unsetAdaptedListDefault();
      } else {
        setAdaptedListDefault((List<Long>)__value);
      }
      break;

    case ADAPTEDSETDEFAULT:
      if (__value == null) {
        unsetAdaptedSetDefault();
      } else {
        setAdaptedSetDefault((Set<Long>)__value);
      }
      break;

    case ADAPTEDMAPDEFAULT:
      if (__value == null) {
        unsetAdaptedMapDefault();
      } else {
        setAdaptedMapDefault((Map<Long,Long>)__value);
      }
      break;

    case DOUBLETYPEDEFBOOL:
      if (__value == null) {
        unsetDoubleTypedefBool();
      } else {
        setDoubleTypedefBool((Boolean)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ADAPTEDBOOL:
      return new Boolean(isAdaptedBool());

    case ADAPTEDBYTE:
      return new Byte(getAdaptedByte());

    case ADAPTEDSHORT:
      return new Short(getAdaptedShort());

    case ADAPTEDINTEGER:
      return new Integer(getAdaptedInteger());

    case ADAPTEDLONG:
      return new Long(getAdaptedLong());

    case ADAPTEDDOUBLE:
      return new Double(getAdaptedDouble());

    case ADAPTEDSTRING:
      return getAdaptedString();

    case ADAPTEDLIST:
      return getAdaptedList();

    case ADAPTEDSET:
      return getAdaptedSet();

    case ADAPTEDMAP:
      return getAdaptedMap();

    case ADAPTEDBOOLDEFAULT:
      return new Boolean(isAdaptedBoolDefault());

    case ADAPTEDBYTEDEFAULT:
      return new Byte(getAdaptedByteDefault());

    case ADAPTEDSHORTDEFAULT:
      return new Short(getAdaptedShortDefault());

    case ADAPTEDINTEGERDEFAULT:
      return new Integer(getAdaptedIntegerDefault());

    case ADAPTEDLONGDEFAULT:
      return new Long(getAdaptedLongDefault());

    case ADAPTEDDOUBLEDEFAULT:
      return new Double(getAdaptedDoubleDefault());

    case ADAPTEDSTRINGDEFAULT:
      return getAdaptedStringDefault();

    case ADAPTEDENUM:
      return getAdaptedEnum();

    case ADAPTEDLISTDEFAULT:
      return getAdaptedListDefault();

    case ADAPTEDSETDEFAULT:
      return getAdaptedSetDefault();

    case ADAPTEDMAPDEFAULT:
      return getAdaptedMapDefault();

    case DOUBLETYPEDEFBOOL:
      return new Boolean(isDoubleTypedefBool());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof AdaptTemplatedTestStruct))
      return false;
    AdaptTemplatedTestStruct that = (AdaptTemplatedTestStruct)_that;

    if (!TBaseHelper.equalsNobinary(this.adaptedBool, that.adaptedBool)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.adaptedByte, that.adaptedByte)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.adaptedShort, that.adaptedShort)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.adaptedInteger, that.adaptedInteger)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.adaptedLong, that.adaptedLong)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.adaptedDouble, that.adaptedDouble)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAdaptedString(), that.isSetAdaptedString(), this.adaptedString, that.adaptedString)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAdaptedList(), that.isSetAdaptedList(), this.adaptedList, that.adaptedList)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAdaptedSet(), that.isSetAdaptedSet(), this.adaptedSet, that.adaptedSet)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAdaptedMap(), that.isSetAdaptedMap(), this.adaptedMap, that.adaptedMap)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.adaptedBoolDefault, that.adaptedBoolDefault)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.adaptedByteDefault, that.adaptedByteDefault)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.adaptedShortDefault, that.adaptedShortDefault)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.adaptedIntegerDefault, that.adaptedIntegerDefault)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.adaptedLongDefault, that.adaptedLongDefault)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.adaptedDoubleDefault, that.adaptedDoubleDefault)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAdaptedStringDefault(), that.isSetAdaptedStringDefault(), this.adaptedStringDefault, that.adaptedStringDefault)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAdaptedEnum(), that.isSetAdaptedEnum(), this.adaptedEnum, that.adaptedEnum)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAdaptedListDefault(), that.isSetAdaptedListDefault(), this.adaptedListDefault, that.adaptedListDefault)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAdaptedSetDefault(), that.isSetAdaptedSetDefault(), this.adaptedSetDefault, that.adaptedSetDefault)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAdaptedMapDefault(), that.isSetAdaptedMapDefault(), this.adaptedMapDefault, that.adaptedMapDefault)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.doubleTypedefBool, that.doubleTypedefBool)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {adaptedBool, adaptedByte, adaptedShort, adaptedInteger, adaptedLong, adaptedDouble, adaptedString, adaptedList, adaptedSet, adaptedMap, adaptedBoolDefault, adaptedByteDefault, adaptedShortDefault, adaptedIntegerDefault, adaptedLongDefault, adaptedDoubleDefault, adaptedStringDefault, adaptedEnum, adaptedListDefault, adaptedSetDefault, adaptedMapDefault, doubleTypedefBool});
  }

  @Override
  public int compareTo(AdaptTemplatedTestStruct other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAdaptedBool()).compareTo(other.isSetAdaptedBool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedBool, other.adaptedBool);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedByte()).compareTo(other.isSetAdaptedByte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedByte, other.adaptedByte);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedShort()).compareTo(other.isSetAdaptedShort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedShort, other.adaptedShort);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedInteger()).compareTo(other.isSetAdaptedInteger());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedInteger, other.adaptedInteger);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedLong()).compareTo(other.isSetAdaptedLong());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedLong, other.adaptedLong);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedDouble()).compareTo(other.isSetAdaptedDouble());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedDouble, other.adaptedDouble);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedString()).compareTo(other.isSetAdaptedString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedString, other.adaptedString);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedList()).compareTo(other.isSetAdaptedList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedList, other.adaptedList);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedSet()).compareTo(other.isSetAdaptedSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedSet, other.adaptedSet);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedMap()).compareTo(other.isSetAdaptedMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedMap, other.adaptedMap);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedBoolDefault()).compareTo(other.isSetAdaptedBoolDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedBoolDefault, other.adaptedBoolDefault);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedByteDefault()).compareTo(other.isSetAdaptedByteDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedByteDefault, other.adaptedByteDefault);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedShortDefault()).compareTo(other.isSetAdaptedShortDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedShortDefault, other.adaptedShortDefault);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedIntegerDefault()).compareTo(other.isSetAdaptedIntegerDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedIntegerDefault, other.adaptedIntegerDefault);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedLongDefault()).compareTo(other.isSetAdaptedLongDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedLongDefault, other.adaptedLongDefault);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedDoubleDefault()).compareTo(other.isSetAdaptedDoubleDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedDoubleDefault, other.adaptedDoubleDefault);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedStringDefault()).compareTo(other.isSetAdaptedStringDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedStringDefault, other.adaptedStringDefault);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedEnum()).compareTo(other.isSetAdaptedEnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedEnum, other.adaptedEnum);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedListDefault()).compareTo(other.isSetAdaptedListDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedListDefault, other.adaptedListDefault);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedSetDefault()).compareTo(other.isSetAdaptedSetDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedSetDefault, other.adaptedSetDefault);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAdaptedMapDefault()).compareTo(other.isSetAdaptedMapDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(adaptedMapDefault, other.adaptedMapDefault);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDoubleTypedefBool()).compareTo(other.isSetDoubleTypedefBool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(doubleTypedefBool, other.doubleTypedefBool);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case ADAPTEDBOOL:
          if (__field.type == TType.BOOL) {
            this.adaptedBool = iprot.readBool();
            setAdaptedBoolIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDBYTE:
          if (__field.type == TType.BYTE) {
            this.adaptedByte = iprot.readByte();
            setAdaptedByteIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDSHORT:
          if (__field.type == TType.I16) {
            this.adaptedShort = iprot.readI16();
            setAdaptedShortIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDINTEGER:
          if (__field.type == TType.I32) {
            this.adaptedInteger = iprot.readI32();
            setAdaptedIntegerIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDLONG:
          if (__field.type == TType.I64) {
            this.adaptedLong = iprot.readI64();
            setAdaptedLongIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDDOUBLE:
          if (__field.type == TType.DOUBLE) {
            this.adaptedDouble = iprot.readDouble();
            setAdaptedDoubleIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDSTRING:
          if (__field.type == TType.STRING) {
            this.adaptedString = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDLIST:
          if (__field.type == TType.LIST) {
            {
              TList _list58 = iprot.readListBegin();
              this.adaptedList = new ArrayList<Long>(Math.max(0, _list58.size));
              for (int _i59 = 0; 
                   (_list58.size < 0) ? iprot.peekList() : (_i59 < _list58.size); 
                   ++_i59)
              {
                long _elem60;
                _elem60 = iprot.readI64();
                this.adaptedList.add(_elem60);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDSET:
          if (__field.type == TType.SET) {
            {
              TSet _set61 = iprot.readSetBegin();
              this.adaptedSet = new HashSet<Long>(Math.max(0, 2*_set61.size));
              for (int _i62 = 0; 
                   (_set61.size < 0) ? iprot.peekSet() : (_i62 < _set61.size); 
                   ++_i62)
              {
                long _elem63;
                _elem63 = iprot.readI64();
                this.adaptedSet.add(_elem63);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDMAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map64 = iprot.readMapBegin();
              this.adaptedMap = new HashMap<Long,Long>(Math.max(0, 2*_map64.size));
              for (int _i65 = 0; 
                   (_map64.size < 0) ? iprot.peekMap() : (_i65 < _map64.size); 
                   ++_i65)
              {
                long _key66;
                long _val67;
                _key66 = iprot.readI64();
                _val67 = iprot.readI64();
                this.adaptedMap.put(_key66, _val67);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDBOOLDEFAULT:
          if (__field.type == TType.BOOL) {
            this.adaptedBoolDefault = iprot.readBool();
            setAdaptedBoolDefaultIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDBYTEDEFAULT:
          if (__field.type == TType.BYTE) {
            this.adaptedByteDefault = iprot.readByte();
            setAdaptedByteDefaultIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDSHORTDEFAULT:
          if (__field.type == TType.I16) {
            this.adaptedShortDefault = iprot.readI16();
            setAdaptedShortDefaultIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDINTEGERDEFAULT:
          if (__field.type == TType.I32) {
            this.adaptedIntegerDefault = iprot.readI32();
            setAdaptedIntegerDefaultIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDLONGDEFAULT:
          if (__field.type == TType.I64) {
            this.adaptedLongDefault = iprot.readI64();
            setAdaptedLongDefaultIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDDOUBLEDEFAULT:
          if (__field.type == TType.DOUBLE) {
            this.adaptedDoubleDefault = iprot.readDouble();
            setAdaptedDoubleDefaultIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDSTRINGDEFAULT:
          if (__field.type == TType.STRING) {
            this.adaptedStringDefault = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDENUM:
          if (__field.type == TType.I32) {
            this.adaptedEnum = ThriftAdaptedEnum.findByValue(iprot.readI32());
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDLISTDEFAULT:
          if (__field.type == TType.LIST) {
            {
              TList _list68 = iprot.readListBegin();
              this.adaptedListDefault = new ArrayList<Long>(Math.max(0, _list68.size));
              for (int _i69 = 0; 
                   (_list68.size < 0) ? iprot.peekList() : (_i69 < _list68.size); 
                   ++_i69)
              {
                long _elem70;
                _elem70 = iprot.readI64();
                this.adaptedListDefault.add(_elem70);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDSETDEFAULT:
          if (__field.type == TType.SET) {
            {
              TSet _set71 = iprot.readSetBegin();
              this.adaptedSetDefault = new HashSet<Long>(Math.max(0, 2*_set71.size));
              for (int _i72 = 0; 
                   (_set71.size < 0) ? iprot.peekSet() : (_i72 < _set71.size); 
                   ++_i72)
              {
                long _elem73;
                _elem73 = iprot.readI64();
                this.adaptedSetDefault.add(_elem73);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDMAPDEFAULT:
          if (__field.type == TType.MAP) {
            {
              TMap _map74 = iprot.readMapBegin();
              this.adaptedMapDefault = new HashMap<Long,Long>(Math.max(0, 2*_map74.size));
              for (int _i75 = 0; 
                   (_map74.size < 0) ? iprot.peekMap() : (_i75 < _map74.size); 
                   ++_i75)
              {
                long _key76;
                long _val77;
                _key76 = iprot.readI64();
                _val77 = iprot.readI64();
                this.adaptedMapDefault.put(_key76, _val77);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case DOUBLETYPEDEFBOOL:
          if (__field.type == TType.BOOL) {
            this.doubleTypedefBool = iprot.readBool();
            setDoubleTypedefBoolIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ADAPTED_BOOL_FIELD_DESC);
    oprot.writeBool(this.adaptedBool);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ADAPTED_BYTE_FIELD_DESC);
    oprot.writeByte(this.adaptedByte);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ADAPTED_SHORT_FIELD_DESC);
    oprot.writeI16(this.adaptedShort);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ADAPTED_INTEGER_FIELD_DESC);
    oprot.writeI32(this.adaptedInteger);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ADAPTED_LONG_FIELD_DESC);
    oprot.writeI64(this.adaptedLong);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ADAPTED_DOUBLE_FIELD_DESC);
    oprot.writeDouble(this.adaptedDouble);
    oprot.writeFieldEnd();
    if (this.adaptedString != null) {
      oprot.writeFieldBegin(ADAPTED_STRING_FIELD_DESC);
      oprot.writeString(this.adaptedString);
      oprot.writeFieldEnd();
    }
    if (this.adaptedList != null) {
      oprot.writeFieldBegin(ADAPTED_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I64, this.adaptedList.size()));
        for (long _iter78 : this.adaptedList)        {
          oprot.writeI64(_iter78);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.adaptedSet != null) {
      oprot.writeFieldBegin(ADAPTED_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I64, this.adaptedSet.size()));
        for (long _iter79 : this.adaptedSet)        {
          oprot.writeI64(_iter79);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.adaptedMap != null) {
      oprot.writeFieldBegin(ADAPTED_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I64, TType.I64, this.adaptedMap.size()));
        for (Map.Entry<Long, Long> _iter80 : this.adaptedMap.entrySet())        {
          oprot.writeI64(_iter80.getKey());
          oprot.writeI64(_iter80.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ADAPTED_BOOL_DEFAULT_FIELD_DESC);
    oprot.writeBool(this.adaptedBoolDefault);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ADAPTED_BYTE_DEFAULT_FIELD_DESC);
    oprot.writeByte(this.adaptedByteDefault);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ADAPTED_SHORT_DEFAULT_FIELD_DESC);
    oprot.writeI16(this.adaptedShortDefault);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ADAPTED_INTEGER_DEFAULT_FIELD_DESC);
    oprot.writeI32(this.adaptedIntegerDefault);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ADAPTED_LONG_DEFAULT_FIELD_DESC);
    oprot.writeI64(this.adaptedLongDefault);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ADAPTED_DOUBLE_DEFAULT_FIELD_DESC);
    oprot.writeDouble(this.adaptedDoubleDefault);
    oprot.writeFieldEnd();
    if (this.adaptedStringDefault != null) {
      oprot.writeFieldBegin(ADAPTED_STRING_DEFAULT_FIELD_DESC);
      oprot.writeString(this.adaptedStringDefault);
      oprot.writeFieldEnd();
    }
    if (this.adaptedEnum != null) {
      oprot.writeFieldBegin(ADAPTED_ENUM_FIELD_DESC);
      oprot.writeI32(this.adaptedEnum == null ? 0 : this.adaptedEnum.getValue());
      oprot.writeFieldEnd();
    }
    if (this.adaptedListDefault != null) {
      oprot.writeFieldBegin(ADAPTED_LIST_DEFAULT_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I64, this.adaptedListDefault.size()));
        for (long _iter81 : this.adaptedListDefault)        {
          oprot.writeI64(_iter81);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.adaptedSetDefault != null) {
      oprot.writeFieldBegin(ADAPTED_SET_DEFAULT_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I64, this.adaptedSetDefault.size()));
        for (long _iter82 : this.adaptedSetDefault)        {
          oprot.writeI64(_iter82);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.adaptedMapDefault != null) {
      oprot.writeFieldBegin(ADAPTED_MAP_DEFAULT_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I64, TType.I64, this.adaptedMapDefault.size()));
        for (Map.Entry<Long, Long> _iter83 : this.adaptedMapDefault.entrySet())        {
          oprot.writeI64(_iter83.getKey());
          oprot.writeI64(_iter83.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(DOUBLE_TYPEDEF_BOOL_FIELD_DESC);
    oprot.writeBool(this.doubleTypedefBool);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("AdaptTemplatedTestStruct");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("adaptedBool");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isAdaptedBool(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedByte");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getAdaptedByte(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedShort");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getAdaptedShort(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedInteger");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getAdaptedInteger(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedLong");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getAdaptedLong(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedDouble");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getAdaptedDouble(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedString");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getAdaptedString() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getAdaptedString(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedList");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getAdaptedList() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getAdaptedList(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedSet");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getAdaptedSet() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getAdaptedSet(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedMap");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getAdaptedMap() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getAdaptedMap(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedBoolDefault");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isAdaptedBoolDefault(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedByteDefault");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getAdaptedByteDefault(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedShortDefault");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getAdaptedShortDefault(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedIntegerDefault");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getAdaptedIntegerDefault(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedLongDefault");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getAdaptedLongDefault(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedDoubleDefault");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getAdaptedDoubleDefault(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedStringDefault");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getAdaptedStringDefault() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getAdaptedStringDefault(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedEnum");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getAdaptedEnum() == null) {
      sb.append("null");
    } else {
      String adaptedEnum_name = this.getAdaptedEnum() == null ? "null" : this.getAdaptedEnum().name();
      if (adaptedEnum_name != null) {
        sb.append(adaptedEnum_name);
        sb.append(" (");
      }
      sb.append(this.getAdaptedEnum());
      if (adaptedEnum_name != null) {
        sb.append(")");
      }
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedListDefault");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getAdaptedListDefault() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getAdaptedListDefault(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedSetDefault");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getAdaptedSetDefault() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getAdaptedSetDefault(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("adaptedMapDefault");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getAdaptedMapDefault() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getAdaptedMapDefault(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("doubleTypedefBool");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isDoubleTypedefBool(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

