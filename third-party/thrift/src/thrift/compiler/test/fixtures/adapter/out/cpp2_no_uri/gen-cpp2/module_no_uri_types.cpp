/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/adapter/src/module_no_uri.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/adapter/gen-cpp2/module_no_uri_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/adapter/gen-cpp2/module_no_uri_data.h"
[[maybe_unused]] static constexpr std::string_view kModuleName = "module_no_uri";



namespace apache { namespace thrift {

folly::Range<::cpp2::RefUnion::Type const*> const TEnumTraits<::cpp2::RefUnion::Type>::values = folly::range(TEnumDataStorage<::cpp2::RefUnion::Type>::values);
folly::Range<std::string_view const*> const TEnumTraits<::cpp2::RefUnion::Type>::names = folly::range(TEnumDataStorage<::cpp2::RefUnion::Type>::names);

bool TEnumTraits<::cpp2::RefUnion::Type>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::cpp2::RefUnion::Type>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace cpp2 {

std::string_view RefUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RefUnion>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view RefUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<RefUnion>::name;
}

void RefUnion::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    case Type::field1:
      ::std::destroy_at(::std::addressof(value_.field1));
      break;
    default:
      assert(false);
      break;
  }
}

void RefUnion::__fbthrift_clear() {
  __fbthrift_destruct();
  fbthrift_type_ = folly::to_underlying(Type::__EMPTY__);
}

  RefUnion::~RefUnion() {
    __fbthrift_destruct();
  }

bool RefUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  RefUnion::RefUnion(const RefUnion& rhs)
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      case Type::field1:
        set_field1(*rhs.value_.field1);
        break;
      default:
        assert(false);
    }
  }

    RefUnion&RefUnion::operator=(const RefUnion& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      case Type::field1:
        set_field1(*rhs.value_.field1);
        break;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }


bool RefUnion::operator==(const RefUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool RefUnion::operator<([[maybe_unused]] const RefUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionLessThan{}(*this, rhs);
}

void swap(RefUnion& a, RefUnion& b) {
  RefUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}


} // namespace cpp2

namespace cpp2 { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
  ::apache::thrift::adapt_detail::validateFieldAdapter<::my::Adapter1, 1, ::std::string, ::cpp2::RefUnion>();
}
}} // namespace cpp2
namespace apache::thrift::detail::annotation {
}
