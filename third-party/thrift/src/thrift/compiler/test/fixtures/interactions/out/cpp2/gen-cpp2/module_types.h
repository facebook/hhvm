/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/interactions/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>
#include "thrift/compiler/test/fixtures/interactions/gen-cpp2/shared_types.h"

namespace apache::thrift {
namespace ident {
struct message;
struct sessionId;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sessionId
#define APACHE_THRIFT_ACCESSOR_sessionId
APACHE_THRIFT_DEFINE_ACCESSOR(sessionId);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class CustomException;
class ShouldBeBoxed;
} // namespace cpp2
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "thrift/compiler/test/fixtures/interactions/src/module.thrift", "name": "CustomException", "kind": "exception" } */
class FOLLY_EXPORT CustomException : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::message
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = CustomException;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  CustomException();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CustomException(apache::thrift::FragileConstructor, ::std::string message__arg);

  CustomException(CustomException&&) noexcept;

  CustomException(const CustomException& src);


  CustomException& operator=(CustomException&&) noexcept;
  CustomException& operator=(const CustomException& src);

  ~CustomException() override;

 private:
  ::std::string __fbthrift_field_message;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const CustomException&) const;
  bool operator<(const CustomException&) const;

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> message_ref() const& {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> message_ref() & {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> message_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_message), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> message() const& {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> message() & {
    return {this->__fbthrift_field_message, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> message() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_message), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "message" } */
  [[deprecated("Use `FOO.message().value()` instead of `FOO.get_message()`")]]
  const ::std::string& get_message() const& {
    return __fbthrift_field_message;
  }

  /** Glean { "field": "message" } */
  [[deprecated("Use `FOO.message().value()` instead of `FOO.get_message()`")]]
  ::std::string get_message() && {
    return static_cast<::std::string&&>(__fbthrift_field_message);
  }

  /** Glean { "field": "message" } */
  template <typename T_CustomException_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.message() = BAR` instead of `FOO.set_message(BAR)`")]]
  ::std::string& set_message(T_CustomException_message_struct_setter&& message_) {
    message_ref() = std::forward<T_CustomException_message_struct_setter>(message_);
    return __fbthrift_field_message;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2::CustomException";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CustomException>;
  friend void swap(CustomException& a, CustomException& b);
};

template <class Protocol_>
unsigned long CustomException::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/interactions/src/module.thrift", "name": "ShouldBeBoxed", "kind": "struct" } */
class ShouldBeBoxed final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::sessionId
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ShouldBeBoxed;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  ShouldBeBoxed();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ShouldBeBoxed(apache::thrift::FragileConstructor, ::std::string sessionId__arg);

  ShouldBeBoxed(ShouldBeBoxed&&) noexcept;

  ShouldBeBoxed(const ShouldBeBoxed& src);


  ShouldBeBoxed& operator=(ShouldBeBoxed&&) noexcept;
  ShouldBeBoxed& operator=(const ShouldBeBoxed& src);

  ~ShouldBeBoxed();

 private:
  ::std::string __fbthrift_field_sessionId;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ShouldBeBoxed&) const;
  bool operator<(const ShouldBeBoxed&) const;

  /** Glean { "field": "sessionId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sessionId_ref() const& {
    return {this->__fbthrift_field_sessionId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sessionId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sessionId_ref() & {
    return {this->__fbthrift_field_sessionId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sessionId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sessionId_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sessionId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sessionId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> sessionId() const& {
    return {this->__fbthrift_field_sessionId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sessionId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> sessionId() & {
    return {this->__fbthrift_field_sessionId, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sessionId" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> sessionId() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_sessionId), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "sessionId" } */
  [[deprecated("Use `FOO.sessionId().value()` instead of `FOO.get_sessionId()`")]]
  const ::std::string& get_sessionId() const& {
    return __fbthrift_field_sessionId;
  }

  /** Glean { "field": "sessionId" } */
  [[deprecated("Use `FOO.sessionId().value()` instead of `FOO.get_sessionId()`")]]
  ::std::string get_sessionId() && {
    return static_cast<::std::string&&>(__fbthrift_field_sessionId);
  }

  /** Glean { "field": "sessionId" } */
  template <typename T_ShouldBeBoxed_sessionId_struct_setter = ::std::string>
  [[deprecated("Use `FOO.sessionId() = BAR` instead of `FOO.set_sessionId(BAR)`")]]
  ::std::string& set_sessionId(T_ShouldBeBoxed_sessionId_struct_setter&& sessionId_) {
    sessionId_ref() = std::forward<T_ShouldBeBoxed_sessionId_struct_setter>(sessionId_);
    return __fbthrift_field_sessionId;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ShouldBeBoxed>;
  friend void swap(ShouldBeBoxed& a, ShouldBeBoxed& b);
};

template <class Protocol_>
unsigned long ShouldBeBoxed::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace cpp2

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::cpp2::CustomException, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 5169293820847068718;
  static constexpr ::std::string_view definitionKey = {"\x93\x11\x69\xd0\x56\x09\x8a\x12\xeb\xee\x82\x2e\x41\x61\x05\x94", 16};
};
template <> struct TSchemaAssociation<::cpp2::ShouldBeBoxed, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 5169293820847068718;
  static constexpr ::std::string_view definitionKey = {"\x37\x4c\x5d\x7f\xeb\xbe\x5a\x2b\x2f\xdf\xe1\x4c\x51\x5e\x18\xd1", 16};
};
} // namespace apache::thrift::detail
