// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"addcslashes", T(String), S(0), "str", T(String), NULL, NULL, S(0), "charlist", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.addcslashes.php )\n *\n * Returns a string with backslashes before characters that are listed in\n * charlist parameter.\n *\n * @str        string  The string to be escaped.\n * @charlist   string  A list of characters to be escaped. If charlist\n *                     contains characters \\n, \\r etc., they are converted\n *                     in C-like style, while other non-alphanumeric\n *                     characters with ASCII codes lower than 32 and higher\n *                     than 126 converted to octal representation.\n *\n *                     When you define a sequence of characters in the\n *                     charlist argument make sure that you know what\n *                     characters come between the characters that you set\n *                     as the start and end of the range.\n *\n *                     Also, if the first character in a range has a higher\n *                     ASCII value than the second character in the range,\n *                     no range will be constructed. Only the start, end\n *                     and period characters will be escaped. Use the ord()\n *                     function to find the ASCII value for a character.\n *\n *\n *\n *                     Be careful if you choose to escape characters 0, a,\n *                     b, f, n, r, t and v. They will be converted to \\0,\n *                     \\a, \\b, \\f, \\n, \\r, \\t and \\v. In PHP \\0 (NULL), \\r\n *                     (carriage return), \\n (newline), \\f (form feed), \\v\n *                     (vertical tab) and \\t (tab) are predefined escape\n *                     sequences, while in C all of these are predefined\n *                     escape sequences.\n *\n * @return     string  Returns the escaped string.\n */", 
"stripcslashes", T(String), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.stripcslashes.php )\n *\n * Returns a string with backslashes stripped off. Recognizes C-like \\n, \\r\n * ..., octal and hexadecimal representation.\n *\n * @str        string  The string to be unescaped.\n *\n * @return     string  Returns the unescaped string.\n */", 
"addslashes", T(String), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.addslashes.php )\n *\n * Returns a string with backslashes before characters that need to be\n * quoted in database queries etc. These characters are single quote ('),\n * double quote (\"), backslash (\\) and NUL (the NULL byte).\n *\n * An example use of addslashes() is when you're entering data into a\n * database. For example, to insert the name O'reilly into a database, you\n * will need to escape it. It's highly recommended to use DBMS specific\n * escape function (e.g. mysqli_real_escape_string() for MySQL or\n * pg_escape_string() for PostgreSQL), but if the DBMS you're using does't\n * have an escape function and the DBMS uses \\ to escape special chars, you\n * can use this function. This would only be to get the data into the\n * database, the extra \\ will not be inserted. Having the PHP directive\n * magic_quotes_sybase set to on will mean ' is instead escaped with\n * another '.\n *\n * The PHP directive magic_quotes_gpc is on by default, and it essentially\n * runs addslashes() on all GET, POST, and COOKIE data. Do not use\n * addslashes() on strings that have already been escaped with\n * magic_quotes_gpc as you'll then do double escaping. The function\n * get_magic_quotes_gpc() may come in handy for checking this.\n *\n * @str        string  The string to be escaped.\n *\n * @return     string  Returns the escaped string.\n */", 
"stripslashes", T(String), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.stripslashes.php )\n *\n * Un-quotes a quoted string.\n *\n * If magic_quotes_sybase is on, no backslashes are stripped off but two\n * apostrophes are replaced by one instead.\n *\n * An example use of stripslashes() is when the PHP directive\n * magic_quotes_gpc is on (it's on by default), and you aren't inserting\n * this data into a place (such as a database) that requires escaping. For\n * example, if you're simply outputting data straight from an HTML form.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns a string with backslashes stripped off. (\\'\n *                     becomes ' and so on.) Double backslashes (\\\\) are\n *                     made into a single backslash (\\).\n */", 
"bin2hex", T(String), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bin2hex.php )\n *\n * Returns an ASCII string containing the hexadecimal representation of\n * str. The conversion is done byte-wise with the high-nibble first.\n *\n * @str        string  A character.\n *\n * @return     string  Returns the hexadecimal representation of the given\n *                     string.\n */", 
"hex2bin", T(String), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hex2bin.php )\n *\n * Returns an ASCII string containing the binary representation of\n * hexidecimal str.\n *\n * @str        string  A character.\n *\n * @return     string  Returns the binary representation of the given\n *                     hexidecimal string.\n */", 
"nl2br", T(String), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.nl2br.php )\n *\n * Returns string with '<br />' or '<br>' inserted before all newlines.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the altered string.\n */", 
"quotemeta", T(String), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.quotemeta.php )\n *\n * Returns a version of str with a backslash character (\\) before every\n * character that is among these: . \\ + * \? [ ^ ] ( $ )\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the string with meta characters quoted.\n */", 
"str_shuffle", T(String), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.str-shuffle.php )\n *\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the shuffled string.\n */", 
"strrev", T(String), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.strrev.php )\n *\n * Returns string, reversed.\n *\n * @str        string  The string to be reversed.\n *\n * @return     string  Returns the reversed string.\n */", 
"strtolower", T(String), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.strtolower.php )\n *\n * Returns string with all alphabetic characters converted to lowercase.\n *\n * Note that 'alphabetic' is determined by the current locale. This means\n * that in i.e. the default \"C\" locale, characters such as umlaut-A (\303\204)\n * will not be converted.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the lowercased string.\n */", 
"lcfirst", T(String), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.lcfirst.php )\n *\n * Returns a string with the first character of str lowercased, if that\n * character is alphabetic.\n *\n * Note that 'alphabetic' is determined by the current locale. For\n * instance,\n *  in the default \"C\" locale characters such as umlaut-a (\303\244) will not be\n * converted.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the resulting string.\n */", 
"strtoupper", T(String), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.strtoupper.php )\n *\n * Returns string with all alphabetic characters converted to uppercase.\n *\n * Note that 'alphabetic' is determined by the current locale. For\n * instance, in the default \"C\" locale characters such as umlaut-a (\303\244)\n * will not be converted.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the uppercased string.\n */", 
"ucfirst", T(String), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ucfirst.php )\n *\n * Returns a string with the first character of str capitalized, if that\n * character is alphabetic.\n *\n * Note that 'alphabetic' is determined by the current locale. For\n * instance, in the default \"C\" locale characters such as umlaut-a (\303\244)\n * will not be converted.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the resulting string.\n */", 
"ucwords", T(String), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ucwords.php )\n *\n * Returns a string with the first character of each word in str\n * capitalized, if that character is alphabetic.\n *\n * The definition of a word is any string of characters that is immediately\n * after a whitespace (These are: space, form-feed, newline, carriage\n * return, horizontal tab, and vertical tab).\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the modified string.\n */", 
"strip_tags", T(String), S(0), "str", T(String), NULL, NULL, S(0), "allowable_tags", T(String), "s:0:\"\";", "\"\"", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.strip-tags.php )\n *\n * This function tries to return a string with all NUL bytes, HTML and PHP\n * tags stripped from a given str. It uses the same tag stripping state\n * machine as the fgetss() function.\n *\n * @str        string  The input string.\n * @allowable_tags\n *             string  You can use the optional second parameter to specify\n *                     tags which should not be stripped.\n *\n *                     HTML comments and PHP tags are also stripped. This\n *                     is hardcoded and can not be changed with\n *                     allowable_tags.\n *\n * @return     string  Returns the stripped string.\n */", 
"trim", T(String), S(0), "str", T(String), NULL, NULL, S(0), "charlist", T(String), "s:6:\" \n\r\t\v\000\";", "HPHP_TRIM_CHARLIST", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.trim.php )\n *\n * This function returns a string with whitespace stripped from the\n * beginning and end of str. Without the second parameter, trim() will\n * strip these characters: \" \" (ASCII 32 (0x20)), an ordinary space. \"\\t\"\n * (ASCII 9 (0x09)), a tab. \"\\n\" (ASCII 10 (0x0A)), a new line (line feed).\n * \"\\r\" (ASCII 13 (0x0D)), a carriage return. \"\\0\" (ASCII 0 (0x00)), the\n * NUL-byte. \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab.\n *\n * @str        string  The string that will be trimmed.\n * @charlist   string  Optionally, the stripped characters can also be\n *                     specified using the charlist parameter. Simply list\n *                     all characters that you want to be stripped. With ..\n *                     you can specify a range of characters.\n *\n * @return     string  The trimmed string.\n */", 
"ltrim", T(String), S(0), "str", T(String), NULL, NULL, S(0), "charlist", T(String), "s:6:\" \n\r\t\v\000\";", "HPHP_TRIM_CHARLIST", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ltrim.php )\n *\n * Strip whitespace (or other characters) from the beginning of a string.\n *\n * @str        string  The input string.\n * @charlist   string  You can also specify the characters you want to\n *                     strip, by means of the charlist parameter. Simply\n *                     list all characters that you want to be stripped.\n *                     With .. you can specify a range of characters.\n *\n * @return     string  This function returns a string with whitespace\n *                     stripped from the beginning of str. Without the\n *                     second parameter, ltrim() will strip these\n *                     characters: \" \" (ASCII 32 (0x20)), an ordinary\n *                     space. \"\\t\" (ASCII 9 (0x09)), a tab. \"\\n\" (ASCII 10\n *                     (0x0A)), a new line (line feed). \"\\r\" (ASCII 13\n *                     (0x0D)), a carriage return. \"\\0\" (ASCII 0 (0x00)),\n *                     the NUL-byte. \"\\x0B\" (ASCII 11 (0x0B)), a vertical\n *                     tab.\n */", 
"rtrim", T(String), S(0), "str", T(String), NULL, NULL, S(0), "charlist", T(String), "s:6:\" \n\r\t\v\000\";", "HPHP_TRIM_CHARLIST", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.rtrim.php )\n *\n * This function returns a string with whitespace stripped from the end of\n * str.\n *\n * Without the second parameter, rtrim() will strip these characters: \" \"\n * (ASCII 32 (0x20)), an ordinary space. \"\\t\" (ASCII 9 (0x09)), a tab. \"\\n\"\n * (ASCII 10 (0x0A)), a new line (line feed). \"\\r\" (ASCII 13 (0x0D)), a\n * carriage return. \"\\0\" (ASCII 0 (0x00)), the NUL-byte. \"\\x0B\" (ASCII 11\n * (0x0B)), a vertical tab.\n *\n * @str        string  The input string.\n * @charlist   string  You can also specify the characters you want to\n *                     strip, by means of the charlist parameter. Simply\n *                     list all characters that you want to be stripped.\n *                     With .. you can specify a range of characters.\n *\n * @return     string  Returns the modified string.\n */", 
"chop", T(String), S(0), "str", T(String), NULL, NULL, S(0), "charlist", T(String), "s:6:\" \n\r\t\v\000\";", "HPHP_TRIM_CHARLIST", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.chop.php )\n *\n *\n * @str        string\n * @charlist   string\n *\n * @return     string\n */", 
"explode", T(Variant), S(0), "delimiter", T(String), NULL, NULL, S(0), "str", T(String), NULL, NULL, S(0), "limit", T(Int32), "i:2147483647;", "0x7FFFFFFF", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.explode.php )\n *\n * Returns an array of strings, each of which is a substring of string\n * formed by splitting it on boundaries formed by the string delimiter.\n * Although implode() can, for historical reasons, accept its parameters in\n * either order, explode() cannot. You must ensure that the delimiter\n * argument comes before the string argument.\n *\n * @delimiter  string  The boundary string.\n * @str        string  The input string.\n * @limit      int     If limit is set and positive, the returned array\n *                     will contain a maximum of limit elements with the\n *                     last element containing the rest of string.\n *\n *                     If the limit parameter is negative, all components\n *                     except the last -limit are returned.\n *\n *                     If the limit parameter is zero, then this is treated\n *                     as 1.\n *\n * @return     mixed   Returns an array of strings created by splitting the\n *                     string parameter on boundaries formed by the\n *                     delimiter.\n *\n *                     If delimiter is an empty string (\"\"), explode() will\n *                     return FALSE. If delimiter contains a value that is\n *                     not contained in string and a negative limit is\n *                     used, then an empty arraywill be returned, otherwise\n *                     an array containing string will be returned.\n */", 
"implode", T(String), S(0), "arg1", T(Variant), NULL, NULL, S(0), "arg2", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.implode.php )\n *\n * Join array elements with a glue string.\n *\n * implode() can, for historical reasons, accept its parameters in either\n * order. For consistency with explode(), however, it may be less confusing\n * to use the documented order of arguments.\n *\n * @arg1       mixed   Defaults to an empty string. This is not the\n *                     preferred usage of implode() as glue would be the\n *                     second parameter and thus, the bad prototype would\n *                     be used.\n * @arg2       mixed   The array of strings to implode.\n *\n * @return     string  Returns a string containing a string representation\n *                     of all the array elements in the same order, with\n *                     the glue string between each element.\n */", 
"join", T(String), S(0), "glue", T(Variant), NULL, NULL, S(0), "pieces", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.join.php )\n *\n *\n * @glue       mixed\n * @pieces     mixed\n *\n * @return     string\n */", 
"str_split", T(Variant), S(0), "str", T(String), NULL, NULL, S(0), "split_length", T(Int32), "i:1;", "1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.str-split.php )\n *\n * Converts a string to an array.\n *\n * @str        string  The input string.\n * @split_length\n *             int     Maximum length of the chunk.\n *\n * @return     mixed   If the optional split_length parameter is specified,\n *                     the returned array will be broken down into chunks\n *                     with each being split_length in length, otherwise\n *                     each chunk will be one character in length.\n *\n *                     FALSE is returned if split_length is less than 1. If\n *                     the split_length length exceeds the length of\n *                     string, the entire string is returned as the first\n *                     (and only) array element.\n */", 
"chunk_split", T(Variant), S(0), "body", T(String), NULL, NULL, S(0), "chunklen", T(Int32), "i:76;", "76", S(0), "end", T(String), "s:2:\"\r\n\";", "\"\\r\\n\"", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.chunk-split.php )\n *\n * Can be used to split a string into smaller chunks which is useful for\n * e.g. converting base64_encode() output to match RFC 2045 semantics. It\n * inserts end every chunklen characters.\n *\n * @body       string  The string to be chunked.\n * @chunklen   int     The chunk length.\n * @end        string  The line ending sequence.\n *\n * @return     mixed   Returns the chunked string.\n */", 
"strtok", T(Variant), S(0), "str", T(String), NULL, NULL, S(0), "token", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.strtok.php )\n *\n * strtok() splits a string (str) into smaller strings (tokens), with each\n * token being delimited by any character from token. That is, if you have\n * a string like \"This is an example string\" you could tokenize this string\n * into its individual words by using the space character as the token.\n *\n * Note that only the first call to strtok uses the string argument. Every\n * subsequent call to strtok only needs the token to use, as it keeps track\n * of where it is in the current string. To start over, or to tokenize a\n * new string you simply call strtok with the string argument again to\n * initialize it. Note that you may put multiple tokens in the token\n * parameter. The string will be tokenized when any one of the characters\n * in the argument are found.\n *\n * @str        string  The string being split up into smaller strings\n *                     (tokens).\n * @token      mixed   The delimiter used when splitting up str.\n *\n * @return     mixed   A string token.\n */", 
"str_replace", T(Variant), S(0), "search", T(Variant), NULL, NULL, S(0), "replace", T(Variant), NULL, NULL, S(0), "subject", T(Variant), NULL, NULL, S(0), "count", T(Variant), "N;", "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.str-replace.php )\n *\n * This function returns a string or an array with all occurrences of\n * search in subject replaced with the given replace value.\n *\n * If you don't need fancy replacing rules (like regular expressions), you\n * should always use this function instead of ereg_replace() or\n * preg_replace().\n * If search and replace are arrays, then str_replace() takes a value from\n * each array and uses them to do search and replace on subject. If replace\n * has fewer values than search, then an empty string is used for the rest\n * of replacement values. If search is an array and replace is a string,\n * then this replacement string is used for every value of search. The\n * converse would not make sense, though.\n *\n * If search or replace are arrays, their elements are processed first to\n * last.\n *\n * @search     mixed   The value being searched for, otherwise known as the\n *                     needle. An array may be used to designate multiple\n *                     needles.\n * @replace    mixed   The replacement value that replaces found search\n *                     values. An array may be used to designate multiple\n *                     replacements.\n * @subject    mixed   The string or array being searched and replaced on,\n *                     otherwise known as the haystack.\n *\n *                     If subject is an array, then the search and replace\n *                     is performed with every entry of subject, and the\n *                     return value is an array as well.\n * @count      mixed   If passed, this will hold the number of matched and\n *                     replaced needles.\n *\n * @return     mixed   This function returns a string or an array with the\n *                     replaced values.\n */", 
"str_ireplace", T(Variant), S(0), "search", T(Variant), NULL, NULL, S(0), "replace", T(Variant), NULL, NULL, S(0), "subject", T(Variant), NULL, NULL, S(0), "count", T(Variant), "N;", "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.str-ireplace.php )\n *\n * This function returns a string or an array with all occurrences of\n * search in subject (ignoring case) replaced with the given replace value.\n * If you don't need fancy replacing rules, you should generally use this\n * function instead of preg_replace() with the i modifier.\n * If search and replace are arrays, then str_ireplace() takes a value from\n * each array and uses them to do search and replace on subject. If replace\n * has fewer values than search, then an empty string is used for the rest\n * of replacement values. If search is an array and replace is a string,\n * then this replacement string is used for every value of search.\n *\n * @search     mixed   Every replacement with search array is performed on\n *                     the result of previous replacement.\n * @replace    mixed\n * @subject    mixed   If subject is an array, then the search and replace\n *                     is performed with every entry of subject, and the\n *                     return value is an array as well.\n * @count      mixed   The number of matched and replaced needles will be\n *                     returned in count which is passed by reference.\n *\n * @return     mixed   Returns a string or an array of replacements.\n */", 
"substr_replace", T(Variant), S(0), "str", T(Variant), NULL, NULL, S(0), "replacement", T(Variant), NULL, NULL, S(0), "start", T(Variant), NULL, NULL, S(0), "length", T(Variant), "i:2147483647;", "0x7FFFFFFF", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.substr-replace.php )\n *\n * substr_replace() replaces a copy of string delimited by the start and\n * (optionally) length parameters with the string given in replacement.\n *\n * @str        mixed   The input string.\n * @replacement\n *             mixed   The replacement string.\n * @start      mixed   If start is positive, the replacing will begin at\n *                     the start'th offset into string.\n *\n *                     If start is negative, the replacing will begin at\n *                     the start'th character from the end of string.\n * @length     mixed   If given and is positive, it represents the length\n *                     of the portion of string which is to be replaced. If\n *                     it is negative, it represents the number of\n *                     characters from the end of string at which to stop\n *                     replacing. If it is not given, then it will default\n *                     to strlen( string ); i.e. end the replacing at the\n *                     end of string. Of course, if length is zero then\n *                     this function will have the effect of inserting\n *                     replacement into string at the given start offset.\n *\n * @return     mixed   The result string is returned. If string is an array\n *                     then array is returned.\n */", 
"substr", T(Variant), S(0), "str", T(String), NULL, NULL, S(0), "start", T(Int32), NULL, NULL, S(0), "length", T(Int32), "i:2147483647;", "0x7FFFFFFF", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.substr.php )\n *\n * Returns the portion of string specified by the start and length\n * parameters.\n *\n * @str        string  The input string.\n * @start      int     If start is non-negative, the returned string will\n *                     start at the start'th position in string, counting\n *                     from zero. For instance, in the string 'abcdef', the\n *                     character at position 0 is 'a', the character at\n *                     position 2 is 'c', and so forth.\n *\n *                     If start is negative, the returned string will start\n *                     at the start'th character from the end of string.\n *\n *                     If string is less than or equal to start characters\n *                     long, FALSE will be returned.\n *\n *                     Example #1 Using a negative start\n * @length     int     If length is given and is positive, the string\n *                     returned will contain at most length characters\n *                     beginning from start (depending on the length of\n *                     string).\n *\n *                     If length is given and is negative, then that many\n *                     characters will be omitted from the end of string\n *                     (after the start position has been calculated when a\n *                     start is negative). If start denotes a position\n *                     beyond this truncation, an empty string will be\n *                     returned.\n *\n *                     If length is given and is 0, FALSE or NULL an empty\n *                     string will be returned.\n *\n *                     If length is omitted, the substring starting from\n *                     start until the end of the string will be returned.\n *                     Example #2 Using a negative length\n *\n * @return     mixed   Returns the extracted part of string or FALSE on\n *                     failure.\n */", 
"str_pad", T(String), S(0), "input", T(String), NULL, NULL, S(0), "pad_length", T(Int32), NULL, NULL, S(0), "pad_string", T(String), "s:1:\" \";", "\" \"", S(0), "pad_type", T(Int32), "i:1;", "STR_PAD_RIGHT", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.str-pad.php )\n *\n * This functions returns the input string padded on the left, the right,\n * or both sides to the specified padding length. If the optional argument\n * pad_string is not supplied, the input is padded with spaces, otherwise\n * it is padded with characters from pad_string up to the limit.\n *\n * @input      string  The input string.\n * @pad_length int     If the value of pad_length is negative, less than,\n *                     or equal to the length of the input string, no\n *                     padding takes place.\n * @pad_string string  The pad_string may be truncated if the required\n *                     number of padding characters can't be evenly divided\n *                     by the pad_string's length.\n * @pad_type   int     Optional argument pad_type can be STR_PAD_RIGHT,\n *                     STR_PAD_LEFT, or STR_PAD_BOTH. If pad_type is not\n *                     specified it is assumed to be STR_PAD_RIGHT.\n *\n * @return     string  Returns the padded string.\n */", 
"str_repeat", T(String), S(0), "input", T(String), NULL, NULL, S(0), "multiplier", T(Int32), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.str-repeat.php )\n *\n * Returns input repeated multiplier times.\n *\n * @input      string  The string to be repeated.\n * @multiplier int     Number of time the input string should be repeated.\n *\n *                     multiplier has to be greater than or equal to 0. If\n *                     the multiplier is set to 0, the function will return\n *                     an empty string.\n *\n * @return     string  Returns the repeated string.\n */", 
"wordwrap", T(Variant), S(0), "str", T(String), NULL, NULL, S(0), "width", T(Int32), "i:75;", "75", S(0), "wordbreak", T(String), "s:1:\"\n\";", "\"\\n\"", S(0), "cut", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.wordwrap.php )\n *\n * Wraps a string to a given number of characters using a string break\n * character.\n *\n * @str        string  The input string.\n * @width      int     The column width.\n * @wordbreak  string  The line is broken using the optional break\n *                     parameter.\n * @cut        bool    If the cut is set to TRUE, the string is always\n *                     wrapped at or before the specified width. So if you\n *                     have a word that is larger than the given width, it\n *                     is broken apart. (See second example).\n *\n * @return     mixed   Returns the given string wrapped at the specified\n *                     column.\n */", 
"html_entity_decode", T(String), S(0), "str", T(String), NULL, NULL, S(0), "quote_style", T(Int32), "i:2;", "ENT_COMPAT", S(0), "charset", T(String), "s:10:\"ISO-8859-1\";", "\"ISO-8859-1\"", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.html-entity-decode.php\n * )\n *\n * html_entity_decode() is the opposite of htmlentities() in that it\n * converts all HTML entities to their applicable characters from string.\n *\n * @str        string  The input string.\n * @quote_style\n *             int     The optional second quote_style parameter lets you\n *                     define what will be done with 'single' and \"double\"\n *                     quotes. It takes on one of three constants with the\n *                     default being ENT_COMPAT: Available quote_style\n *                     constants Constant Name Description ENT_COMPAT Will\n *                     convert double-quotes and leave single-quotes alone.\n *                     ENT_QUOTES Will convert both double and single\n *                     quotes. ENT_NOQUOTES Will leave both double and\n *                     single quotes unconverted.\n * @charset    string  The ISO-8859-1 character set is used as default for\n *                     the optional third charset. This defines the\n *                     character set used in conversion.\n *\n *                     Following character sets are supported in PHP 4.3.0\n *                     and later. Supported charsets Charset Aliases\n *                     Description ISO-8859-1 ISO8859-1 Western European,\n *                     Latin-1 ISO-8859-15 ISO8859-15 Western European,\n *                     Latin-9. Adds the Euro sign, French and Finnish\n *                     letters missing in Latin-1(ISO-8859-1). UTF-8 \240\n *                     ASCII compatible multi-byte 8-bit Unicode. cp866\n *                     ibm866, 866 DOS-specific Cyrillic charset. This\n *                     charset is supported in 4.3.2. cp1251 Windows-1251,\n *                     win-1251, 1251 Windows-specific Cyrillic charset.\n *                     This charset is supported in 4.3.2. cp1252\n *                     Windows-1252, 1252 Windows specific charset for\n *                     Western European. KOI8-R koi8-ru, koi8r Russian.\n *                     This charset is supported in 4.3.2. BIG5 950\n *                     Traditional Chinese, mainly used in Taiwan. GB2312\n *                     936 Simplified Chinese, national standard character\n *                     set. BIG5-HKSCS \240 Big5 with Hong Kong extensions,\n *                     Traditional Chinese. Shift_JIS SJIS, 932 Japanese\n *                     EUC-JP EUCJP Japanese Any other character sets are\n *                     not recognized and ISO-8859-1 will be used instead.\n *\n * @return     string  Returns the decoded string.\n */", 
"htmlentities", T(String), S(0), "str", T(String), NULL, NULL, S(0), "quote_style", T(Int32), "i:2;", "ENT_COMPAT", S(0), "charset", T(String), "s:10:\"ISO-8859-1\";", "\"ISO-8859-1\"", S(0), "double_encode", T(Boolean), "b:1;", "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.htmlentities.php )\n *\n * This function is identical to htmlspecialchars() in all ways, except\n * with htmlentities(), all characters which have HTML character entity\n * equivalents are translated into these entities.\n *\n * If you're wanting to decode instead (the reverse) you can use\n * html_entity_decode().\n *\n * @str        string  The input string.\n * @quote_style\n *             int     Like htmlspecialchars(), the optional second\n *                     quote_style parameter lets you define what will be\n *                     done with 'single' and \"double\" quotes. It takes on\n *                     one of three constants with the default being\n *                     ENT_COMPAT: Available quote_style constants Constant\n *                     Name Description ENT_COMPAT Will convert\n *                     double-quotes and leave single-quotes alone.\n *                     ENT_QUOTES Will convert both double and single\n *                     quotes. ENT_NOQUOTES Will leave both double and\n *                     single quotes unconverted.\n * @charset    string  Like htmlspecialchars(), it takes an optional third\n *                     argument charset which defines character set used in\n *                     conversion. Presently, the ISO-8859-1 character set\n *                     is used as the default.\n *\n *                     Following character sets are supported in PHP 4.3.0\n *                     and later. Supported charsets Charset Aliases\n *                     Description ISO-8859-1 ISO8859-1 Western European,\n *                     Latin-1 ISO-8859-15 ISO8859-15 Western European,\n *                     Latin-9. Adds the Euro sign, French and Finnish\n *                     letters missing in Latin-1(ISO-8859-1). UTF-8 \240\n *                     ASCII compatible multi-byte 8-bit Unicode. cp866\n *                     ibm866, 866 DOS-specific Cyrillic charset. This\n *                     charset is supported in 4.3.2. cp1251 Windows-1251,\n *                     win-1251, 1251 Windows-specific Cyrillic charset.\n *                     This charset is supported in 4.3.2. cp1252\n *                     Windows-1252, 1252 Windows specific charset for\n *                     Western European. KOI8-R koi8-ru, koi8r Russian.\n *                     This charset is supported in 4.3.2. BIG5 950\n *                     Traditional Chinese, mainly used in Taiwan. GB2312\n *                     936 Simplified Chinese, national standard character\n *                     set. BIG5-HKSCS \240 Big5 with Hong Kong extensions,\n *                     Traditional Chinese. Shift_JIS SJIS, 932 Japanese\n *                     EUC-JP EUCJP Japanese Any other character sets are\n *                     not recognized and ISO-8859-1 will be used instead.\n * @double_encode\n *             bool    When double_encode is turned off PHP will not encode\n *                     existing html entities. The default is to convert\n *                     everything.\n *\n * @return     string  Returns the encoded string.\n */", 
"htmlspecialchars_decode", T(String), S(0), "str", T(String), NULL, NULL, S(0), "quote_style", T(Int32), "i:2;", "ENT_COMPAT", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.htmlspecialchars-decode.php )\n *\n * This function is the opposite of htmlspecialchars(). It converts special\n * HTML entities back to characters.\n *\n * The converted entities are: &amp;, &quot; (when ENT_NOQUOTES is not\n * set), &#039; (when ENT_QUOTES is set), &lt; and &gt;.\n *\n * @str        string  The string to decode\n * @quote_style\n *             int     The quote style. One of the following constants:\n *                     quote_style constants Constant Name Description\n *                     ENT_COMPAT Will convert double-quotes and leave\n *                     single-quotes alone (default) ENT_QUOTES Will\n *                     convert both double and single quotes ENT_NOQUOTES\n *                     Will leave both double and single quotes unconverted\n *\n * @return     string  Returns the decoded string.\n */", 
"htmlspecialchars", T(String), S(0), "str", T(String), NULL, NULL, S(0), "quote_style", T(Int32), "i:2;", "ENT_COMPAT", S(0), "charset", T(String), "s:10:\"ISO-8859-1\";", "\"ISO-8859-1\"", S(0), "double_encode", T(Boolean), "b:1;", "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.htmlspecialchars.php )\n *\n * Certain characters have special significance in HTML, and should be\n * represented by HTML entities if they are to preserve their meanings.\n * This function returns a string with some of these conversions made; the\n * translations made are those most useful for everyday web programming. If\n * you require all HTML character entities to be translated, use\n * htmlentities() instead. This function is useful in preventing\n * user-supplied text from containing HTML markup, such as in a message\n * board or guest book application.\n *\n * The translations performed are: '&' (ampersand) becomes '&amp;' '\"'\n * (double quote) becomes '&quot;' when ENT_NOQUOTES is not set. '''\n * (single quote) becomes '&#039;' only when ENT_QUOTES is set. '<' (less\n * than) becomes '&lt;' '>' (greater than) becomes '&gt;'\n *\n * @str        string  The string being converted.\n * @quote_style\n *             int     The optional second argument, quote_style, tells the\n *                     function what to do with single and double quote\n *                     characters. The default mode, ENT_COMPAT, is the\n *                     backwards compatible mode which only translates the\n *                     double-quote character and leaves the single-quote\n *                     untranslated. If ENT_QUOTES is set, both single and\n *                     double quotes are translated and if ENT_NOQUOTES is\n *                     set neither single nor double quotes are translated.\n * @charset    string  Defines character set used in conversion. The\n *                     default character set is ISO-8859-1.\n *\n *                     For the purposes of this function, the charsets\n *                     ISO-8859-1, ISO-8859-15, UTF-8, cp866, cp1251,\n *                     cp1252, and KOI8-R are effectively equivalent, as\n *                     the characters affected by htmlspecialchars() occupy\n *                     the same positions in all of these charsets.\n *\n *                     Following character sets are supported in PHP 4.3.0\n *                     and later. Supported charsets Charset Aliases\n *                     Description ISO-8859-1 ISO8859-1 Western European,\n *                     Latin-1 ISO-8859-15 ISO8859-15 Western European,\n *                     Latin-9. Adds the Euro sign, French and Finnish\n *                     letters missing in Latin-1(ISO-8859-1). UTF-8 \240\n *                     ASCII compatible multi-byte 8-bit Unicode. cp866\n *                     ibm866, 866 DOS-specific Cyrillic charset. This\n *                     charset is supported in 4.3.2. cp1251 Windows-1251,\n *                     win-1251, 1251 Windows-specific Cyrillic charset.\n *                     This charset is supported in 4.3.2. cp1252\n *                     Windows-1252, 1252 Windows specific charset for\n *                     Western European. KOI8-R koi8-ru, koi8r Russian.\n *                     This charset is supported in 4.3.2. BIG5 950\n *                     Traditional Chinese, mainly used in Taiwan. GB2312\n *                     936 Simplified Chinese, national standard character\n *                     set. BIG5-HKSCS \240 Big5 with Hong Kong extensions,\n *                     Traditional Chinese. Shift_JIS SJIS, 932 Japanese\n *                     EUC-JP EUCJP Japanese Any other character sets are\n *                     not recognized and ISO-8859-1 will be used instead.\n * @double_encode\n *             bool    When double_encode is turned off PHP will not encode\n *                     existing html entities, the default is to convert\n *                     everything.\n *\n * @return     string  The converted string.\n */", 
"quoted_printable_encode", T(String), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.quoted-printable-encode.php )\n *\n * Returns a quoted printable string created according to \273 RFC2045,\n * section 6.7.\n *\n * This function is similar to imap_8bit(), except this one does not\n * require the IMAP module to work.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the encoded string.\n */", 
"quoted_printable_decode", T(String), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.quoted-printable-decode.php )\n *\n * This function returns an 8-bit binary string corresponding to the\n * decoded quoted printable string (according to \273 RFC2045, section 6.7,\n * not \273 RFC2821, section 4.5.2, so additional periods are not stripped\n * from the beginning of line).\n *\n * This function is similar to imap_qprint(), except this one does not\n * require the IMAP module to work.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the 8-bit binary string.\n */", 
"convert_uudecode", T(Variant), S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.convert-uudecode.php )\n *\n * convert_uudecode() decodes a uuencoded string.\n *\n * @data       string  The uuencoded data.\n *\n * @return     mixed   Returns the decoded data as a string.\n */", 
"convert_uuencode", T(Variant), S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.convert-uuencode.php )\n *\n * convert_uuencode() encodes a string using the uuencode algorithm.\n *\n * Uuencode translates all strings (including binary's ones) into printable\n * characters, making them safe for network transmissions. Uuencoded data\n * is about 35% larger than the original.\n *\n * @data       string  The data to be encoded.\n *\n * @return     mixed   Returns the uuencoded data.\n */", 
"str_rot13", T(String), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.str-rot13.php )\n *\n * Performs the ROT13 encoding on the str argument and returns the\n * resulting string.\n *\n * The ROT13 encoding simply shifts every letter by 13 places in the\n * alphabet while leaving non-alpha characters untouched. Encoding and\n * decoding are done by the same function, passing an encoded string as\n * argument will return the original version.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the ROT13 version of the given string.\n */", 
"crc32", T(Int64), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.crc32.php )\n *\n * Generates the cyclic redundancy checksum polynomial of 32-bit lengths of\n * the str. This is usually used to validate the integrity of data being\n * transmitted.\n *\n * Because PHP's integer type is signed, and many crc32 checksums will\n * result in negative integers, you need to use the \"%u\" formatter of\n * sprintf() or printf() to get the string representation of the unsigned\n * crc32 checksum.\n *\n * @str        string  The data.\n *\n * @return     int     Returns the crc32 checksum of str as an integer.\n */", 
"crypt", T(String), S(0), "str", T(String), NULL, NULL, S(0), "salt", T(String), "s:0:\"\";", "\"\"", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.crypt.php )\n *\n * crypt() will return a hashed string using the standard Unix DES-based\n * algorithm or alternative algorithms that may be available on the system.\n *\n * Some operating systems support more than one type of hash. In fact,\n * sometimes the standard DES-based algorithm is replaced by an MD5-based\n * algorithm. The hash type is triggered by the salt argument. Prior to\n * 5.3, PHP would determine the available algorithms at install-time based\n * on the system's crypt(). If no salt is provided, PHP will auto-generate\n * either a standard two character (DES) salt, or a twelve character (MD5),\n * depending on the availability of MD5 crypt(). PHP sets a constant named\n * CRYPT_SALT_LENGTH which indicates the longest valid salt allowed by the\n * available hashes.\n *\n * The standard DES-based crypt() returns the salt as the first two\n * characters of the output. It also only uses the first eight characters\n * of str, so longer strings that start with the same eight characters will\n * generate the same result (when the same salt is used). On systems where\n * the crypt() function supports multiple hash types, the following\n * constants are set to 0 or 1 depending on whether the given type is\n * available: CRYPT_STD_DES - Standard DES-based hash with a two character\n * salt from the alphabet \"./0-9A-Za-z\". Using invalid characters in the\n * salt will cause crypt() to fail. CRYPT_EXT_DES - Extended DES-based\n * hash. The \"salt\" is a 9-character string consisting of an underscore\n * followed by 4 bytes of iteration count and 4 bytes of salt. These are\n * encoded as printable characters, 6 bits per character, least significant\n * character first. The values 0 to 63 are encoded as \"./0-9A-Za-z\". Using\n * invalid characters in the salt will cause crypt() to fail. CRYPT_MD5 -\n * MD5 hashing with a twelve character salt starting with $1$\n * CRYPT_BLOWFISH - Blowfish hashing with a salt as follows: \"$2a$\", a two\n * digit cost parameter, \"$\", and 22 base 64 digits from the alphabet\n * \"./0-9A-Za-z\". Using characters outside of this range in the salt will\n * cause crypt() to return a zero-length string. The two digit cost\n * parameter is the base-2 logarithm of the iteration count for the\n * underlying Blowfish-based hashing algorithmeter and must be in range\n * 04-31, values outside this range will cause crypt() to fail.\n * CRYPT_SHA256 - SHA-256 hash with a sixteen character salt prefixed with\n * $5$. If the salt string starts with 'rounds=<N>$', the numeric value of\n * N is used to indicate how many times the hashing loop should be\n * executed, much like the cost parameter on Blowfish. The default number\n * of rounds is 5000, there is a minimum of 1000 and a maximum of\n * 999,999,999. Any selection of N outside this range will be truncated to\n * the nearest limit. CRYPT_SHA512 - SHA-512 hash with a sixteen character\n * salt prefixed with $6$. If the salt string starts with 'rounds=<N>$',\n * the numeric value of N is used to indicate how many times the hashing\n * loop should be executed, much like the cost parameter on Blowfish. The\n * default number of rounds is 5000, there is a minimum of 1000 and a\n * maximum of 999,999,999. Any selection of N outside this range will be\n * truncated to the nearest limit.\n *\n * As of PHP 5.3.0, PHP contains its own implementation and will use that\n * if the system lacks of support for one or more of the algorithms.\n *\n * @str        string  The string to be hashed.\n * @salt       string  An optional salt string to base the hashing on. If\n *                     not provided, the behaviour is defined by the\n *                     algorithm implementation and can lead to unexpected\n *                     results.\n *\n * @return     string  Returns the hashed string or a string that is\n *                     shorter than 13 characters and is guaranteed to\n *                     differ from the salt on failure.\n */", 
"md5", T(String), S(0), "str", T(String), NULL, NULL, S(0), "raw_output", T(Boolean), "b:0;", "false", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.md5.php )\n *\n * Calculates the MD5 hash of str using the \273 RSA Data Security, Inc. MD5\n * Message-Digest Algorithm, and returns that hash.\n *\n * @str        string  The string.\n * @raw_output bool    If the optional raw_output is set to TRUE, then the\n *                     md5 digest is instead returned in raw binary format\n *                     with a length of 16.\n *\n * @return     string  Returns the hash as a 32-character hexadecimal\n *                     number.\n */", 
"sha1", T(String), S(0), "str", T(String), NULL, NULL, S(0), "raw_output", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.sha1.php )\n *\n *\n * @str        string  The input string.\n * @raw_output bool    If the optional raw_output is set to TRUE, then the\n *                     sha1 digest is instead returned in raw binary format\n *                     with a length of 20, otherwise the returned value is\n *                     a 40-character hexadecimal number.\n *\n * @return     string  Returns the sha1 hash as a string.\n */", 
"strtr", T(Variant), S(0), "str", T(String), NULL, NULL, S(0), "from", T(Variant), NULL, NULL, S(0), "to", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.strtr.php )\n *\n * This function returns a copy of str, translating all occurrences of each\n * character in from to the corresponding character in to.\n *\n * If from and to are different lengths, the extra characters in the longer\n * of the two are ignored.\n *\n * @str        string  The string being translated.\n * @from       mixed   The string being translated to to.\n * @to         mixed   The string replacing from.\n *\n * @return     mixed   Returns the translated string.\n *\n *                     If replace_pairs contains a key which is an empty\n *                     string (\"\"), FALSE will be returned.\n */", 
"convert_cyr_string", T(String), S(0), "str", T(String), NULL, NULL, S(0), "from", T(String), NULL, NULL, S(0), "to", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.convert-cyr-string.php\n * )\n *\n * Converts from one Cyrillic character set to another.\n * Supported characters are: k - koi8-r w - windows-1251 i - iso8859-5 a -\n * x-cp866 d - x-cp866 m - x-mac-cyrillic\n *\n * @str        string  The string to be converted.\n * @from       string  The source Cyrillic character set, as a single\n *                     character.\n * @to         string  The target Cyrillic character set, as a single\n *                     character.\n *\n * @return     string  Returns the converted string.\n */", 
"get_html_translation_table", T(Array), S(0), "table", T(Int32), "i:0;", "0", S(0), "quote_style", T(Int32), "i:2;", "ENT_COMPAT", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-html-translation-table.php )\n *\n * get_html_translation_table() will return the translation table that is\n * used internally for htmlspecialchars() and htmlentities() with the\n * default charset.\n *\n * Special characters can be encoded in several ways. E.g. \" can be encoded\n * as &quot;, &#34; or &#x22. get_html_translation_table() returns only the\n * most common form for them.\n *\n * @table      int     There are two new constants (HTML_ENTITIES,\n *                     HTML_SPECIALCHARS) that allow you to specify the\n *                     table you want.\n * @quote_style\n *             int     Like the htmlspecialchars() and htmlentities()\n *                     functions you can optionally specify the quote_style\n *                     you are working with. See the description of these\n *                     modes in htmlspecialchars().\n *\n * @return     map     Returns the translation table as an array.\n */", 
"hebrev", T(String), S(0), "hebrew_text", T(String), NULL, NULL, S(0), "max_chars_per_line", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hebrev.php )\n *\n * Converts logical Hebrew text to visual text.\n *\n * The function tries to avoid breaking words.\n *\n * @hebrew_text\n *             string  A Hebrew input string.\n * @max_chars_per_line\n *             int     This optional parameter indicates maximum number of\n *                     characters per line that will be returned.\n *\n * @return     string  Returns the visual string.\n */", 
"hebrevc", T(String), S(0), "hebrew_text", T(String), NULL, NULL, S(0), "max_chars_per_line", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hebrevc.php )\n *\n * This function is similar to hebrev() with the difference that it\n * converts newlines (\\n) to \"<br>\\n\".\n *\n * The function tries to avoid breaking words.\n *\n * @hebrew_text\n *             string  A Hebrew input string.\n * @max_chars_per_line\n *             int     This optional parameter indicates maximum number of\n *                     characters per line that will be returned.\n *\n * @return     string  Returns the visual string.\n */", 
"setlocale", T(Variant), S(0), "category", T(Int32), NULL, NULL, S(0), "locale", T(Variant), NULL, NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/function.setlocale.php )\n *\n * Sets locale information.\n * On Windows, setlocale(LC_ALL, '') sets the locale names from the\n * system's regional/language settings (accessible via Control Panel).\n *\n * @category   int     category is a named constant specifying the category\n *                     of the functions affected by the locale setting:\n *                     LC_ALL for all of the below LC_COLLATE for string\n *                     comparison, see strcoll() LC_CTYPE for character\n *                     classification and conversion, for example\n *                     strtoupper() LC_MONETARY for localeconv() LC_NUMERIC\n *                     for decimal separator (See also localeconv())\n *                     LC_TIME for date and time formatting with strftime()\n *                     LC_MESSAGES for system responses (available if PHP\n *                     was compiled with libintl)\n * @locale     mixed   If locale is NULL or the empty string \"\", the locale\n *                     names will be set from the values of environment\n *                     variables with the same names as the above\n *                     categories, or from \"LANG\".\n *\n *                     If locale is \"0\", the locale setting is not\n *                     affected, only the current setting is returned.\n *\n *                     If locale is an array or followed by additional\n *                     parameters then each array element or parameter is\n *                     tried to be set as new locale until success. This is\n *                     useful if a locale is known under different names on\n *                     different systems or for providing a fallback for a\n *                     possibly not available locale.\n *\n * @return     mixed   Returns the new current locale, or FALSE if the\n *                     locale functionality is not implemented on your\n *                     platform, the specified locale does not exist or the\n *                     category name is invalid.\n *\n *                     An invalid category name also causes a warning\n *                     message. Category/locale names can be found in \273 RFC\n *                     1766 and \273 ISO 639. Different systems have different\n *                     naming schemes for locales.\n *\n *                     The return value of setlocale() depends on the\n *                     system that PHP is running. It returns exactly what\n *                     the system setlocale function returns.\n */", 
"localeconv", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.localeconv.php )\n *\n * Returns an associative array containing localized numeric and monetary\n * formatting information.\n *\n * @return     map\n */", 
"nl_langinfo", T(String), S(0), "item", T(Int32), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.nl-langinfo.php )\n *\n * nl_langinfo() is used to access individual elements of the locale\n * categories. Unlike localeconv(), which returns all of the elements,\n * nl_langinfo() allows you to select any specific element.\n *\n * @item       int\n *\n * @return     string  Returns the element as a string, or FALSE if item is\n *                     not valid.\n */", 
"printf", T(Variant), S(0), "format", T(String), NULL, NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/function.printf.php )\n *\n *\n * @format     string  See sprintf() for a description of format.\n *\n * @return     mixed   Returns the length of the outputted string.\n */", 
"vprintf", T(Variant), S(0), "format", T(String), NULL, NULL, S(0), "args", T(Array), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.vprintf.php )\n *\n * Display array values as a formatted string according to format (which is\n * described in the documentation for sprintf()).\n *\n * Operates as printf() but accepts an array of arguments, rather than a\n * variable number of arguments.\n *\n * @format     string  See sprintf() for a description of format.\n * @args       vector\n *\n * @return     mixed   Returns the length of the outputted string.\n */", 
"sprintf", T(Variant), S(0), "format", T(String), NULL, NULL, S(0), NULL, S(1196032), "/**\n * ( excerpt from http://php.net/manual/en/function.sprintf.php )\n *\n * Returns a string produced according to the formatting string format.\n *\n * @format     string\n *\n * @return     mixed   Returns a string produced according to the\n *                     formatting string format.\n */", 
"vsprintf", T(Variant), S(0), "format", T(String), NULL, NULL, S(0), "args", T(Array), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.vsprintf.php )\n *\n * Operates as sprintf() but accepts an array of arguments, rather than a\n * variable number of arguments.\n *\n * @format     string  See sprintf() for a description of format.\n * @args       vector\n *\n * @return     mixed   Return array values as a formatted string according\n *                     to format (which is described in the documentation\n *                     for sprintf()).\n */", 
"sscanf", T(Variant), S(0), "str", T(String), NULL, NULL, S(0), "format", T(String), NULL, NULL, S(0), NULL, S(278528), "/**\n * ( excerpt from http://php.net/manual/en/function.sscanf.php )\n *\n * The function sscanf() is the input analog of printf(). sscanf() reads\n * from the string str and interprets it according to the specified format,\n * which is described in the documentation for sprintf().\n *\n * Any whitespace in the format string matches any whitespace in the input\n * string. This means that even a tab \\t in the format string can match a\n * single space character in the input string.\n *\n * @str        string  The input string being parsed.\n * @format     string  The interpreted format for str, which is described\n *                     in the documentation for sprintf() with following\n *                     differences: Function is not locale-aware. F, g, G\n *                     and b are not supported. D stands for decimal\n *                     number. i stands for integer with base detection. n\n *                     stands for number of characters processed so far.\n *\n * @return     mixed   If only two parameters were passed to this function,\n *                     the values parsed will be returned as an array.\n *                     Otherwise, if optional parameters are passed, the\n *                     function will return the number of assigned values.\n *                     The optional parameters must be passed by reference.\n */", 
"chr", T(String), S(0), "ascii", T(Int64), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.chr.php )\n *\n * Returns a one-character string containing the character specified by\n * ascii.\n *\n * This function complements ord().\n *\n * @ascii      int     The ascii code.\n *\n * @return     string  Returns the specified character.\n */", 
"ord", T(Int64), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.ord.php )\n *\n * Returns the ASCII value of the first character of string.\n *\n * This function complements chr().\n *\n * @str        string  A character.\n *\n * @return     int     Returns the ASCII value as an integer.\n */", 
"money_format", T(Variant), S(0), "format", T(String), NULL, NULL, S(0), "number", T(Double), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.money-format.php )\n *\n * money_format() returns a formatted version of number. This function\n * wraps the C library function strfmon(), with the difference that this\n * implementation converts only one number at a time.\n *\n * @format     string  The format specification consists of the following\n *                     sequence: % character Flags\n *\n *                     One or more of the optional flags below can be used:\n *                     =f\n *\n *                     The character = followed by a (single byte)\n *                     character f to be used as the numeric fill\n *                     character. The default fill character is space.\n * @number     float   Disable the use of grouping characters (as defined\n *                     by the current locale).\n *\n * @return     mixed   Returns the formatted string. Characters before and\n *                     after the formatting string will be returned\n *                     unchanged. Non-numeric number causes returning NULL\n *                     and emitting E_WARNING.\n */", 
"number_format", T(String), S(0), "number", T(Double), NULL, NULL, S(0), "decimals", T(Int32), "i:0;", "0", S(0), "dec_point", T(String), "s:1:\".\";", "\".\"", S(0), "thousands_sep", T(String), "s:1:\",\";", "\",\"", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.number-format.php )\n *\n * This function accepts either one, two, or four parameters (not three):\n *\n * If only one parameter is given, number will be formatted without\n * decimals, but with a comma (\",\") between every group of thousands.\n *\n * If two parameters are given, number will be formatted with decimals\n * decimals with a dot (\".\") in front, and a comma (\",\") between every\n * group of thousands.\n *\n * If all four parameters are given, number will be formatted with decimals\n * decimals, dec_point instead of a dot (\".\") before the decimals and\n * thousands_sep instead of a comma (\",\") between every group of thousands.\n *\n * @number     float   The number being formatted.\n * @decimals   int     Sets the number of decimal points.\n * @dec_point  string  Sets the separator for the decimal point.\n * @thousands_sep\n *             string  Sets the thousands separator.\n *\n *                     Only the first character of thousands_sep is used.\n *                     For example, if you use bar as thousands_sep on the\n *                     number 1000, number_format() will return 1b000.\n *\n * @return     string  A formatted version of number.\n */", 
"strcmp", T(Int32), S(0), "str1", T(String), NULL, NULL, S(0), "str2", T(String), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.strcmp.php )\n *\n *\n * @str1       string  The first string.\n * @str2       string  The second string.\n *\n * @return     int     Returns < 0 if str1 is less than str2; > 0 if str1\n *                     is greater than str2, and 0 if they are equal.\n */", 
"strncmp", T(Int32), S(0), "str1", T(String), NULL, NULL, S(0), "str2", T(String), NULL, NULL, S(0), "len", T(Int32), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.strncmp.php )\n *\n * This function is similar to strcmp(), with the difference that you can\n * specify the (upper limit of the) number of characters from each string\n * to be used in the comparison.\n *\n * Note that this comparison is case sensitive.\n *\n * @str1       string  The first string.\n * @str2       string  The second string.\n * @len        int     Number of characters to use in the comparison.\n *\n * @return     int     Returns < 0 if str1 is less than str2; > 0 if str1\n *                     is greater than str2, and 0 if they are equal.\n */", 
"strnatcmp", T(Int32), S(0), "str1", T(String), NULL, NULL, S(0), "str2", T(String), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.strnatcmp.php )\n *\n * This function implements a comparison algorithm that orders alphanumeric\n * strings in the way a human being would, this is described as a \"natural\n * ordering\". Note that this comparison is case sensitive.\n *\n * @str1       string  The first string.\n * @str2       string  The second string.\n *\n * @return     int     Similar to other string comparison functions, this\n *                     one returns < 0 if str1 is less than str2; > 0 if\n *                     str1 is greater than str2, and 0 if they are equal.\n */", 
"strcasecmp", T(Int32), S(0), "str1", T(String), NULL, NULL, S(0), "str2", T(String), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.strcasecmp.php )\n *\n * Binary safe case-insensitive string comparison.\n *\n * @str1       string  The first string\n * @str2       string  The second string\n *\n * @return     int     Returns < 0 if str1 is less than str2; > 0 if str1\n *                     is greater than str2, and 0 if they are equal.\n */", 
"strncasecmp", T(Int32), S(0), "str1", T(String), NULL, NULL, S(0), "str2", T(String), NULL, NULL, S(0), "len", T(Int32), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.strncasecmp.php )\n *\n * This function is similar to strcasecmp(), with the difference that you\n * can specify the (upper limit of the) number of characters from each\n * string to be used in the comparison.\n *\n * @str1       string  The first string.\n * @str2       string  The second string.\n * @len        int     The length of strings to be used in the comparison.\n *\n * @return     int     Returns < 0 if str1 is less than str2; > 0 if str1\n *                     is greater than str2, and 0 if they are equal.\n */", 
"strnatcasecmp", T(Int32), S(0), "str1", T(String), NULL, NULL, S(0), "str2", T(String), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.strnatcasecmp.php )\n *\n * This function implements a comparison algorithm that orders alphanumeric\n * strings in the way a human being would. The behaviour of this function\n * is similar to strnatcmp(), except that the comparison is not case\n * sensitive. For more information see: Martin Pool's \273 Natural Order\n * String Comparison page.\n *\n * @str1       string  The first string.\n * @str2       string  The second string.\n *\n * @return     int     Similar to other string comparison functions, this\n *                     one returns < 0 if str1 is less than str2 > 0 if\n *                     str1 is greater than str2, and 0 if they are equal.\n */", 
"strcoll", T(Int32), S(0), "str1", T(String), NULL, NULL, S(0), "str2", T(String), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.strcoll.php )\n *\n * Note that this comparison is case sensitive, and unlike strcmp() this\n * function is not binary safe.\n *\n * strcoll() uses the current locale for doing the comparisons. If the\n * current locale is C or POSIX, this function is equivalent to strcmp().\n *\n * @str1       string  The first string.\n * @str2       string  The second string.\n *\n * @return     int     Returns < 0 if str1 is less than str2; > 0 if str1\n *                     is greater than str2, and 0 if they are equal.\n */", 
"substr_compare", T(Variant), S(0), "main_str", T(String), NULL, NULL, S(0), "str", T(String), NULL, NULL, S(0), "offset", T(Int32), NULL, NULL, S(0), "length", T(Int32), "i:0;", "0", S(0), "case_insensitivity", T(Boolean), "b:0;", "false", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.substr-compare.php )\n *\n * substr_compare() compares main_str from position offset with str up to\n * length characters.\n *\n * @main_str   string  The main string being compared.\n * @str        string  The secondary string being compared.\n * @offset     int     The start position for the comparison. If negative,\n *                     it starts counting from the end of the string.\n * @length     int     The length of the comparison. The default value is\n *                     the largest of the length of the str compared to the\n *                     length of main_str less the offset.\n * @case_insensitivity\n *             bool    If case_insensitivity is TRUE, comparison is case\n *                     insensitive.\n *\n * @return     mixed   Returns < 0 if main_str from position offset is less\n *                     than str, > 0 if it is greater than str, and 0 if\n *                     they are equal. If offset is equal to or greater\n *                     than the length of main_str or length is set and is\n *                     less than 1, substr_compare() prints a warning and\n *                     returns FALSE.\n */", 
"strchr", T(Variant), S(0), "haystack", T(String), NULL, NULL, S(0), "needle", T(Variant), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.strchr.php )\n *\n *\n * @haystack   string\n * @needle     mixed\n *\n * @return     mixed\n */", 
"strrchr", T(Variant), S(0), "haystack", T(String), NULL, NULL, S(0), "needle", T(Variant), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.strrchr.php )\n *\n * This function returns the portion of haystack which starts at the last\n * occurrence of needle and goes until the end of haystack.\n *\n * @haystack   string  The string to search in\n * @needle     mixed   If needle contains more than one character, only the\n *                     first is used. This behavior is different from that\n *                     of strstr().\n *\n *                     If needle is not a string, it is converted to an\n *                     integer and applied as the ordinal value of a\n *                     character.\n *\n * @return     mixed   This function returns the portion of string, or\n *                     FALSE if needle is not found.\n */", 
"strstr", T(Variant), S(0), "haystack", T(String), NULL, NULL, S(0), "needle", T(Variant), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.strstr.php )\n *\n * Returns part of haystack string from the first occurrence of needle to\n * the end of haystack.\n *\n * This function is case-sensitive. For case-insensitive searches, use\n * stristr().\n *\n * If you only want to determine if a particular needle occurs within\n * haystack, use the faster and less memory intensive function strpos()\n * instead.\n *\n * @haystack   string  The input string.\n * @needle     mixed   If needle is not a string, it is converted to an\n *                     integer and applied as the ordinal value of a\n *                     character.\n *\n * @return     mixed   Returns the portion of string, or FALSE if needle is\n *                     not found.\n */", 
"stristr", T(Variant), S(0), "haystack", T(String), NULL, NULL, S(0), "needle", T(Variant), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.stristr.php )\n *\n * Returns all of haystack from the first occurrence of needle to the end.\n * needle and haystack are examined in a case-insensitive manner.\n *\n * @haystack   string  The string to search in\n * @needle     mixed   If needle is not a string, it is converted to an\n *                     integer and applied as the ordinal value of a\n *                     character.\n *\n * @return     mixed   Returns the matched substring. If needle is not\n *                     found, returns FALSE.\n */", 
"strpbrk", T(Variant), S(0), "haystack", T(String), NULL, NULL, S(0), "char_list", T(String), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.strpbrk.php )\n *\n * strpbrk() searches the haystack string for a char_list.\n *\n * @haystack   string  The string where char_list is looked for.\n * @char_list  string  This parameter is case sensitive.\n *\n * @return     mixed   Returns a string starting from the character found,\n *                     or FALSE if it is not found.\n */", 
"strpos", T(Variant), S(0), "haystack", T(String), NULL, NULL, S(0), "needle", T(Variant), NULL, NULL, S(0), "offset", T(Int32), "i:0;", "0", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.strpos.php )\n *\n * Returns the numeric position of the first occurrence of needle in the\n * haystack string. Unlike the strrpos() before PHP 5, this function can\n * take a full string as the needle parameter and the entire string will be\n * used.\n *\n * @haystack   string  The string to search in\n * @needle     mixed   If needle is not a string, it is converted to an\n *                     integer and applied as the ordinal value of a\n *                     character.\n * @offset     int     The optional offset parameter allows you to specify\n *                     which character in haystack to start searching. The\n *                     position returned is still relative to the beginning\n *                     of haystack.\n *\n * @return     mixed   Returns the position as an integer. If needle is not\n *                     found, strpos() will return boolean FALSE.\n *                     WarningThis function may return Boolean FALSE, but\n *                     may also return a non-Boolean value which evaluates\n *                     to FALSE, such as 0 or \"\". Please read the section\n *                     on Booleans for more information. Use the ===\n *                     operator for testing the return value of this\n *                     function.\n */", 
"stripos", T(Variant), S(0), "haystack", T(String), NULL, NULL, S(0), "needle", T(Variant), NULL, NULL, S(0), "offset", T(Int32), "i:0;", "0", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.stripos.php )\n *\n * Returns the numeric position of the first occurrence of needle in the\n * haystack string.\n *\n * Unlike strpos(), stripos() is case-insensitive.\n *\n * @haystack   string  The string to search in\n * @needle     mixed   Note that the needle may be a string of one or more\n *                     characters.\n *\n *                     If needle is not a string, it is converted to an\n *                     integer and applied as the ordinal value of a\n *                     character.\n * @offset     int     The optional offset parameter allows you to specify\n *                     which character in haystack to start searching. The\n *                     position returned is still relative to the beginning\n *                     of haystack.\n *\n * @return     mixed   If needle is not found, stripos() will return\n *                     boolean FALSE. WarningThis function may return\n *                     Boolean FALSE, but may also return a non-Boolean\n *                     value which evaluates to FALSE, such as 0 or \"\".\n *                     Please read the section on Booleans for more\n *                     information. Use the === operator for testing the\n *                     return value of this function.\n */", 
"strrpos", T(Variant), S(0), "haystack", T(String), NULL, NULL, S(0), "needle", T(Variant), NULL, NULL, S(0), "offset", T(Int32), "i:0;", "0", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.strrpos.php )\n *\n * Returns the numeric position of the last occurrence of needle in the\n * haystack string. Note that the needle in this case can only be a single\n * character in PHP 4. If a string is passed as the needle, then only the\n * first character of that string will be used.\n *\n * @haystack   string  The string to search in.\n * @needle     mixed   If needle is not a string, it is converted to an\n *                     integer and applied as the ordinal value of a\n *                     character.\n * @offset     int     May be specified to begin searching an arbitrary\n *                     number of characters into the string. Negative\n *                     values will stop searching at an arbitrary point\n *                     prior to the end of the string.\n *\n * @return     mixed   Returns the position where the needle exists.\n *                     Returns FALSE if the needle was not found.\n */", 
"strripos", T(Variant), S(0), "haystack", T(String), NULL, NULL, S(0), "needle", T(Variant), NULL, NULL, S(0), "offset", T(Int32), "i:0;", "0", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.strripos.php )\n *\n * Find position of last occurrence of a case-insensitive string in a\n * string. Unlike strrpos(), strripos() is case-insensitive.\n *\n * @haystack   string  The string to search in\n * @needle     mixed   Note that the needle may be a string of one or more\n *                     characters.\n * @offset     int     The offset parameter may be specified to begin\n *                     searching an arbitrary number of characters into the\n *                     string.\n *\n *                     Negative offset values will start the search at\n *                     offset characters from the start of the string.\n *\n * @return     mixed   Returns the numerical position of the last\n *                     occurrence of needle. Also note that string\n *                     positions start at 0, and not 1.\n *\n *                     If needle is not found, FALSE is returned.\n *                     WarningThis function may return Boolean FALSE, but\n *                     may also return a non-Boolean value which evaluates\n *                     to FALSE, such as 0 or \"\". Please read the section\n *                     on Booleans for more information. Use the ===\n *                     operator for testing the return value of this\n *                     function.\n */", 
"substr_count", T(Variant), S(0), "haystack", T(String), NULL, NULL, S(0), "needle", T(String), NULL, NULL, S(0), "offset", T(Int32), "i:0;", "0", S(0), "length", T(Int32), "i:2147483647;", "0x7FFFFFFF", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.substr-count.php )\n *\n * substr_count() returns the number of times the needle substring occurs\n * in the haystack string. Please note that needle is case sensitive.\n *\n * This function doesn't count overlapped substrings. See the example\n * below!\n *\n * @haystack   string  The string to search in\n * @needle     string  The substring to search for\n * @offset     int     The offset where to start counting\n * @length     int     The maximum length after the specified offset to\n *                     search for the substring. It outputs a warning if\n *                     the offset plus the length is greater than the\n *                     haystack length.\n *\n * @return     mixed   This functions returns an integer.\n */", 
"strspn", T(Variant), S(0), "str1", T(String), NULL, NULL, S(0), "str2", T(String), NULL, NULL, S(0), "start", T(Int32), "i:0;", "0", S(0), "length", T(Int32), "i:2147483647;", "0x7FFFFFFF", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.strspn.php )\n *\n * Returns the length of the first group of consecutive characters from\n * mask found in subject.\n *\n * If start and length are omitted, then all of subject will be examined.\n * If they are included, then the effect will be the same as calling\n * strspn(substr($subject, $start, $length), $mask) (see substr for more\n * information).\n *\n * The line of code:\n *\n * will assign 2 to $var, because the string \"42\" is the first segment from\n * subject to consist only of characters contained within \"1234567890\".\n *\n * @str1       string  The string to examine.\n * @str2       string  The list of allowable characters to include in\n *                     counted segments.\n * @start      int     The position in subject to start searching.\n *\n *                     If start is given and is non-negative, then strspn()\n *                     will begin examining subject at the start'th\n *                     position. For instance, in the string 'abcdef', the\n *                     character at position 0 is 'a', the character at\n *                     position 2 is 'c', and so forth.\n *\n *                     If start is given and is negative, then strspn()\n *                     will begin examining subject at the start'th\n *                     position from the end of subject.\n * @length     int     The length of the segment from subject to examine.\n *\n *                     If length is given and is non-negative, then subject\n *                     will be examined for length characters after the\n *                     starting position.\n *\n *                     If lengthis given and is negative, then subject will\n *                     be examined from the starting position up to length\n *                     characters from the end of subject.\n *\n * @return     mixed   Returns the length of the initial segment of str1\n *                     which consists entirely of characters in str2.\n */", 
"strcspn", T(Variant), S(0), "str1", T(String), NULL, NULL, S(0), "str2", T(String), NULL, NULL, S(0), "start", T(Int32), "i:0;", "0", S(0), "length", T(Int32), "i:2147483647;", "0x7FFFFFFF", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.strcspn.php )\n *\n * Returns the length of the initial segment of str1 which does not contain\n * any of the characters in str2.\n *\n * @str1       string  The first string.\n * @str2       string  The second string.\n * @start      int     The start position of the string to examine.\n * @length     int     The length of the string to examine.\n *\n * @return     mixed   Returns the length of the segment as an integer.\n */", 
"strlen", T(Int32), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.strlen.php )\n *\n * Returns the length of the given string.\n *\n * @str        string  The string being measured for length.\n *\n * @return     int     The length of the string on success, and 0 if the\n *                     string is empty.\n */", 
"count_chars", T(Variant), S(0), "str", T(String), NULL, NULL, S(0), "mode", T(Int64), "i:0;", "0", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.count-chars.php )\n *\n * Counts the number of occurrences of every byte-value (0..255) in string\n * and returns it in various ways.\n *\n * @str        string  The examined string.\n * @mode       int     See return values.\n *\n * @return     mixed   Depending on mode count_chars() returns one of the\n *                     following: 0 - an array with the byte-value as key\n *                     and the frequency of every byte as value. 1 - same\n *                     as 0 but only byte-values with a frequency greater\n *                     than zero are listed. 2 - same as 0 but only\n *                     byte-values with a frequency equal to zero are\n *                     listed. 3 - a string containing all unique\n *                     characters is returned. 4 - a string containing all\n *                     not used characters is returned.\n */", 
"str_word_count", T(Variant), S(0), "str", T(String), NULL, NULL, S(0), "format", T(Int64), "i:0;", "0", S(0), "charlist", T(String), "s:0:\"\";", "\"\"", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.str-word-count.php )\n *\n * Counts the number of words inside string. If the optional format is not\n * specified, then the return value will be an integer representing the\n * number of words found. In the event the format is specified, the return\n * value will be an array, content of which is dependent on the format. The\n * possible value for the format and the resultant outputs are listed\n * below.\n *\n * For the purpose of this function, 'word' is defined as a locale\n * dependent string containing alphabetic characters, which also may\n * contain, but not start with \"'\" and \"-\" characters.\n *\n * @str        string  The string\n * @format     int     Specify the return value of this function. The\n *                     current supported values are: 0 - returns the number\n *                     of words found 1 - returns an array containing all\n *                     the words found inside the string 2 - returns an\n *                     associative array, where the key is the numeric\n *                     position of the word inside the string and the value\n *                     is the actual word itself\n * @charlist   string  A list of additional characters which will be\n *                     considered as 'word'\n *\n * @return     mixed   Returns an array or an integer, depending on the\n *                     format chosen.\n */", 
"levenshtein", T(Int32), S(0), "str1", T(String), NULL, NULL, S(0), "str2", T(String), NULL, NULL, S(0), "cost_ins", T(Int32), "i:1;", "1", S(0), "cost_rep", T(Int32), "i:1;", "1", S(0), "cost_del", T(Int32), "i:1;", "1", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.levenshtein.php )\n *\n * The Levenshtein distance is defined as the minimal number of characters\n * you have to replace, insert or delete to transform str1 into str2. The\n * complexity of the algorithm is O(m*n), where n and m are the length of\n * str1 and str2 (rather good when compared to similar_text(), which is\n * O(max(n,m)**3), but still expensive).\n *\n * In its simplest form the function will take only the two strings as\n * parameter and will calculate just the number of insert, replace and\n * delete operations needed to transform str1 into str2.\n *\n * A second variant will take three additional parameters that define the\n * cost of insert, replace and delete operations. This is more general and\n * adaptive than variant one, but not as efficient.\n *\n * @str1       string  One of the strings being evaluated for Levenshtein\n *                     distance.\n * @str2       string  One of the strings being evaluated for Levenshtein\n *                     distance.\n * @cost_ins   int     Defines the cost of insertion.\n * @cost_rep   int     Defines the cost of replacement.\n * @cost_del   int     Defines the cost of deletion.\n *\n * @return     int     This function returns the Levenshtein-Distance\n *                     between the two argument strings or -1, if one of\n *                     the argument strings is longer than the limit of 255\n *                     characters.\n */", 
"similar_text", T(Int32), S(0), "first", T(String), NULL, NULL, S(0), "second", T(String), NULL, NULL, S(0), "percent", T(Variant), "N;", "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.similar-text.php )\n *\n * This calculates the similarity between two strings as described in\n * Oliver [1993]. Note that this implementation does not use a stack as in\n * Oliver's pseudo code, but recursive calls which may or may not speed up\n * the whole process. Note also that the complexity of this algorithm is\n * O(N**3) where N is the length of the longest string.\n *\n * @first      string  The first string.\n * @second     string  The second string.\n * @percent    mixed   By passing a reference as third argument,\n *                     similar_text() will calculate the similarity in\n *                     percent for you.\n *\n * @return     int     Returns the number of matching chars in both\n *                     strings.\n */", 
"soundex", T(Variant), S(0), "str", T(String), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.soundex.php )\n *\n * Calculates the soundex key of str.\n *\n * Soundex keys have the property that words pronounced similarly produce\n * the same soundex key, and can thus be used to simplify searches in\n * databases where you know the pronunciation but not the spelling. This\n * soundex function returns a string 4 characters long, starting with a\n * letter.\n *\n * This particular soundex function is one described by Donald Knuth in\n * \"The Art Of Computer Programming, vol. 3: Sorting And Searching\",\n * Addison-Wesley (1973), pp. 391-392.\n *\n * @str        string  The input string.\n *\n * @return     mixed   Returns the soundex key as a string.\n */", 
"metaphone", T(Variant), S(0), "str", T(String), NULL, NULL, S(0), "phones", T(Int32), "i:0;", "0", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.metaphone.php )\n *\n * Calculates the metaphone key of str.\n *\n * Similar to soundex() metaphone creates the same key for similar sounding\n * words. It's more accurate than soundex() as it knows the basic rules of\n * English pronunciation. The metaphone generated keys are of variable\n * length.\n *\n * Metaphone was developed by Lawrence Philips <lphilips at verity dot\n * com>. It is described in [\"Practical Algorithms for Programmers\",\n * Binstock & Rex, Addison Wesley, 1995].\n *\n * @str        string  The input string.\n * @phones     int     This parameter restricts the returned metaphone key\n *                     to phonemes characters in length. The default value\n *                     of 0 means no restriction.\n *\n * @return     mixed   Returns the metaphone key as a string, or FALSE on\n *                     failure.\n */", 
"parse_str", T(Void), S(0), "str", T(String), NULL, NULL, S(0), "arr", T(Variant), "N;", "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.parse-str.php )\n *\n * Parses str as if it were the query string passed via a URL and sets\n * variables in the current scope.\n *\n * To get the current QUERY_STRING, you may use the variable\n * $_SERVER['QUERY_STRING']. Also, you may want to read the section on\n * variables from external sources.\n *\n * The magic_quotes_gpc setting affects the output of this function, as\n * parse_str() uses the same mechanism that PHP uses to populate the $_GET,\n * $_POST, etc. variables.\n *\n * @str        string  The input string.\n * @arr        mixed   If the second parameter arr is present, variables\n *                     are stored in this variable as array elements\n *                     instead.\n *\n * @return     mixed   No value is returned.\n */", 

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#elif EXT_TYPE == 3

#endif
