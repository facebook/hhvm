/*
 *  Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */
include "mcrouter/lib/carbon/carbon.thrift"
include "mcrouter/lib/carbon/carbon_result.thrift"


cpp_include "<mcrouter/lib/carbon/CarbonProtocolReader.h>"

namespace cpp2 facebook.memcache.test.thrift
namespace py3 facebook.memcache.test.thrift

struct ManyFields {
  1: binary (cpp.type = "folly::IOBuf") buf1
  2: binary (cpp.type = "folly::IOBuf") buf2
  3: binary (cpp.type = "folly::IOBuf") buf3
  4: binary (cpp.type = "folly::IOBuf") buf4
  5: binary (cpp.type = "folly::IOBuf") buf5
  6: binary (cpp.type = "folly::IOBuf") buf6
  7: binary (cpp.type = "folly::IOBuf") buf7
  8: binary (cpp.type = "folly::IOBuf") buf8
  9: binary (cpp.type = "folly::IOBuf") buf9
  10: binary (cpp.type = "folly::IOBuf") buf10
  11: binary (cpp.type = "folly::IOBuf") buf11
  12: binary (cpp.type = "folly::IOBuf") buf12
  13: binary (cpp.type = "folly::IOBuf") buf13
  14: binary (cpp.type = "folly::IOBuf") buf14
  15: binary (cpp.type = "folly::IOBuf") buf15
  16: binary (cpp.type = "folly::IOBuf") buf16
  17: binary (cpp.type = "folly::IOBuf") buf17
  18: binary (cpp.type = "folly::IOBuf") buf18
  19: binary (cpp.type = "folly::IOBuf") buf19
  20: binary (cpp.type = "folly::IOBuf") buf20
  21: binary (cpp.type = "folly::IOBuf") buf21
  22: binary (cpp.type = "folly::IOBuf") buf22
  23: binary (cpp.type = "folly::IOBuf") buf23
  24: binary (cpp.type = "folly::IOBuf") buf24
  25: binary (cpp.type = "folly::IOBuf") buf25
  26: binary (cpp.type = "folly::IOBuf") buf26
  27: binary (cpp.type = "folly::IOBuf") buf27
  28: binary (cpp.type = "folly::IOBuf") buf28
  29: binary (cpp.type = "folly::IOBuf") buf29
  30: binary (cpp.type = "folly::IOBuf") buf30
  31: binary (cpp.type = "folly::IOBuf") buf31
  32: binary (cpp.type = "folly::IOBuf") buf32
  33: binary (cpp.type = "folly::IOBuf") buf33
  34: binary (cpp.type = "folly::IOBuf") buf34
  35: binary (cpp.type = "folly::IOBuf") buf35
  36: binary (cpp.type = "folly::IOBuf") buf36
  37: binary (cpp.type = "folly::IOBuf") buf37
  38: binary (cpp.type = "folly::IOBuf") buf38
  39: binary (cpp.type = "folly::IOBuf") buf39
  40: binary (cpp.type = "folly::IOBuf") buf40
}(cpp.methods = "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

")
struct McExpTestRequest {
  1: carbon.IOBufKey key
  2: i64 (cpp.type = "uint64_t") flags
  3: i64 (cpp.type = "uint64_t") deadlineMs
}(cpp.methods = "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

")
