/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/terse_write/src/deprecated_terse_write.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/terse_write/gen-cpp2/deprecated_terse_write_types.h"
#include "thrift/compiler/test/fixtures/terse_write/gen-cpp2/deprecated_terse_write_types_custom_protocol.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/terse_write/gen-cpp2/deprecated_terse_write_data.h"
[[maybe_unused]] static constexpr std::string_view kModuleName = "deprecated_terse_write";


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::facebook::thrift::test::terse_write::deprecated::MyEnum>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::facebook::thrift::test::terse_write::deprecated::MyEnum const*> const TEnumTraits<::facebook::thrift::test::terse_write::deprecated::MyEnum>::values = folly::range(TEnumDataStorage<::facebook::thrift::test::terse_write::deprecated::MyEnum>::values);
folly::Range<std::string_view const*> const TEnumTraits<::facebook::thrift::test::terse_write::deprecated::MyEnum>::names = folly::range(TEnumDataStorage<::facebook::thrift::test::terse_write::deprecated::MyEnum>::names);

bool TEnumTraits<::facebook::thrift::test::terse_write::deprecated::MyEnum>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::thrift::test::terse_write::deprecated::MyEnum>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::terse_write::deprecated::MyStruct>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::terse_write::deprecated::MyStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace facebook::thrift::test::terse_write::deprecated {

std::string_view MyStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/terse_write/deprecated/MyStruct";
}

std::string_view MyStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStruct>::name;
}


MyStruct::MyStruct(apache::thrift::FragileConstructor) {}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void MyStruct::__fbthrift_clear() {
  // clear all fields
}

void MyStruct::__fbthrift_clear_terse_fields() {
}

bool MyStruct::__fbthrift_is_empty() const {
  return true;
}

bool MyStruct::operator==([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStruct::operator<([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyStruct& a, [[maybe_unused]] MyStruct& b) {
  using ::std::swap;
}



} // namespace facebook::thrift::test::terse_write::deprecated

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::terse_write::deprecated::MyUnion>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::terse_write::deprecated::MyUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace apache { namespace thrift {

folly::Range<::facebook::thrift::test::terse_write::deprecated::MyUnion::Type const*> const TEnumTraits<::facebook::thrift::test::terse_write::deprecated::MyUnion::Type>::values = folly::range(TEnumDataStorage<::facebook::thrift::test::terse_write::deprecated::MyUnion::Type>::values);
folly::Range<std::string_view const*> const TEnumTraits<::facebook::thrift::test::terse_write::deprecated::MyUnion::Type>::names = folly::range(TEnumDataStorage<::facebook::thrift::test::terse_write::deprecated::MyUnion::Type>::names);

bool TEnumTraits<::facebook::thrift::test::terse_write::deprecated::MyUnion::Type>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::facebook::thrift::test::terse_write::deprecated::MyUnion::Type>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace facebook::thrift::test::terse_write::deprecated {

std::string_view MyUnion::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/terse_write/deprecated/MyUnion";
}

std::string_view MyUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnion>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyUnion>::name;
}

void MyUnion::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    default:
      assert(false);
      break;
  }
}

void MyUnion::__fbthrift_clear() {
  __fbthrift_destruct();
  fbthrift_type_ = folly::to_underlying(Type::__EMPTY__);
}


bool MyUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  MyUnion::MyUnion(const MyUnion& rhs)
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      default:
        assert(false);
    }
  }

    MyUnion&MyUnion::operator=(const MyUnion& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }


bool MyUnion::operator==(const MyUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool MyUnion::operator<([[maybe_unused]] const MyUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionLessThan{}(*this, rhs);
}

void swap(MyUnion& a, MyUnion& b) {
  MyUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}



} // namespace facebook::thrift::test::terse_write::deprecated

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::terse_write::deprecated::StructLevelTerseStruct>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::terse_write::deprecated::StructLevelTerseStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace facebook::thrift::test::terse_write::deprecated {

std::string_view StructLevelTerseStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/terse_write/deprecated/StructLevelTerseStruct";
}

std::string_view StructLevelTerseStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StructLevelTerseStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view StructLevelTerseStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StructLevelTerseStruct>::name;
}

StructLevelTerseStruct::StructLevelTerseStruct(const StructLevelTerseStruct&) = default;
StructLevelTerseStruct& StructLevelTerseStruct::operator=(const StructLevelTerseStruct&) = default;
StructLevelTerseStruct::StructLevelTerseStruct() :
    __fbthrift_field_bool_field(),
    __fbthrift_field_byte_field(),
    __fbthrift_field_short_field(),
    __fbthrift_field_int_field(),
    __fbthrift_field_long_field(),
    __fbthrift_field_float_field(),
    __fbthrift_field_double_field(),
    __fbthrift_field_enum_field() {
}


StructLevelTerseStruct::~StructLevelTerseStruct() {}

StructLevelTerseStruct::StructLevelTerseStruct([[maybe_unused]] StructLevelTerseStruct&& other) noexcept :
    __fbthrift_field_bool_field(std::move(other.__fbthrift_field_bool_field)),
    __fbthrift_field_byte_field(std::move(other.__fbthrift_field_byte_field)),
    __fbthrift_field_short_field(std::move(other.__fbthrift_field_short_field)),
    __fbthrift_field_int_field(std::move(other.__fbthrift_field_int_field)),
    __fbthrift_field_long_field(std::move(other.__fbthrift_field_long_field)),
    __fbthrift_field_float_field(std::move(other.__fbthrift_field_float_field)),
    __fbthrift_field_double_field(std::move(other.__fbthrift_field_double_field)),
    __fbthrift_field_string_field(std::move(other.__fbthrift_field_string_field)),
    __fbthrift_field_binary_field(std::move(other.__fbthrift_field_binary_field)),
    __fbthrift_field_enum_field(std::move(other.__fbthrift_field_enum_field)),
    __fbthrift_field_list_field(std::move(other.__fbthrift_field_list_field)),
    __fbthrift_field_set_field(std::move(other.__fbthrift_field_set_field)),
    __fbthrift_field_map_field(std::move(other.__fbthrift_field_map_field)),
    __fbthrift_field_struct_field(std::move(other.__fbthrift_field_struct_field)),
    __fbthrift_field_union_field(std::move(other.__fbthrift_field_union_field)) {
}

StructLevelTerseStruct& StructLevelTerseStruct::operator=([[maybe_unused]] StructLevelTerseStruct&& other) noexcept {
    this->__fbthrift_field_bool_field = std::move(other.__fbthrift_field_bool_field);
    this->__fbthrift_field_byte_field = std::move(other.__fbthrift_field_byte_field);
    this->__fbthrift_field_short_field = std::move(other.__fbthrift_field_short_field);
    this->__fbthrift_field_int_field = std::move(other.__fbthrift_field_int_field);
    this->__fbthrift_field_long_field = std::move(other.__fbthrift_field_long_field);
    this->__fbthrift_field_float_field = std::move(other.__fbthrift_field_float_field);
    this->__fbthrift_field_double_field = std::move(other.__fbthrift_field_double_field);
    this->__fbthrift_field_string_field = std::move(other.__fbthrift_field_string_field);
    this->__fbthrift_field_binary_field = std::move(other.__fbthrift_field_binary_field);
    this->__fbthrift_field_enum_field = std::move(other.__fbthrift_field_enum_field);
    this->__fbthrift_field_list_field = std::move(other.__fbthrift_field_list_field);
    this->__fbthrift_field_set_field = std::move(other.__fbthrift_field_set_field);
    this->__fbthrift_field_map_field = std::move(other.__fbthrift_field_map_field);
    this->__fbthrift_field_struct_field = std::move(other.__fbthrift_field_struct_field);
    this->__fbthrift_field_union_field = std::move(other.__fbthrift_field_union_field);
    return *this;
}


StructLevelTerseStruct::StructLevelTerseStruct(apache::thrift::FragileConstructor, bool bool_field__arg, ::std::int8_t byte_field__arg, ::std::int16_t short_field__arg, ::std::int32_t int_field__arg, ::std::int64_t long_field__arg, float float_field__arg, double double_field__arg, ::std::string string_field__arg, ::std::string binary_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyEnum enum_field__arg, ::std::vector<::std::int16_t> list_field__arg, ::std::set<::std::int16_t> set_field__arg, ::std::map<::std::int16_t, ::std::int16_t> map_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyStruct struct_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyUnion union_field__arg) :
    __fbthrift_field_bool_field(std::move(bool_field__arg)),
    __fbthrift_field_byte_field(std::move(byte_field__arg)),
    __fbthrift_field_short_field(std::move(short_field__arg)),
    __fbthrift_field_int_field(std::move(int_field__arg)),
    __fbthrift_field_long_field(std::move(long_field__arg)),
    __fbthrift_field_float_field(std::move(float_field__arg)),
    __fbthrift_field_double_field(std::move(double_field__arg)),
    __fbthrift_field_string_field(std::move(string_field__arg)),
    __fbthrift_field_binary_field(std::move(binary_field__arg)),
    __fbthrift_field_enum_field(std::move(enum_field__arg)),
    __fbthrift_field_list_field(std::move(list_field__arg)),
    __fbthrift_field_set_field(std::move(set_field__arg)),
    __fbthrift_field_map_field(std::move(map_field__arg)),
    __fbthrift_field_struct_field(std::move(struct_field__arg)),
    __fbthrift_field_union_field(std::move(union_field__arg)) { 
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void StructLevelTerseStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_bool_field = bool();
  this->__fbthrift_field_byte_field = ::std::int8_t();
  this->__fbthrift_field_short_field = ::std::int16_t();
  this->__fbthrift_field_int_field = ::std::int32_t();
  this->__fbthrift_field_long_field = ::std::int64_t();
  this->__fbthrift_field_float_field = float();
  this->__fbthrift_field_double_field = double();
  this->__fbthrift_field_string_field = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_binary_field = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_enum_field = ::facebook::thrift::test::terse_write::deprecated::MyEnum();
  this->__fbthrift_field_list_field.clear();
  this->__fbthrift_field_set_field.clear();
  this->__fbthrift_field_map_field.clear();
}

void StructLevelTerseStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_bool_field = bool();
  this->__fbthrift_field_byte_field = ::std::int8_t();
  this->__fbthrift_field_short_field = ::std::int16_t();
  this->__fbthrift_field_int_field = ::std::int32_t();
  this->__fbthrift_field_long_field = ::std::int64_t();
  this->__fbthrift_field_float_field = float();
  this->__fbthrift_field_double_field = double();
  this->__fbthrift_field_string_field = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_binary_field = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_enum_field = ::facebook::thrift::test::terse_write::deprecated::MyEnum();
  this->__fbthrift_field_list_field.clear();
  this->__fbthrift_field_set_field.clear();
  this->__fbthrift_field_map_field.clear();
}

bool StructLevelTerseStruct::__fbthrift_is_empty() const {
  return ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_bool_field) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::byte_t>(this->__fbthrift_field_byte_field) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::i16_t>(this->__fbthrift_field_short_field) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::i32_t>(this->__fbthrift_field_int_field) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::i64_t>(this->__fbthrift_field_long_field) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::float_t>(this->__fbthrift_field_float_field) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::double_t>(this->__fbthrift_field_double_field) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::string_t>(this->__fbthrift_field_string_field) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::binary_t>(this->__fbthrift_field_binary_field) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::enum_t<::facebook::thrift::test::terse_write::deprecated::MyEnum>>(this->__fbthrift_field_enum_field) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::i16_t>>(this->__fbthrift_field_list_field) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::set<::apache::thrift::type::i16_t>>(this->__fbthrift_field_set_field) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i16_t>>(this->__fbthrift_field_map_field) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::facebook::thrift::test::terse_write::deprecated::MyStruct>>(this->__fbthrift_field_struct_field) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::union_t<::facebook::thrift::test::terse_write::deprecated::MyUnion>>(this->__fbthrift_field_union_field);
}

bool StructLevelTerseStruct::operator==([[maybe_unused]] const StructLevelTerseStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool StructLevelTerseStruct::operator<([[maybe_unused]] const StructLevelTerseStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] StructLevelTerseStruct& a, [[maybe_unused]] StructLevelTerseStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_bool_field, b.__fbthrift_field_bool_field);
  swap(a.__fbthrift_field_byte_field, b.__fbthrift_field_byte_field);
  swap(a.__fbthrift_field_short_field, b.__fbthrift_field_short_field);
  swap(a.__fbthrift_field_int_field, b.__fbthrift_field_int_field);
  swap(a.__fbthrift_field_long_field, b.__fbthrift_field_long_field);
  swap(a.__fbthrift_field_float_field, b.__fbthrift_field_float_field);
  swap(a.__fbthrift_field_double_field, b.__fbthrift_field_double_field);
  swap(a.__fbthrift_field_string_field, b.__fbthrift_field_string_field);
  swap(a.__fbthrift_field_binary_field, b.__fbthrift_field_binary_field);
  swap(a.__fbthrift_field_enum_field, b.__fbthrift_field_enum_field);
  swap(a.__fbthrift_field_list_field, b.__fbthrift_field_list_field);
  swap(a.__fbthrift_field_set_field, b.__fbthrift_field_set_field);
  swap(a.__fbthrift_field_map_field, b.__fbthrift_field_map_field);
  swap(a.__fbthrift_field_struct_field, b.__fbthrift_field_struct_field);
  swap(a.__fbthrift_field_union_field, b.__fbthrift_field_union_field);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructLevelTerseStruct,
        ::apache::thrift::type_class::structure,
        ::facebook::thrift::test::terse_write::deprecated::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        StructLevelTerseStruct,
        ::apache::thrift::type_class::variant,
        ::facebook::thrift::test::terse_write::deprecated::MyUnion>,
    "inconsistent use of json option");

} // namespace facebook::thrift::test::terse_write::deprecated

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::terse_write::deprecated::FieldLevelTerseStruct>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::terse_write::deprecated::FieldLevelTerseStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace facebook::thrift::test::terse_write::deprecated {

std::string_view FieldLevelTerseStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/terse_write/deprecated/FieldLevelTerseStruct";
}

std::string_view FieldLevelTerseStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<FieldLevelTerseStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view FieldLevelTerseStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<FieldLevelTerseStruct>::name;
}

FieldLevelTerseStruct::FieldLevelTerseStruct(const FieldLevelTerseStruct&) = default;
FieldLevelTerseStruct& FieldLevelTerseStruct::operator=(const FieldLevelTerseStruct&) = default;
FieldLevelTerseStruct::FieldLevelTerseStruct() :
    __fbthrift_field_terse_bool_field(),
    __fbthrift_field_terse_byte_field(),
    __fbthrift_field_terse_short_field(),
    __fbthrift_field_terse_int_field(),
    __fbthrift_field_terse_long_field(),
    __fbthrift_field_terse_float_field(),
    __fbthrift_field_terse_double_field(),
    __fbthrift_field_terse_enum_field(),
    __fbthrift_field_bool_field(),
    __fbthrift_field_byte_field(),
    __fbthrift_field_short_field(),
    __fbthrift_field_int_field(),
    __fbthrift_field_long_field(),
    __fbthrift_field_float_field(),
    __fbthrift_field_double_field(),
    __fbthrift_field_enum_field(),
    __fbthrift_field_iobuf_ptr_field() {
}


FieldLevelTerseStruct::~FieldLevelTerseStruct() {}

FieldLevelTerseStruct::FieldLevelTerseStruct([[maybe_unused]] FieldLevelTerseStruct&& other) noexcept :
    __fbthrift_field_terse_bool_field(std::move(other.__fbthrift_field_terse_bool_field)),
    __fbthrift_field_terse_byte_field(std::move(other.__fbthrift_field_terse_byte_field)),
    __fbthrift_field_terse_short_field(std::move(other.__fbthrift_field_terse_short_field)),
    __fbthrift_field_terse_int_field(std::move(other.__fbthrift_field_terse_int_field)),
    __fbthrift_field_terse_long_field(std::move(other.__fbthrift_field_terse_long_field)),
    __fbthrift_field_terse_float_field(std::move(other.__fbthrift_field_terse_float_field)),
    __fbthrift_field_terse_double_field(std::move(other.__fbthrift_field_terse_double_field)),
    __fbthrift_field_terse_string_field(std::move(other.__fbthrift_field_terse_string_field)),
    __fbthrift_field_terse_binary_field(std::move(other.__fbthrift_field_terse_binary_field)),
    __fbthrift_field_terse_enum_field(std::move(other.__fbthrift_field_terse_enum_field)),
    __fbthrift_field_terse_list_field(std::move(other.__fbthrift_field_terse_list_field)),
    __fbthrift_field_terse_set_field(std::move(other.__fbthrift_field_terse_set_field)),
    __fbthrift_field_terse_map_field(std::move(other.__fbthrift_field_terse_map_field)),
    __fbthrift_field_terse_struct_field(std::move(other.__fbthrift_field_terse_struct_field)),
    __fbthrift_field_bool_field(std::move(other.__fbthrift_field_bool_field)),
    __fbthrift_field_byte_field(std::move(other.__fbthrift_field_byte_field)),
    __fbthrift_field_short_field(std::move(other.__fbthrift_field_short_field)),
    __fbthrift_field_int_field(std::move(other.__fbthrift_field_int_field)),
    __fbthrift_field_long_field(std::move(other.__fbthrift_field_long_field)),
    __fbthrift_field_float_field(std::move(other.__fbthrift_field_float_field)),
    __fbthrift_field_double_field(std::move(other.__fbthrift_field_double_field)),
    __fbthrift_field_string_field(std::move(other.__fbthrift_field_string_field)),
    __fbthrift_field_binary_field(std::move(other.__fbthrift_field_binary_field)),
    __fbthrift_field_enum_field(std::move(other.__fbthrift_field_enum_field)),
    __fbthrift_field_list_field(std::move(other.__fbthrift_field_list_field)),
    __fbthrift_field_set_field(std::move(other.__fbthrift_field_set_field)),
    __fbthrift_field_map_field(std::move(other.__fbthrift_field_map_field)),
    __fbthrift_field_struct_field(std::move(other.__fbthrift_field_struct_field)),
    __fbthrift_field_union_field(std::move(other.__fbthrift_field_union_field)),
    __fbthrift_field_iobuf_ptr_field(std::move(other.__fbthrift_field_iobuf_ptr_field)),
    __isset(other.__isset) {
}

FieldLevelTerseStruct& FieldLevelTerseStruct::operator=([[maybe_unused]] FieldLevelTerseStruct&& other) noexcept {
    this->__fbthrift_field_terse_bool_field = std::move(other.__fbthrift_field_terse_bool_field);
    this->__fbthrift_field_terse_byte_field = std::move(other.__fbthrift_field_terse_byte_field);
    this->__fbthrift_field_terse_short_field = std::move(other.__fbthrift_field_terse_short_field);
    this->__fbthrift_field_terse_int_field = std::move(other.__fbthrift_field_terse_int_field);
    this->__fbthrift_field_terse_long_field = std::move(other.__fbthrift_field_terse_long_field);
    this->__fbthrift_field_terse_float_field = std::move(other.__fbthrift_field_terse_float_field);
    this->__fbthrift_field_terse_double_field = std::move(other.__fbthrift_field_terse_double_field);
    this->__fbthrift_field_terse_string_field = std::move(other.__fbthrift_field_terse_string_field);
    this->__fbthrift_field_terse_binary_field = std::move(other.__fbthrift_field_terse_binary_field);
    this->__fbthrift_field_terse_enum_field = std::move(other.__fbthrift_field_terse_enum_field);
    this->__fbthrift_field_terse_list_field = std::move(other.__fbthrift_field_terse_list_field);
    this->__fbthrift_field_terse_set_field = std::move(other.__fbthrift_field_terse_set_field);
    this->__fbthrift_field_terse_map_field = std::move(other.__fbthrift_field_terse_map_field);
    this->__fbthrift_field_terse_struct_field = std::move(other.__fbthrift_field_terse_struct_field);
    this->__fbthrift_field_bool_field = std::move(other.__fbthrift_field_bool_field);
    this->__fbthrift_field_byte_field = std::move(other.__fbthrift_field_byte_field);
    this->__fbthrift_field_short_field = std::move(other.__fbthrift_field_short_field);
    this->__fbthrift_field_int_field = std::move(other.__fbthrift_field_int_field);
    this->__fbthrift_field_long_field = std::move(other.__fbthrift_field_long_field);
    this->__fbthrift_field_float_field = std::move(other.__fbthrift_field_float_field);
    this->__fbthrift_field_double_field = std::move(other.__fbthrift_field_double_field);
    this->__fbthrift_field_string_field = std::move(other.__fbthrift_field_string_field);
    this->__fbthrift_field_binary_field = std::move(other.__fbthrift_field_binary_field);
    this->__fbthrift_field_enum_field = std::move(other.__fbthrift_field_enum_field);
    this->__fbthrift_field_list_field = std::move(other.__fbthrift_field_list_field);
    this->__fbthrift_field_set_field = std::move(other.__fbthrift_field_set_field);
    this->__fbthrift_field_map_field = std::move(other.__fbthrift_field_map_field);
    this->__fbthrift_field_struct_field = std::move(other.__fbthrift_field_struct_field);
    this->__fbthrift_field_union_field = std::move(other.__fbthrift_field_union_field);
    this->__fbthrift_field_iobuf_ptr_field = std::move(other.__fbthrift_field_iobuf_ptr_field);
    __isset = other.__isset;
    return *this;
}


FieldLevelTerseStruct::FieldLevelTerseStruct(apache::thrift::FragileConstructor, bool terse_bool_field__arg, ::std::int8_t terse_byte_field__arg, ::std::int16_t terse_short_field__arg, ::std::int32_t terse_int_field__arg, ::std::int64_t terse_long_field__arg, float terse_float_field__arg, double terse_double_field__arg, ::std::string terse_string_field__arg, ::std::string terse_binary_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyEnum terse_enum_field__arg, ::std::vector<::std::int16_t> terse_list_field__arg, ::std::set<::std::int16_t> terse_set_field__arg, ::std::map<::std::int16_t, ::std::int16_t> terse_map_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyStruct terse_struct_field__arg, bool bool_field__arg, ::std::int8_t byte_field__arg, ::std::int16_t short_field__arg, ::std::int32_t int_field__arg, ::std::int64_t long_field__arg, float float_field__arg, double double_field__arg, ::std::string string_field__arg, ::std::string binary_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyEnum enum_field__arg, ::std::vector<::std::int16_t> list_field__arg, ::std::set<::std::int16_t> set_field__arg, ::std::map<::std::int16_t, ::std::int16_t> map_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyStruct struct_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyUnion union_field__arg, std::unique_ptr<folly::IOBuf> iobuf_ptr_field__arg) :
    __fbthrift_field_terse_bool_field(std::move(terse_bool_field__arg)),
    __fbthrift_field_terse_byte_field(std::move(terse_byte_field__arg)),
    __fbthrift_field_terse_short_field(std::move(terse_short_field__arg)),
    __fbthrift_field_terse_int_field(std::move(terse_int_field__arg)),
    __fbthrift_field_terse_long_field(std::move(terse_long_field__arg)),
    __fbthrift_field_terse_float_field(std::move(terse_float_field__arg)),
    __fbthrift_field_terse_double_field(std::move(terse_double_field__arg)),
    __fbthrift_field_terse_string_field(std::move(terse_string_field__arg)),
    __fbthrift_field_terse_binary_field(std::move(terse_binary_field__arg)),
    __fbthrift_field_terse_enum_field(std::move(terse_enum_field__arg)),
    __fbthrift_field_terse_list_field(std::move(terse_list_field__arg)),
    __fbthrift_field_terse_set_field(std::move(terse_set_field__arg)),
    __fbthrift_field_terse_map_field(std::move(terse_map_field__arg)),
    __fbthrift_field_terse_struct_field(std::move(terse_struct_field__arg)),
    __fbthrift_field_bool_field(std::move(bool_field__arg)),
    __fbthrift_field_byte_field(std::move(byte_field__arg)),
    __fbthrift_field_short_field(std::move(short_field__arg)),
    __fbthrift_field_int_field(std::move(int_field__arg)),
    __fbthrift_field_long_field(std::move(long_field__arg)),
    __fbthrift_field_float_field(std::move(float_field__arg)),
    __fbthrift_field_double_field(std::move(double_field__arg)),
    __fbthrift_field_string_field(std::move(string_field__arg)),
    __fbthrift_field_binary_field(std::move(binary_field__arg)),
    __fbthrift_field_enum_field(std::move(enum_field__arg)),
    __fbthrift_field_list_field(std::move(list_field__arg)),
    __fbthrift_field_set_field(std::move(set_field__arg)),
    __fbthrift_field_map_field(std::move(map_field__arg)),
    __fbthrift_field_struct_field(std::move(struct_field__arg)),
    __fbthrift_field_union_field(std::move(union_field__arg)),
    __fbthrift_field_iobuf_ptr_field(std::move(iobuf_ptr_field__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void FieldLevelTerseStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_terse_bool_field = bool();
  this->__fbthrift_field_terse_byte_field = ::std::int8_t();
  this->__fbthrift_field_terse_short_field = ::std::int16_t();
  this->__fbthrift_field_terse_int_field = ::std::int32_t();
  this->__fbthrift_field_terse_long_field = ::std::int64_t();
  this->__fbthrift_field_terse_float_field = float();
  this->__fbthrift_field_terse_double_field = double();
  this->__fbthrift_field_terse_string_field = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_terse_binary_field = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_terse_enum_field = ::facebook::thrift::test::terse_write::deprecated::MyEnum();
  this->__fbthrift_field_terse_list_field.clear();
  this->__fbthrift_field_terse_set_field.clear();
  this->__fbthrift_field_terse_map_field.clear();
  this->__fbthrift_field_bool_field = bool();
  this->__fbthrift_field_byte_field = ::std::int8_t();
  this->__fbthrift_field_short_field = ::std::int16_t();
  this->__fbthrift_field_int_field = ::std::int32_t();
  this->__fbthrift_field_long_field = ::std::int64_t();
  this->__fbthrift_field_float_field = float();
  this->__fbthrift_field_double_field = double();
  this->__fbthrift_field_string_field = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_binary_field = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_enum_field = ::facebook::thrift::test::terse_write::deprecated::MyEnum();
  this->__fbthrift_field_list_field.clear();
  this->__fbthrift_field_set_field.clear();
  this->__fbthrift_field_map_field.clear();
  this->__fbthrift_field_iobuf_ptr_field = std::unique_ptr<folly::IOBuf>();
  __isset = {};
}

void FieldLevelTerseStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_terse_bool_field = bool();
  this->__fbthrift_field_terse_byte_field = ::std::int8_t();
  this->__fbthrift_field_terse_short_field = ::std::int16_t();
  this->__fbthrift_field_terse_int_field = ::std::int32_t();
  this->__fbthrift_field_terse_long_field = ::std::int64_t();
  this->__fbthrift_field_terse_float_field = float();
  this->__fbthrift_field_terse_double_field = double();
  this->__fbthrift_field_terse_string_field = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_terse_binary_field = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_terse_enum_field = ::facebook::thrift::test::terse_write::deprecated::MyEnum();
  this->__fbthrift_field_terse_list_field.clear();
  this->__fbthrift_field_terse_set_field.clear();
  this->__fbthrift_field_terse_map_field.clear();
}

bool FieldLevelTerseStruct::__fbthrift_is_empty() const {
  return false;
}

bool FieldLevelTerseStruct::operator==([[maybe_unused]] const FieldLevelTerseStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool FieldLevelTerseStruct::operator<([[maybe_unused]] const FieldLevelTerseStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


bool FieldLevelTerseStruct::get_bool_field() const {
  return __fbthrift_field_bool_field;
}

bool& FieldLevelTerseStruct::set_bool_field(bool bool_field_) {
  bool_field_ref() = bool_field_;
  return __fbthrift_field_bool_field;
}

::std::int8_t FieldLevelTerseStruct::get_byte_field() const {
  return __fbthrift_field_byte_field;
}

::std::int8_t& FieldLevelTerseStruct::set_byte_field(::std::int8_t byte_field_) {
  byte_field_ref() = byte_field_;
  return __fbthrift_field_byte_field;
}

::std::int16_t FieldLevelTerseStruct::get_short_field() const {
  return __fbthrift_field_short_field;
}

::std::int16_t& FieldLevelTerseStruct::set_short_field(::std::int16_t short_field_) {
  short_field_ref() = short_field_;
  return __fbthrift_field_short_field;
}

::std::int32_t FieldLevelTerseStruct::get_int_field() const {
  return __fbthrift_field_int_field;
}

::std::int32_t& FieldLevelTerseStruct::set_int_field(::std::int32_t int_field_) {
  int_field_ref() = int_field_;
  return __fbthrift_field_int_field;
}

::std::int64_t FieldLevelTerseStruct::get_long_field() const {
  return __fbthrift_field_long_field;
}

::std::int64_t& FieldLevelTerseStruct::set_long_field(::std::int64_t long_field_) {
  long_field_ref() = long_field_;
  return __fbthrift_field_long_field;
}

float FieldLevelTerseStruct::get_float_field() const {
  return __fbthrift_field_float_field;
}

float& FieldLevelTerseStruct::set_float_field(float float_field_) {
  float_field_ref() = float_field_;
  return __fbthrift_field_float_field;
}

double FieldLevelTerseStruct::get_double_field() const {
  return __fbthrift_field_double_field;
}

double& FieldLevelTerseStruct::set_double_field(double double_field_) {
  double_field_ref() = double_field_;
  return __fbthrift_field_double_field;
}

::facebook::thrift::test::terse_write::deprecated::MyEnum FieldLevelTerseStruct::get_enum_field() const {
  return __fbthrift_field_enum_field;
}

::facebook::thrift::test::terse_write::deprecated::MyEnum& FieldLevelTerseStruct::set_enum_field(::facebook::thrift::test::terse_write::deprecated::MyEnum enum_field_) {
  enum_field_ref() = enum_field_;
  return __fbthrift_field_enum_field;
}

const ::std::vector<::std::int16_t>& FieldLevelTerseStruct::get_list_field() const& {
  return __fbthrift_field_list_field;
}

::std::vector<::std::int16_t> FieldLevelTerseStruct::get_list_field() && {
  return static_cast<::std::vector<::std::int16_t>&&>(__fbthrift_field_list_field);
}

const ::std::set<::std::int16_t>& FieldLevelTerseStruct::get_set_field() const& {
  return __fbthrift_field_set_field;
}

::std::set<::std::int16_t> FieldLevelTerseStruct::get_set_field() && {
  return static_cast<::std::set<::std::int16_t>&&>(__fbthrift_field_set_field);
}

const ::std::map<::std::int16_t, ::std::int16_t>& FieldLevelTerseStruct::get_map_field() const& {
  return __fbthrift_field_map_field;
}

::std::map<::std::int16_t, ::std::int16_t> FieldLevelTerseStruct::get_map_field() && {
  return static_cast<::std::map<::std::int16_t, ::std::int16_t>&&>(__fbthrift_field_map_field);
}

const ::facebook::thrift::test::terse_write::deprecated::MyStruct& FieldLevelTerseStruct::get_struct_field() const& {
  return __fbthrift_field_struct_field;
}

::facebook::thrift::test::terse_write::deprecated::MyStruct FieldLevelTerseStruct::get_struct_field() && {
  return static_cast<::facebook::thrift::test::terse_write::deprecated::MyStruct&&>(__fbthrift_field_struct_field);
}

const ::facebook::thrift::test::terse_write::deprecated::MyUnion& FieldLevelTerseStruct::get_union_field() const& {
  return __fbthrift_field_union_field;
}

::facebook::thrift::test::terse_write::deprecated::MyUnion FieldLevelTerseStruct::get_union_field() && {
  return static_cast<::facebook::thrift::test::terse_write::deprecated::MyUnion&&>(__fbthrift_field_union_field);
}

std::unique_ptr<folly::IOBuf> FieldLevelTerseStruct::get_iobuf_ptr_field() const {
  return __fbthrift_field_iobuf_ptr_field;
}

std::unique_ptr<folly::IOBuf>& FieldLevelTerseStruct::set_iobuf_ptr_field(std::unique_ptr<folly::IOBuf> iobuf_ptr_field_) {
  iobuf_ptr_field_ref() = iobuf_ptr_field_;
  return __fbthrift_field_iobuf_ptr_field;
}

void swap([[maybe_unused]] FieldLevelTerseStruct& a, [[maybe_unused]] FieldLevelTerseStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_terse_bool_field, b.__fbthrift_field_terse_bool_field);
  swap(a.__fbthrift_field_terse_byte_field, b.__fbthrift_field_terse_byte_field);
  swap(a.__fbthrift_field_terse_short_field, b.__fbthrift_field_terse_short_field);
  swap(a.__fbthrift_field_terse_int_field, b.__fbthrift_field_terse_int_field);
  swap(a.__fbthrift_field_terse_long_field, b.__fbthrift_field_terse_long_field);
  swap(a.__fbthrift_field_terse_float_field, b.__fbthrift_field_terse_float_field);
  swap(a.__fbthrift_field_terse_double_field, b.__fbthrift_field_terse_double_field);
  swap(a.__fbthrift_field_terse_string_field, b.__fbthrift_field_terse_string_field);
  swap(a.__fbthrift_field_terse_binary_field, b.__fbthrift_field_terse_binary_field);
  swap(a.__fbthrift_field_terse_enum_field, b.__fbthrift_field_terse_enum_field);
  swap(a.__fbthrift_field_terse_list_field, b.__fbthrift_field_terse_list_field);
  swap(a.__fbthrift_field_terse_set_field, b.__fbthrift_field_terse_set_field);
  swap(a.__fbthrift_field_terse_map_field, b.__fbthrift_field_terse_map_field);
  swap(a.__fbthrift_field_terse_struct_field, b.__fbthrift_field_terse_struct_field);
  swap(a.__fbthrift_field_bool_field, b.__fbthrift_field_bool_field);
  swap(a.__fbthrift_field_byte_field, b.__fbthrift_field_byte_field);
  swap(a.__fbthrift_field_short_field, b.__fbthrift_field_short_field);
  swap(a.__fbthrift_field_int_field, b.__fbthrift_field_int_field);
  swap(a.__fbthrift_field_long_field, b.__fbthrift_field_long_field);
  swap(a.__fbthrift_field_float_field, b.__fbthrift_field_float_field);
  swap(a.__fbthrift_field_double_field, b.__fbthrift_field_double_field);
  swap(a.__fbthrift_field_string_field, b.__fbthrift_field_string_field);
  swap(a.__fbthrift_field_binary_field, b.__fbthrift_field_binary_field);
  swap(a.__fbthrift_field_enum_field, b.__fbthrift_field_enum_field);
  swap(a.__fbthrift_field_list_field, b.__fbthrift_field_list_field);
  swap(a.__fbthrift_field_set_field, b.__fbthrift_field_set_field);
  swap(a.__fbthrift_field_map_field, b.__fbthrift_field_map_field);
  swap(a.__fbthrift_field_struct_field, b.__fbthrift_field_struct_field);
  swap(a.__fbthrift_field_union_field, b.__fbthrift_field_union_field);
  swap(a.__fbthrift_field_iobuf_ptr_field, b.__fbthrift_field_iobuf_ptr_field);
  swap(a.__isset, b.__isset);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        FieldLevelTerseStruct,
        ::apache::thrift::type_class::structure,
        ::facebook::thrift::test::terse_write::deprecated::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        FieldLevelTerseStruct,
        ::apache::thrift::type_class::structure,
        ::facebook::thrift::test::terse_write::deprecated::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        FieldLevelTerseStruct,
        ::apache::thrift::type_class::variant,
        ::facebook::thrift::test::terse_write::deprecated::MyUnion>,
    "inconsistent use of json option");

} // namespace facebook::thrift::test::terse_write::deprecated

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::terse_write::deprecated::CppRefStructFields>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::terse_write::deprecated::CppRefStructFields>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace facebook::thrift::test::terse_write::deprecated {

std::string_view CppRefStructFields::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/terse_write/deprecated/CppRefStructFields";
}

std::string_view CppRefStructFields::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<CppRefStructFields>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view CppRefStructFields::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<CppRefStructFields>::name;
}

CppRefStructFields::CppRefStructFields(const CppRefStructFields& srcObj) :
    __fbthrift_field_primitive_ref_field(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::integral>(srcObj.__fbthrift_field_primitive_ref_field)),
    __fbthrift_field_struct_ref_field(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::structure>(srcObj.__fbthrift_field_struct_ref_field)) {
}

static void __fbthrift_swap(CppRefStructFields& lhs, CppRefStructFields& rhs) { swap(lhs, rhs); }
CppRefStructFields& CppRefStructFields::operator=(const CppRefStructFields& other) {
  CppRefStructFields tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

CppRefStructFields::CppRefStructFields() :
    __fbthrift_field_primitive_ref_field(std::make_unique<::std::int32_t>()),
    __fbthrift_field_struct_ref_field(std::make_unique<::facebook::thrift::test::terse_write::deprecated::MyStruct>()) {
}


CppRefStructFields::~CppRefStructFields() {}

CppRefStructFields::CppRefStructFields([[maybe_unused]] CppRefStructFields&& other) noexcept :
    __fbthrift_field_primitive_ref_field(std::move(other.__fbthrift_field_primitive_ref_field)),
    __fbthrift_field_struct_ref_field(std::move(other.__fbthrift_field_struct_ref_field)) {
}

CppRefStructFields& CppRefStructFields::operator=([[maybe_unused]] CppRefStructFields&& other) noexcept {
    this->__fbthrift_field_primitive_ref_field = std::move(other.__fbthrift_field_primitive_ref_field);
    this->__fbthrift_field_struct_ref_field = std::move(other.__fbthrift_field_struct_ref_field);
    return *this;
}


CppRefStructFields::CppRefStructFields(apache::thrift::FragileConstructor, ::std::unique_ptr<::std::int32_t> primitive_ref_field__arg, ::std::unique_ptr<::facebook::thrift::test::terse_write::deprecated::MyStruct> struct_ref_field__arg) :
    __fbthrift_field_primitive_ref_field(std::move(primitive_ref_field__arg)),
    __fbthrift_field_struct_ref_field(std::move(struct_ref_field__arg)) { 
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void CppRefStructFields::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_primitive_ref_field = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::std::int32_t>>();
}

void CppRefStructFields::__fbthrift_clear_terse_fields() {
}

bool CppRefStructFields::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_primitive_ref_field) &&
 !(this->__fbthrift_field_struct_ref_field);
}

bool CppRefStructFields::operator==([[maybe_unused]] const CppRefStructFields& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool CppRefStructFields::operator<([[maybe_unused]] const CppRefStructFields& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] CppRefStructFields& a, [[maybe_unused]] CppRefStructFields& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_primitive_ref_field, b.__fbthrift_field_primitive_ref_field);
  swap(a.__fbthrift_field_struct_ref_field, b.__fbthrift_field_struct_ref_field);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        CppRefStructFields,
        ::apache::thrift::type_class::structure,
        ::facebook::thrift::test::terse_write::deprecated::MyStruct>,
    "inconsistent use of json option");

} // namespace facebook::thrift::test::terse_write::deprecated

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithCustomDefault>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace facebook::thrift::test::terse_write::deprecated {

std::string_view DeprecatedTerseWriteWithCustomDefault::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/terse_write/deprecated/DeprecatedTerseWriteWithCustomDefault";
}

std::string_view DeprecatedTerseWriteWithCustomDefault::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<DeprecatedTerseWriteWithCustomDefault>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view DeprecatedTerseWriteWithCustomDefault::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<DeprecatedTerseWriteWithCustomDefault>::name;
}

DeprecatedTerseWriteWithCustomDefault::DeprecatedTerseWriteWithCustomDefault(const DeprecatedTerseWriteWithCustomDefault&) = default;
DeprecatedTerseWriteWithCustomDefault& DeprecatedTerseWriteWithCustomDefault::operator=(const DeprecatedTerseWriteWithCustomDefault&) = default;
DeprecatedTerseWriteWithCustomDefault::DeprecatedTerseWriteWithCustomDefault() :
    __fbthrift_field_bool_field(true),
    __fbthrift_field_byte_field(static_cast<::std::int8_t>(42)),
    __fbthrift_field_short_field(static_cast<::std::int16_t>(42)),
    __fbthrift_field_int_field(static_cast<::std::int32_t>(42)),
    __fbthrift_field_long_field(static_cast<::std::int64_t>(42)),
    __fbthrift_field_float_field(static_cast<float>(42)),
    __fbthrift_field_double_field(static_cast<double>(42)),
    __fbthrift_field_string_field(apache::thrift::StringTraits<::std::string>::fromStringLiteral("hello")),
    __fbthrift_field_binary_field(apache::thrift::StringTraits<::std::string>::fromStringLiteral("world")),
    __fbthrift_field_enum_field( ::facebook::thrift::test::terse_write::deprecated::MyEnum::ME1),
    __fbthrift_field_list_field(std::initializer_list<::std::int16_t>{ static_cast<::std::int16_t>(1) }),
    __fbthrift_field_set_field(std::initializer_list<::std::int16_t>{ static_cast<::std::int16_t>(1) }),
    __fbthrift_field_map_field(std::initializer_list<::std::map<::std::int16_t, ::std::int16_t>::value_type>{ { static_cast<::std::int16_t>(1), static_cast<::std::int16_t>(1) } }) {
}


DeprecatedTerseWriteWithCustomDefault::~DeprecatedTerseWriteWithCustomDefault() {}

DeprecatedTerseWriteWithCustomDefault::DeprecatedTerseWriteWithCustomDefault([[maybe_unused]] DeprecatedTerseWriteWithCustomDefault&& other) noexcept :
    __fbthrift_field_bool_field(std::move(other.__fbthrift_field_bool_field)),
    __fbthrift_field_byte_field(std::move(other.__fbthrift_field_byte_field)),
    __fbthrift_field_short_field(std::move(other.__fbthrift_field_short_field)),
    __fbthrift_field_int_field(std::move(other.__fbthrift_field_int_field)),
    __fbthrift_field_long_field(std::move(other.__fbthrift_field_long_field)),
    __fbthrift_field_float_field(std::move(other.__fbthrift_field_float_field)),
    __fbthrift_field_double_field(std::move(other.__fbthrift_field_double_field)),
    __fbthrift_field_string_field(std::move(other.__fbthrift_field_string_field)),
    __fbthrift_field_binary_field(std::move(other.__fbthrift_field_binary_field)),
    __fbthrift_field_enum_field(std::move(other.__fbthrift_field_enum_field)),
    __fbthrift_field_list_field(std::move(other.__fbthrift_field_list_field)),
    __fbthrift_field_set_field(std::move(other.__fbthrift_field_set_field)),
    __fbthrift_field_map_field(std::move(other.__fbthrift_field_map_field)),
    __isset(other.__isset) {
}

DeprecatedTerseWriteWithCustomDefault& DeprecatedTerseWriteWithCustomDefault::operator=([[maybe_unused]] DeprecatedTerseWriteWithCustomDefault&& other) noexcept {
    this->__fbthrift_field_bool_field = std::move(other.__fbthrift_field_bool_field);
    this->__fbthrift_field_byte_field = std::move(other.__fbthrift_field_byte_field);
    this->__fbthrift_field_short_field = std::move(other.__fbthrift_field_short_field);
    this->__fbthrift_field_int_field = std::move(other.__fbthrift_field_int_field);
    this->__fbthrift_field_long_field = std::move(other.__fbthrift_field_long_field);
    this->__fbthrift_field_float_field = std::move(other.__fbthrift_field_float_field);
    this->__fbthrift_field_double_field = std::move(other.__fbthrift_field_double_field);
    this->__fbthrift_field_string_field = std::move(other.__fbthrift_field_string_field);
    this->__fbthrift_field_binary_field = std::move(other.__fbthrift_field_binary_field);
    this->__fbthrift_field_enum_field = std::move(other.__fbthrift_field_enum_field);
    this->__fbthrift_field_list_field = std::move(other.__fbthrift_field_list_field);
    this->__fbthrift_field_set_field = std::move(other.__fbthrift_field_set_field);
    this->__fbthrift_field_map_field = std::move(other.__fbthrift_field_map_field);
    __isset = other.__isset;
    return *this;
}


DeprecatedTerseWriteWithCustomDefault::DeprecatedTerseWriteWithCustomDefault(apache::thrift::FragileConstructor, bool bool_field__arg, ::std::int8_t byte_field__arg, ::std::int16_t short_field__arg, ::std::int32_t int_field__arg, ::std::int64_t long_field__arg, float float_field__arg, double double_field__arg, ::std::string string_field__arg, ::std::string binary_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyEnum enum_field__arg, ::std::vector<::std::int16_t> list_field__arg, ::std::set<::std::int16_t> set_field__arg, ::std::map<::std::int16_t, ::std::int16_t> map_field__arg) :
    __fbthrift_field_bool_field(std::move(bool_field__arg)),
    __fbthrift_field_byte_field(std::move(byte_field__arg)),
    __fbthrift_field_short_field(std::move(short_field__arg)),
    __fbthrift_field_int_field(std::move(int_field__arg)),
    __fbthrift_field_long_field(std::move(long_field__arg)),
    __fbthrift_field_float_field(std::move(float_field__arg)),
    __fbthrift_field_double_field(std::move(double_field__arg)),
    __fbthrift_field_string_field(std::move(string_field__arg)),
    __fbthrift_field_binary_field(std::move(binary_field__arg)),
    __fbthrift_field_enum_field(std::move(enum_field__arg)),
    __fbthrift_field_list_field(std::move(list_field__arg)),
    __fbthrift_field_set_field(std::move(set_field__arg)),
    __fbthrift_field_map_field(std::move(map_field__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void DeprecatedTerseWriteWithCustomDefault::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_bool_field = bool();
  this->__fbthrift_field_byte_field = ::std::int8_t();
  this->__fbthrift_field_short_field = ::std::int16_t();
  this->__fbthrift_field_int_field = ::std::int32_t();
  this->__fbthrift_field_long_field = ::std::int64_t();
  this->__fbthrift_field_float_field = float();
  this->__fbthrift_field_double_field = double();
  this->__fbthrift_field_string_field = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_binary_field = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_enum_field = ::facebook::thrift::test::terse_write::deprecated::MyEnum();
  this->__fbthrift_field_list_field.clear();
  this->__fbthrift_field_set_field.clear();
  this->__fbthrift_field_map_field.clear();
  __isset = {};
}

void DeprecatedTerseWriteWithCustomDefault::__fbthrift_clear_terse_fields() {
}

bool DeprecatedTerseWriteWithCustomDefault::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_bool_field != true) &&
 !(this->__fbthrift_field_byte_field != static_cast<::std::int8_t>(42)) &&
 !(this->__fbthrift_field_short_field != static_cast<::std::int16_t>(42)) &&
 !(this->__fbthrift_field_int_field != static_cast<::std::int32_t>(42)) &&
 !(this->__fbthrift_field_long_field != static_cast<::std::int64_t>(42)) &&
 !(this->__fbthrift_field_float_field != static_cast<float>(42)) &&
 !(this->__fbthrift_field_double_field != static_cast<double>(42)) &&
 !(!::apache::thrift::op::isEmpty<::apache::thrift::type::string_t>(this->__fbthrift_field_string_field)) &&
 !(!::apache::thrift::op::isEmpty<::apache::thrift::type::binary_t>(this->__fbthrift_field_binary_field)) &&
 !(this->__fbthrift_field_enum_field !=  ::facebook::thrift::test::terse_write::deprecated::MyEnum::ME1) &&
 !(!::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::i16_t>>(this->__fbthrift_field_list_field)) &&
 !(!::apache::thrift::op::isEmpty<::apache::thrift::type::set<::apache::thrift::type::i16_t>>(this->__fbthrift_field_set_field)) &&
 !(!::apache::thrift::op::isEmpty<::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i16_t>>(this->__fbthrift_field_map_field));
}

bool DeprecatedTerseWriteWithCustomDefault::operator==([[maybe_unused]] const DeprecatedTerseWriteWithCustomDefault& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool DeprecatedTerseWriteWithCustomDefault::operator<([[maybe_unused]] const DeprecatedTerseWriteWithCustomDefault& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


bool DeprecatedTerseWriteWithCustomDefault::get_bool_field() const {
  return __fbthrift_field_bool_field;
}

bool& DeprecatedTerseWriteWithCustomDefault::set_bool_field(bool bool_field_) {
  bool_field_ref() = bool_field_;
  return __fbthrift_field_bool_field;
}

::std::int8_t DeprecatedTerseWriteWithCustomDefault::get_byte_field() const {
  return __fbthrift_field_byte_field;
}

::std::int8_t& DeprecatedTerseWriteWithCustomDefault::set_byte_field(::std::int8_t byte_field_) {
  byte_field_ref() = byte_field_;
  return __fbthrift_field_byte_field;
}

::std::int16_t DeprecatedTerseWriteWithCustomDefault::get_short_field() const {
  return __fbthrift_field_short_field;
}

::std::int16_t& DeprecatedTerseWriteWithCustomDefault::set_short_field(::std::int16_t short_field_) {
  short_field_ref() = short_field_;
  return __fbthrift_field_short_field;
}

::std::int32_t DeprecatedTerseWriteWithCustomDefault::get_int_field() const {
  return __fbthrift_field_int_field;
}

::std::int32_t& DeprecatedTerseWriteWithCustomDefault::set_int_field(::std::int32_t int_field_) {
  int_field_ref() = int_field_;
  return __fbthrift_field_int_field;
}

::std::int64_t DeprecatedTerseWriteWithCustomDefault::get_long_field() const {
  return __fbthrift_field_long_field;
}

::std::int64_t& DeprecatedTerseWriteWithCustomDefault::set_long_field(::std::int64_t long_field_) {
  long_field_ref() = long_field_;
  return __fbthrift_field_long_field;
}

float DeprecatedTerseWriteWithCustomDefault::get_float_field() const {
  return __fbthrift_field_float_field;
}

float& DeprecatedTerseWriteWithCustomDefault::set_float_field(float float_field_) {
  float_field_ref() = float_field_;
  return __fbthrift_field_float_field;
}

double DeprecatedTerseWriteWithCustomDefault::get_double_field() const {
  return __fbthrift_field_double_field;
}

double& DeprecatedTerseWriteWithCustomDefault::set_double_field(double double_field_) {
  double_field_ref() = double_field_;
  return __fbthrift_field_double_field;
}

::facebook::thrift::test::terse_write::deprecated::MyEnum DeprecatedTerseWriteWithCustomDefault::get_enum_field() const {
  return __fbthrift_field_enum_field;
}

::facebook::thrift::test::terse_write::deprecated::MyEnum& DeprecatedTerseWriteWithCustomDefault::set_enum_field(::facebook::thrift::test::terse_write::deprecated::MyEnum enum_field_) {
  enum_field_ref() = enum_field_;
  return __fbthrift_field_enum_field;
}

const ::std::vector<::std::int16_t>& DeprecatedTerseWriteWithCustomDefault::get_list_field() const& {
  return __fbthrift_field_list_field;
}

::std::vector<::std::int16_t> DeprecatedTerseWriteWithCustomDefault::get_list_field() && {
  return static_cast<::std::vector<::std::int16_t>&&>(__fbthrift_field_list_field);
}

const ::std::set<::std::int16_t>& DeprecatedTerseWriteWithCustomDefault::get_set_field() const& {
  return __fbthrift_field_set_field;
}

::std::set<::std::int16_t> DeprecatedTerseWriteWithCustomDefault::get_set_field() && {
  return static_cast<::std::set<::std::int16_t>&&>(__fbthrift_field_set_field);
}

const ::std::map<::std::int16_t, ::std::int16_t>& DeprecatedTerseWriteWithCustomDefault::get_map_field() const& {
  return __fbthrift_field_map_field;
}

::std::map<::std::int16_t, ::std::int16_t> DeprecatedTerseWriteWithCustomDefault::get_map_field() && {
  return static_cast<::std::map<::std::int16_t, ::std::int16_t>&&>(__fbthrift_field_map_field);
}

void swap([[maybe_unused]] DeprecatedTerseWriteWithCustomDefault& a, [[maybe_unused]] DeprecatedTerseWriteWithCustomDefault& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_bool_field, b.__fbthrift_field_bool_field);
  swap(a.__fbthrift_field_byte_field, b.__fbthrift_field_byte_field);
  swap(a.__fbthrift_field_short_field, b.__fbthrift_field_short_field);
  swap(a.__fbthrift_field_int_field, b.__fbthrift_field_int_field);
  swap(a.__fbthrift_field_long_field, b.__fbthrift_field_long_field);
  swap(a.__fbthrift_field_float_field, b.__fbthrift_field_float_field);
  swap(a.__fbthrift_field_double_field, b.__fbthrift_field_double_field);
  swap(a.__fbthrift_field_string_field, b.__fbthrift_field_string_field);
  swap(a.__fbthrift_field_binary_field, b.__fbthrift_field_binary_field);
  swap(a.__fbthrift_field_enum_field, b.__fbthrift_field_enum_field);
  swap(a.__fbthrift_field_list_field, b.__fbthrift_field_list_field);
  swap(a.__fbthrift_field_set_field, b.__fbthrift_field_set_field);
  swap(a.__fbthrift_field_map_field, b.__fbthrift_field_map_field);
  swap(a.__isset, b.__isset);
}



} // namespace facebook::thrift::test::terse_write::deprecated

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithRedundantCustomDefault>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::test::terse_write::deprecated::DeprecatedTerseWriteWithRedundantCustomDefault>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace facebook::thrift::test::terse_write::deprecated {

std::string_view DeprecatedTerseWriteWithRedundantCustomDefault::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/test/terse_write/deprecated/DeprecatedTerseWriteWithRedundantCustomDefault";
}

std::string_view DeprecatedTerseWriteWithRedundantCustomDefault::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<DeprecatedTerseWriteWithRedundantCustomDefault>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view DeprecatedTerseWriteWithRedundantCustomDefault::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<DeprecatedTerseWriteWithRedundantCustomDefault>::name;
}

DeprecatedTerseWriteWithRedundantCustomDefault::DeprecatedTerseWriteWithRedundantCustomDefault(const DeprecatedTerseWriteWithRedundantCustomDefault&) = default;
DeprecatedTerseWriteWithRedundantCustomDefault& DeprecatedTerseWriteWithRedundantCustomDefault::operator=(const DeprecatedTerseWriteWithRedundantCustomDefault&) = default;
DeprecatedTerseWriteWithRedundantCustomDefault::DeprecatedTerseWriteWithRedundantCustomDefault() :
    __fbthrift_field_bool_field(false),
    __fbthrift_field_byte_field(static_cast<::std::int8_t>(0)),
    __fbthrift_field_short_field(static_cast<::std::int16_t>(0)),
    __fbthrift_field_int_field(static_cast<::std::int32_t>(0)),
    __fbthrift_field_long_field(static_cast<::std::int64_t>(0)),
    __fbthrift_field_float_field(static_cast<float>(0)),
    __fbthrift_field_double_field(static_cast<double>(0)),
    __fbthrift_field_string_field(apache::thrift::StringTraits<::std::string>::fromStringLiteral("")),
    __fbthrift_field_binary_field(apache::thrift::StringTraits<::std::string>::fromStringLiteral("")),
    __fbthrift_field_enum_field( ::facebook::thrift::test::terse_write::deprecated::MyEnum::ME0) {
}


DeprecatedTerseWriteWithRedundantCustomDefault::~DeprecatedTerseWriteWithRedundantCustomDefault() {}

DeprecatedTerseWriteWithRedundantCustomDefault::DeprecatedTerseWriteWithRedundantCustomDefault([[maybe_unused]] DeprecatedTerseWriteWithRedundantCustomDefault&& other) noexcept :
    __fbthrift_field_bool_field(std::move(other.__fbthrift_field_bool_field)),
    __fbthrift_field_byte_field(std::move(other.__fbthrift_field_byte_field)),
    __fbthrift_field_short_field(std::move(other.__fbthrift_field_short_field)),
    __fbthrift_field_int_field(std::move(other.__fbthrift_field_int_field)),
    __fbthrift_field_long_field(std::move(other.__fbthrift_field_long_field)),
    __fbthrift_field_float_field(std::move(other.__fbthrift_field_float_field)),
    __fbthrift_field_double_field(std::move(other.__fbthrift_field_double_field)),
    __fbthrift_field_string_field(std::move(other.__fbthrift_field_string_field)),
    __fbthrift_field_binary_field(std::move(other.__fbthrift_field_binary_field)),
    __fbthrift_field_enum_field(std::move(other.__fbthrift_field_enum_field)),
    __fbthrift_field_list_field(std::move(other.__fbthrift_field_list_field)),
    __fbthrift_field_set_field(std::move(other.__fbthrift_field_set_field)),
    __fbthrift_field_map_field(std::move(other.__fbthrift_field_map_field)),
    __isset(other.__isset) {
}

DeprecatedTerseWriteWithRedundantCustomDefault& DeprecatedTerseWriteWithRedundantCustomDefault::operator=([[maybe_unused]] DeprecatedTerseWriteWithRedundantCustomDefault&& other) noexcept {
    this->__fbthrift_field_bool_field = std::move(other.__fbthrift_field_bool_field);
    this->__fbthrift_field_byte_field = std::move(other.__fbthrift_field_byte_field);
    this->__fbthrift_field_short_field = std::move(other.__fbthrift_field_short_field);
    this->__fbthrift_field_int_field = std::move(other.__fbthrift_field_int_field);
    this->__fbthrift_field_long_field = std::move(other.__fbthrift_field_long_field);
    this->__fbthrift_field_float_field = std::move(other.__fbthrift_field_float_field);
    this->__fbthrift_field_double_field = std::move(other.__fbthrift_field_double_field);
    this->__fbthrift_field_string_field = std::move(other.__fbthrift_field_string_field);
    this->__fbthrift_field_binary_field = std::move(other.__fbthrift_field_binary_field);
    this->__fbthrift_field_enum_field = std::move(other.__fbthrift_field_enum_field);
    this->__fbthrift_field_list_field = std::move(other.__fbthrift_field_list_field);
    this->__fbthrift_field_set_field = std::move(other.__fbthrift_field_set_field);
    this->__fbthrift_field_map_field = std::move(other.__fbthrift_field_map_field);
    __isset = other.__isset;
    return *this;
}


DeprecatedTerseWriteWithRedundantCustomDefault::DeprecatedTerseWriteWithRedundantCustomDefault(apache::thrift::FragileConstructor, bool bool_field__arg, ::std::int8_t byte_field__arg, ::std::int16_t short_field__arg, ::std::int32_t int_field__arg, ::std::int64_t long_field__arg, float float_field__arg, double double_field__arg, ::std::string string_field__arg, ::std::string binary_field__arg, ::facebook::thrift::test::terse_write::deprecated::MyEnum enum_field__arg, ::std::vector<::std::int16_t> list_field__arg, ::std::set<::std::int16_t> set_field__arg, ::std::map<::std::int16_t, ::std::int16_t> map_field__arg) :
    __fbthrift_field_bool_field(std::move(bool_field__arg)),
    __fbthrift_field_byte_field(std::move(byte_field__arg)),
    __fbthrift_field_short_field(std::move(short_field__arg)),
    __fbthrift_field_int_field(std::move(int_field__arg)),
    __fbthrift_field_long_field(std::move(long_field__arg)),
    __fbthrift_field_float_field(std::move(float_field__arg)),
    __fbthrift_field_double_field(std::move(double_field__arg)),
    __fbthrift_field_string_field(std::move(string_field__arg)),
    __fbthrift_field_binary_field(std::move(binary_field__arg)),
    __fbthrift_field_enum_field(std::move(enum_field__arg)),
    __fbthrift_field_list_field(std::move(list_field__arg)),
    __fbthrift_field_set_field(std::move(set_field__arg)),
    __fbthrift_field_map_field(std::move(map_field__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void DeprecatedTerseWriteWithRedundantCustomDefault::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_bool_field = bool();
  this->__fbthrift_field_byte_field = ::std::int8_t();
  this->__fbthrift_field_short_field = ::std::int16_t();
  this->__fbthrift_field_int_field = ::std::int32_t();
  this->__fbthrift_field_long_field = ::std::int64_t();
  this->__fbthrift_field_float_field = float();
  this->__fbthrift_field_double_field = double();
  this->__fbthrift_field_string_field = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_binary_field = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_enum_field = ::facebook::thrift::test::terse_write::deprecated::MyEnum();
  this->__fbthrift_field_list_field.clear();
  this->__fbthrift_field_set_field.clear();
  this->__fbthrift_field_map_field.clear();
  __isset = {};
}

void DeprecatedTerseWriteWithRedundantCustomDefault::__fbthrift_clear_terse_fields() {
}

bool DeprecatedTerseWriteWithRedundantCustomDefault::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_bool_field != false) &&
 !(this->__fbthrift_field_byte_field != static_cast<::std::int8_t>(0)) &&
 !(this->__fbthrift_field_short_field != static_cast<::std::int16_t>(0)) &&
 !(this->__fbthrift_field_int_field != static_cast<::std::int32_t>(0)) &&
 !(this->__fbthrift_field_long_field != static_cast<::std::int64_t>(0)) &&
 !(this->__fbthrift_field_float_field != static_cast<float>(0)) &&
 !(this->__fbthrift_field_double_field != static_cast<double>(0)) &&
 !(!::apache::thrift::op::isEmpty<::apache::thrift::type::string_t>(this->__fbthrift_field_string_field)) &&
 !(!::apache::thrift::op::isEmpty<::apache::thrift::type::binary_t>(this->__fbthrift_field_binary_field)) &&
 !(this->__fbthrift_field_enum_field !=  ::facebook::thrift::test::terse_write::deprecated::MyEnum::ME0) &&
 !(!::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::i16_t>>(this->__fbthrift_field_list_field)) &&
 !(!::apache::thrift::op::isEmpty<::apache::thrift::type::set<::apache::thrift::type::i16_t>>(this->__fbthrift_field_set_field)) &&
 !(!::apache::thrift::op::isEmpty<::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i16_t>>(this->__fbthrift_field_map_field));
}

bool DeprecatedTerseWriteWithRedundantCustomDefault::operator==([[maybe_unused]] const DeprecatedTerseWriteWithRedundantCustomDefault& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool DeprecatedTerseWriteWithRedundantCustomDefault::operator<([[maybe_unused]] const DeprecatedTerseWriteWithRedundantCustomDefault& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


bool DeprecatedTerseWriteWithRedundantCustomDefault::get_bool_field() const {
  return __fbthrift_field_bool_field;
}

bool& DeprecatedTerseWriteWithRedundantCustomDefault::set_bool_field(bool bool_field_) {
  bool_field_ref() = bool_field_;
  return __fbthrift_field_bool_field;
}

::std::int8_t DeprecatedTerseWriteWithRedundantCustomDefault::get_byte_field() const {
  return __fbthrift_field_byte_field;
}

::std::int8_t& DeprecatedTerseWriteWithRedundantCustomDefault::set_byte_field(::std::int8_t byte_field_) {
  byte_field_ref() = byte_field_;
  return __fbthrift_field_byte_field;
}

::std::int16_t DeprecatedTerseWriteWithRedundantCustomDefault::get_short_field() const {
  return __fbthrift_field_short_field;
}

::std::int16_t& DeprecatedTerseWriteWithRedundantCustomDefault::set_short_field(::std::int16_t short_field_) {
  short_field_ref() = short_field_;
  return __fbthrift_field_short_field;
}

::std::int32_t DeprecatedTerseWriteWithRedundantCustomDefault::get_int_field() const {
  return __fbthrift_field_int_field;
}

::std::int32_t& DeprecatedTerseWriteWithRedundantCustomDefault::set_int_field(::std::int32_t int_field_) {
  int_field_ref() = int_field_;
  return __fbthrift_field_int_field;
}

::std::int64_t DeprecatedTerseWriteWithRedundantCustomDefault::get_long_field() const {
  return __fbthrift_field_long_field;
}

::std::int64_t& DeprecatedTerseWriteWithRedundantCustomDefault::set_long_field(::std::int64_t long_field_) {
  long_field_ref() = long_field_;
  return __fbthrift_field_long_field;
}

float DeprecatedTerseWriteWithRedundantCustomDefault::get_float_field() const {
  return __fbthrift_field_float_field;
}

float& DeprecatedTerseWriteWithRedundantCustomDefault::set_float_field(float float_field_) {
  float_field_ref() = float_field_;
  return __fbthrift_field_float_field;
}

double DeprecatedTerseWriteWithRedundantCustomDefault::get_double_field() const {
  return __fbthrift_field_double_field;
}

double& DeprecatedTerseWriteWithRedundantCustomDefault::set_double_field(double double_field_) {
  double_field_ref() = double_field_;
  return __fbthrift_field_double_field;
}

::facebook::thrift::test::terse_write::deprecated::MyEnum DeprecatedTerseWriteWithRedundantCustomDefault::get_enum_field() const {
  return __fbthrift_field_enum_field;
}

::facebook::thrift::test::terse_write::deprecated::MyEnum& DeprecatedTerseWriteWithRedundantCustomDefault::set_enum_field(::facebook::thrift::test::terse_write::deprecated::MyEnum enum_field_) {
  enum_field_ref() = enum_field_;
  return __fbthrift_field_enum_field;
}

const ::std::vector<::std::int16_t>& DeprecatedTerseWriteWithRedundantCustomDefault::get_list_field() const& {
  return __fbthrift_field_list_field;
}

::std::vector<::std::int16_t> DeprecatedTerseWriteWithRedundantCustomDefault::get_list_field() && {
  return static_cast<::std::vector<::std::int16_t>&&>(__fbthrift_field_list_field);
}

const ::std::set<::std::int16_t>& DeprecatedTerseWriteWithRedundantCustomDefault::get_set_field() const& {
  return __fbthrift_field_set_field;
}

::std::set<::std::int16_t> DeprecatedTerseWriteWithRedundantCustomDefault::get_set_field() && {
  return static_cast<::std::set<::std::int16_t>&&>(__fbthrift_field_set_field);
}

const ::std::map<::std::int16_t, ::std::int16_t>& DeprecatedTerseWriteWithRedundantCustomDefault::get_map_field() const& {
  return __fbthrift_field_map_field;
}

::std::map<::std::int16_t, ::std::int16_t> DeprecatedTerseWriteWithRedundantCustomDefault::get_map_field() && {
  return static_cast<::std::map<::std::int16_t, ::std::int16_t>&&>(__fbthrift_field_map_field);
}

void swap([[maybe_unused]] DeprecatedTerseWriteWithRedundantCustomDefault& a, [[maybe_unused]] DeprecatedTerseWriteWithRedundantCustomDefault& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_bool_field, b.__fbthrift_field_bool_field);
  swap(a.__fbthrift_field_byte_field, b.__fbthrift_field_byte_field);
  swap(a.__fbthrift_field_short_field, b.__fbthrift_field_short_field);
  swap(a.__fbthrift_field_int_field, b.__fbthrift_field_int_field);
  swap(a.__fbthrift_field_long_field, b.__fbthrift_field_long_field);
  swap(a.__fbthrift_field_float_field, b.__fbthrift_field_float_field);
  swap(a.__fbthrift_field_double_field, b.__fbthrift_field_double_field);
  swap(a.__fbthrift_field_string_field, b.__fbthrift_field_string_field);
  swap(a.__fbthrift_field_binary_field, b.__fbthrift_field_binary_field);
  swap(a.__fbthrift_field_enum_field, b.__fbthrift_field_enum_field);
  swap(a.__fbthrift_field_list_field, b.__fbthrift_field_list_field);
  swap(a.__fbthrift_field_set_field, b.__fbthrift_field_set_field);
  swap(a.__fbthrift_field_map_field, b.__fbthrift_field_map_field);
  swap(a.__isset, b.__isset);
}



} // namespace facebook::thrift::test::terse_write::deprecated

namespace facebook::thrift::test::terse_write::deprecated { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace facebook::thrift::test::terse_write::deprecated
namespace apache::thrift::detail::annotation {
}
