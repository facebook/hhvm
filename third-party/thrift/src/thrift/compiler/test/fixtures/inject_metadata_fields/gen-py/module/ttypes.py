#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from __future__ import absolute_import
import sys
from thrift.util.Recursive import fix_spec
from thrift.Thrift import TType, TMessageType, TPriority, TRequestContext, TProcessorEventHandler, TServerInterface, TProcessor, TException, TApplicationException, UnimplementedTypedef
from thrift.protocol.TProtocol import TProtocolException


import thrift.annotation.internal.ttypes
import foo.ttypes


import pprint
import warnings
from thrift import Thrift
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.protocol import TCompactProtocol
from thrift.protocol import THeaderProtocol
fastproto = None
try:
  from thrift.protocol import fastproto
except ImportError:
  pass
all_structs = []
UTF8STRINGS = bool(0) or sys.version_info.major >= 3

__all__ = ['UTF8STRINGS', 'Fields', 'FieldsInjectedToEmptyStruct', 'FieldsInjectedToStruct', 'FieldsInjectedWithIncludedStruct']

class Fields:
  r"""
  Attributes:
   - injected_field
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 100:
        if ftype == TType.STRING:
          self.injected_field = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('Fields')
    if self.injected_field != None:
      oprot.writeFieldBegin('injected_field', TType.STRING, 100)
      oprot.writeString(self.injected_field.encode('utf-8')) if UTF8STRINGS and not isinstance(self.injected_field, bytes) else oprot.writeString(self.injected_field)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.injected_field is not None:
      value = pprint.pformat(self.injected_field, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    injected_field=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'injected_field',
    )

  # Override the __hash__ function for Python3 - t10434117
  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.Fields, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.Fields, self)

  def _to_py_deprecated(self):
    return self

class FieldsInjectedToEmptyStruct:
  r"""
  Attributes:
   - injected_field
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1100:
        if ftype == TType.STRING:
          self.injected_field = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('FieldsInjectedToEmptyStruct')
    if self.injected_field != None:
      oprot.writeFieldBegin('injected_field', TType.STRING, -1100)
      oprot.writeString(self.injected_field.encode('utf-8')) if UTF8STRINGS and not isinstance(self.injected_field, bytes) else oprot.writeString(self.injected_field)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.injected_field is not None:
      value = pprint.pformat(self.injected_field, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    injected_field=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'injected_field',
    )

  # Override the __hash__ function for Python3 - t10434117
  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.FieldsInjectedToEmptyStruct, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.FieldsInjectedToEmptyStruct, self)

  def _to_py_deprecated(self):
    return self

class FieldsInjectedToStruct:
  r"""
  Attributes:
   - string_field
   - injected_field
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.string_field = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == -1100:
        if ftype == TType.STRING:
          self.injected_field = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('FieldsInjectedToStruct')
    if self.injected_field != None:
      oprot.writeFieldBegin('injected_field', TType.STRING, -1100)
      oprot.writeString(self.injected_field.encode('utf-8')) if UTF8STRINGS and not isinstance(self.injected_field, bytes) else oprot.writeString(self.injected_field)
      oprot.writeFieldEnd()
    if self.string_field != None:
      oprot.writeFieldBegin('string_field', TType.STRING, 1)
      oprot.writeString(self.string_field.encode('utf-8')) if UTF8STRINGS and not isinstance(self.string_field, bytes) else oprot.writeString(self.string_field)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.string_field is not None:
      value = pprint.pformat(self.string_field, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    string_field=%s' % (value))
    if self.injected_field is not None:
      value = pprint.pformat(self.injected_field, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    injected_field=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'injected_field',
      'string_field',
    )

  # Override the __hash__ function for Python3 - t10434117
  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.FieldsInjectedToStruct, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.FieldsInjectedToStruct, self)

  def _to_py_deprecated(self):
    return self

class FieldsInjectedWithIncludedStruct:
  r"""
  Attributes:
   - string_field
   - injected_field
   - injected_structured_annotation_field
   - injected_unstructured_annotation_field
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.string_field = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == -1100:
        if ftype == TType.STRING:
          self.injected_field = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == -1101:
        if ftype == TType.STRING:
          self.injected_structured_annotation_field = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == -1102:
        if ftype == TType.STRING:
          self.injected_unstructured_annotation_field = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('FieldsInjectedWithIncludedStruct')
    if self.injected_unstructured_annotation_field != None:
      oprot.writeFieldBegin('injected_unstructured_annotation_field', TType.STRING, -1102)
      oprot.writeString(self.injected_unstructured_annotation_field.encode('utf-8')) if UTF8STRINGS and not isinstance(self.injected_unstructured_annotation_field, bytes) else oprot.writeString(self.injected_unstructured_annotation_field)
      oprot.writeFieldEnd()
    if self.injected_structured_annotation_field != None:
      oprot.writeFieldBegin('injected_structured_annotation_field', TType.STRING, -1101)
      oprot.writeString(self.injected_structured_annotation_field.encode('utf-8')) if UTF8STRINGS and not isinstance(self.injected_structured_annotation_field, bytes) else oprot.writeString(self.injected_structured_annotation_field)
      oprot.writeFieldEnd()
    if self.injected_field != None:
      oprot.writeFieldBegin('injected_field', TType.STRING, -1100)
      oprot.writeString(self.injected_field.encode('utf-8')) if UTF8STRINGS and not isinstance(self.injected_field, bytes) else oprot.writeString(self.injected_field)
      oprot.writeFieldEnd()
    if self.string_field != None:
      oprot.writeFieldBegin('string_field', TType.STRING, 1)
      oprot.writeString(self.string_field.encode('utf-8')) if UTF8STRINGS and not isinstance(self.string_field, bytes) else oprot.writeString(self.string_field)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.string_field is not None:
      value = pprint.pformat(self.string_field, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    string_field=%s' % (value))
    if self.injected_field is not None:
      value = pprint.pformat(self.injected_field, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    injected_field=%s' % (value))
    if self.injected_structured_annotation_field is not None:
      value = pprint.pformat(self.injected_structured_annotation_field, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    injected_structured_annotation_field=%s' % (value))
    if self.injected_unstructured_annotation_field is not None:
      value = pprint.pformat(self.injected_unstructured_annotation_field, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    injected_unstructured_annotation_field=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'injected_unstructured_annotation_field',
      'injected_structured_annotation_field',
      'injected_field',
      'string_field',
    )

  # Override the __hash__ function for Python3 - t10434117
  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.FieldsInjectedWithIncludedStruct, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.FieldsInjectedWithIncludedStruct, self)

  def _to_py_deprecated(self):
    return self

all_structs.append(Fields)
Fields.thrift_spec = (
  None, # 0
  None, # 1
  None, # 2
  None, # 3
  None, # 4
  None, # 5
  None, # 6
  None, # 7
  None, # 8
  None, # 9
  None, # 10
  None, # 11
  None, # 12
  None, # 13
  None, # 14
  None, # 15
  None, # 16
  None, # 17
  None, # 18
  None, # 19
  None, # 20
  None, # 21
  None, # 22
  None, # 23
  None, # 24
  None, # 25
  None, # 26
  None, # 27
  None, # 28
  None, # 29
  None, # 30
  None, # 31
  None, # 32
  None, # 33
  None, # 34
  None, # 35
  None, # 36
  None, # 37
  None, # 38
  None, # 39
  None, # 40
  None, # 41
  None, # 42
  None, # 43
  None, # 44
  None, # 45
  None, # 46
  None, # 47
  None, # 48
  None, # 49
  None, # 50
  None, # 51
  None, # 52
  None, # 53
  None, # 54
  None, # 55
  None, # 56
  None, # 57
  None, # 58
  None, # 59
  None, # 60
  None, # 61
  None, # 62
  None, # 63
  None, # 64
  None, # 65
  None, # 66
  None, # 67
  None, # 68
  None, # 69
  None, # 70
  None, # 71
  None, # 72
  None, # 73
  None, # 74
  None, # 75
  None, # 76
  None, # 77
  None, # 78
  None, # 79
  None, # 80
  None, # 81
  None, # 82
  None, # 83
  None, # 84
  None, # 85
  None, # 86
  None, # 87
  None, # 88
  None, # 89
  None, # 90
  None, # 91
  None, # 92
  None, # 93
  None, # 94
  None, # 95
  None, # 96
  None, # 97
  None, # 98
  None, # 99
  (100, TType.STRING, 'injected_field', True, None, 2, ), # 100
)

Fields.thrift_struct_annotations = {
}
Fields.thrift_field_annotations = {
}

def Fields__init__(self, injected_field=None,):
  self.injected_field = injected_field

Fields.__init__ = Fields__init__

def Fields__setstate__(self, state):
  state.setdefault('injected_field', None)
  self.__dict__ = state

Fields.__getstate__ = lambda self: self.__dict__.copy()
Fields.__setstate__ = Fields__setstate__

all_structs.append(FieldsInjectedToEmptyStruct)
FieldsInjectedToEmptyStruct.thrift_spec = (
  (-1100, TType.STRING, 'injected_field', True, None, 2, ), # -1100
)

FieldsInjectedToEmptyStruct.thrift_struct_annotations = {
}
FieldsInjectedToEmptyStruct.thrift_field_annotations = {
}

def FieldsInjectedToEmptyStruct__init__(self, injected_field=None,):
  self.injected_field = injected_field

FieldsInjectedToEmptyStruct.__init__ = FieldsInjectedToEmptyStruct__init__

def FieldsInjectedToEmptyStruct__setstate__(self, state):
  state.setdefault('injected_field', None)
  self.__dict__ = state

FieldsInjectedToEmptyStruct.__getstate__ = lambda self: self.__dict__.copy()
FieldsInjectedToEmptyStruct.__setstate__ = FieldsInjectedToEmptyStruct__setstate__

all_structs.append(FieldsInjectedToStruct)
FieldsInjectedToStruct.thrift_spec = (
  (-1100, TType.STRING, 'injected_field', True, None, 2, ), # -1100
  None, # -1099
  None, # -1098
  None, # -1097
  None, # -1096
  None, # -1095
  None, # -1094
  None, # -1093
  None, # -1092
  None, # -1091
  None, # -1090
  None, # -1089
  None, # -1088
  None, # -1087
  None, # -1086
  None, # -1085
  None, # -1084
  None, # -1083
  None, # -1082
  None, # -1081
  None, # -1080
  None, # -1079
  None, # -1078
  None, # -1077
  None, # -1076
  None, # -1075
  None, # -1074
  None, # -1073
  None, # -1072
  None, # -1071
  None, # -1070
  None, # -1069
  None, # -1068
  None, # -1067
  None, # -1066
  None, # -1065
  None, # -1064
  None, # -1063
  None, # -1062
  None, # -1061
  None, # -1060
  None, # -1059
  None, # -1058
  None, # -1057
  None, # -1056
  None, # -1055
  None, # -1054
  None, # -1053
  None, # -1052
  None, # -1051
  None, # -1050
  None, # -1049
  None, # -1048
  None, # -1047
  None, # -1046
  None, # -1045
  None, # -1044
  None, # -1043
  None, # -1042
  None, # -1041
  None, # -1040
  None, # -1039
  None, # -1038
  None, # -1037
  None, # -1036
  None, # -1035
  None, # -1034
  None, # -1033
  None, # -1032
  None, # -1031
  None, # -1030
  None, # -1029
  None, # -1028
  None, # -1027
  None, # -1026
  None, # -1025
  None, # -1024
  None, # -1023
  None, # -1022
  None, # -1021
  None, # -1020
  None, # -1019
  None, # -1018
  None, # -1017
  None, # -1016
  None, # -1015
  None, # -1014
  None, # -1013
  None, # -1012
  None, # -1011
  None, # -1010
  None, # -1009
  None, # -1008
  None, # -1007
  None, # -1006
  None, # -1005
  None, # -1004
  None, # -1003
  None, # -1002
  None, # -1001
  None, # -1000
  None, # -999
  None, # -998
  None, # -997
  None, # -996
  None, # -995
  None, # -994
  None, # -993
  None, # -992
  None, # -991
  None, # -990
  None, # -989
  None, # -988
  None, # -987
  None, # -986
  None, # -985
  None, # -984
  None, # -983
  None, # -982
  None, # -981
  None, # -980
  None, # -979
  None, # -978
  None, # -977
  None, # -976
  None, # -975
  None, # -974
  None, # -973
  None, # -972
  None, # -971
  None, # -970
  None, # -969
  None, # -968
  None, # -967
  None, # -966
  None, # -965
  None, # -964
  None, # -963
  None, # -962
  None, # -961
  None, # -960
  None, # -959
  None, # -958
  None, # -957
  None, # -956
  None, # -955
  None, # -954
  None, # -953
  None, # -952
  None, # -951
  None, # -950
  None, # -949
  None, # -948
  None, # -947
  None, # -946
  None, # -945
  None, # -944
  None, # -943
  None, # -942
  None, # -941
  None, # -940
  None, # -939
  None, # -938
  None, # -937
  None, # -936
  None, # -935
  None, # -934
  None, # -933
  None, # -932
  None, # -931
  None, # -930
  None, # -929
  None, # -928
  None, # -927
  None, # -926
  None, # -925
  None, # -924
  None, # -923
  None, # -922
  None, # -921
  None, # -920
  None, # -919
  None, # -918
  None, # -917
  None, # -916
  None, # -915
  None, # -914
  None, # -913
  None, # -912
  None, # -911
  None, # -910
  None, # -909
  None, # -908
  None, # -907
  None, # -906
  None, # -905
  None, # -904
  None, # -903
  None, # -902
  None, # -901
  None, # -900
  None, # -899
  None, # -898
  None, # -897
  None, # -896
  None, # -895
  None, # -894
  None, # -893
  None, # -892
  None, # -891
  None, # -890
  None, # -889
  None, # -888
  None, # -887
  None, # -886
  None, # -885
  None, # -884
  None, # -883
  None, # -882
  None, # -881
  None, # -880
  None, # -879
  None, # -878
  None, # -877
  None, # -876
  None, # -875
  None, # -874
  None, # -873
  None, # -872
  None, # -871
  None, # -870
  None, # -869
  None, # -868
  None, # -867
  None, # -866
  None, # -865
  None, # -864
  None, # -863
  None, # -862
  None, # -861
  None, # -860
  None, # -859
  None, # -858
  None, # -857
  None, # -856
  None, # -855
  None, # -854
  None, # -853
  None, # -852
  None, # -851
  None, # -850
  None, # -849
  None, # -848
  None, # -847
  None, # -846
  None, # -845
  None, # -844
  None, # -843
  None, # -842
  None, # -841
  None, # -840
  None, # -839
  None, # -838
  None, # -837
  None, # -836
  None, # -835
  None, # -834
  None, # -833
  None, # -832
  None, # -831
  None, # -830
  None, # -829
  None, # -828
  None, # -827
  None, # -826
  None, # -825
  None, # -824
  None, # -823
  None, # -822
  None, # -821
  None, # -820
  None, # -819
  None, # -818
  None, # -817
  None, # -816
  None, # -815
  None, # -814
  None, # -813
  None, # -812
  None, # -811
  None, # -810
  None, # -809
  None, # -808
  None, # -807
  None, # -806
  None, # -805
  None, # -804
  None, # -803
  None, # -802
  None, # -801
  None, # -800
  None, # -799
  None, # -798
  None, # -797
  None, # -796
  None, # -795
  None, # -794
  None, # -793
  None, # -792
  None, # -791
  None, # -790
  None, # -789
  None, # -788
  None, # -787
  None, # -786
  None, # -785
  None, # -784
  None, # -783
  None, # -782
  None, # -781
  None, # -780
  None, # -779
  None, # -778
  None, # -777
  None, # -776
  None, # -775
  None, # -774
  None, # -773
  None, # -772
  None, # -771
  None, # -770
  None, # -769
  None, # -768
  None, # -767
  None, # -766
  None, # -765
  None, # -764
  None, # -763
  None, # -762
  None, # -761
  None, # -760
  None, # -759
  None, # -758
  None, # -757
  None, # -756
  None, # -755
  None, # -754
  None, # -753
  None, # -752
  None, # -751
  None, # -750
  None, # -749
  None, # -748
  None, # -747
  None, # -746
  None, # -745
  None, # -744
  None, # -743
  None, # -742
  None, # -741
  None, # -740
  None, # -739
  None, # -738
  None, # -737
  None, # -736
  None, # -735
  None, # -734
  None, # -733
  None, # -732
  None, # -731
  None, # -730
  None, # -729
  None, # -728
  None, # -727
  None, # -726
  None, # -725
  None, # -724
  None, # -723
  None, # -722
  None, # -721
  None, # -720
  None, # -719
  None, # -718
  None, # -717
  None, # -716
  None, # -715
  None, # -714
  None, # -713
  None, # -712
  None, # -711
  None, # -710
  None, # -709
  None, # -708
  None, # -707
  None, # -706
  None, # -705
  None, # -704
  None, # -703
  None, # -702
  None, # -701
  None, # -700
  None, # -699
  None, # -698
  None, # -697
  None, # -696
  None, # -695
  None, # -694
  None, # -693
  None, # -692
  None, # -691
  None, # -690
  None, # -689
  None, # -688
  None, # -687
  None, # -686
  None, # -685
  None, # -684
  None, # -683
  None, # -682
  None, # -681
  None, # -680
  None, # -679
  None, # -678
  None, # -677
  None, # -676
  None, # -675
  None, # -674
  None, # -673
  None, # -672
  None, # -671
  None, # -670
  None, # -669
  None, # -668
  None, # -667
  None, # -666
  None, # -665
  None, # -664
  None, # -663
  None, # -662
  None, # -661
  None, # -660
  None, # -659
  None, # -658
  None, # -657
  None, # -656
  None, # -655
  None, # -654
  None, # -653
  None, # -652
  None, # -651
  None, # -650
  None, # -649
  None, # -648
  None, # -647
  None, # -646
  None, # -645
  None, # -644
  None, # -643
  None, # -642
  None, # -641
  None, # -640
  None, # -639
  None, # -638
  None, # -637
  None, # -636
  None, # -635
  None, # -634
  None, # -633
  None, # -632
  None, # -631
  None, # -630
  None, # -629
  None, # -628
  None, # -627
  None, # -626
  None, # -625
  None, # -624
  None, # -623
  None, # -622
  None, # -621
  None, # -620
  None, # -619
  None, # -618
  None, # -617
  None, # -616
  None, # -615
  None, # -614
  None, # -613
  None, # -612
  None, # -611
  None, # -610
  None, # -609
  None, # -608
  None, # -607
  None, # -606
  None, # -605
  None, # -604
  None, # -603
  None, # -602
  None, # -601
  None, # -600
  None, # -599
  None, # -598
  None, # -597
  None, # -596
  None, # -595
  None, # -594
  None, # -593
  None, # -592
  None, # -591
  None, # -590
  None, # -589
  None, # -588
  None, # -587
  None, # -586
  None, # -585
  None, # -584
  None, # -583
  None, # -582
  None, # -581
  None, # -580
  None, # -579
  None, # -578
  None, # -577
  None, # -576
  None, # -575
  None, # -574
  None, # -573
  None, # -572
  None, # -571
  None, # -570
  None, # -569
  None, # -568
  None, # -567
  None, # -566
  None, # -565
  None, # -564
  None, # -563
  None, # -562
  None, # -561
  None, # -560
  None, # -559
  None, # -558
  None, # -557
  None, # -556
  None, # -555
  None, # -554
  None, # -553
  None, # -552
  None, # -551
  None, # -550
  None, # -549
  None, # -548
  None, # -547
  None, # -546
  None, # -545
  None, # -544
  None, # -543
  None, # -542
  None, # -541
  None, # -540
  None, # -539
  None, # -538
  None, # -537
  None, # -536
  None, # -535
  None, # -534
  None, # -533
  None, # -532
  None, # -531
  None, # -530
  None, # -529
  None, # -528
  None, # -527
  None, # -526
  None, # -525
  None, # -524
  None, # -523
  None, # -522
  None, # -521
  None, # -520
  None, # -519
  None, # -518
  None, # -517
  None, # -516
  None, # -515
  None, # -514
  None, # -513
  None, # -512
  None, # -511
  None, # -510
  None, # -509
  None, # -508
  None, # -507
  None, # -506
  None, # -505
  None, # -504
  None, # -503
  None, # -502
  None, # -501
  None, # -500
  None, # -499
  None, # -498
  None, # -497
  None, # -496
  None, # -495
  None, # -494
  None, # -493
  None, # -492
  None, # -491
  None, # -490
  None, # -489
  None, # -488
  None, # -487
  None, # -486
  None, # -485
  None, # -484
  None, # -483
  None, # -482
  None, # -481
  None, # -480
  None, # -479
  None, # -478
  None, # -477
  None, # -476
  None, # -475
  None, # -474
  None, # -473
  None, # -472
  None, # -471
  None, # -470
  None, # -469
  None, # -468
  None, # -467
  None, # -466
  None, # -465
  None, # -464
  None, # -463
  None, # -462
  None, # -461
  None, # -460
  None, # -459
  None, # -458
  None, # -457
  None, # -456
  None, # -455
  None, # -454
  None, # -453
  None, # -452
  None, # -451
  None, # -450
  None, # -449
  None, # -448
  None, # -447
  None, # -446
  None, # -445
  None, # -444
  None, # -443
  None, # -442
  None, # -441
  None, # -440
  None, # -439
  None, # -438
  None, # -437
  None, # -436
  None, # -435
  None, # -434
  None, # -433
  None, # -432
  None, # -431
  None, # -430
  None, # -429
  None, # -428
  None, # -427
  None, # -426
  None, # -425
  None, # -424
  None, # -423
  None, # -422
  None, # -421
  None, # -420
  None, # -419
  None, # -418
  None, # -417
  None, # -416
  None, # -415
  None, # -414
  None, # -413
  None, # -412
  None, # -411
  None, # -410
  None, # -409
  None, # -408
  None, # -407
  None, # -406
  None, # -405
  None, # -404
  None, # -403
  None, # -402
  None, # -401
  None, # -400
  None, # -399
  None, # -398
  None, # -397
  None, # -396
  None, # -395
  None, # -394
  None, # -393
  None, # -392
  None, # -391
  None, # -390
  None, # -389
  None, # -388
  None, # -387
  None, # -386
  None, # -385
  None, # -384
  None, # -383
  None, # -382
  None, # -381
  None, # -380
  None, # -379
  None, # -378
  None, # -377
  None, # -376
  None, # -375
  None, # -374
  None, # -373
  None, # -372
  None, # -371
  None, # -370
  None, # -369
  None, # -368
  None, # -367
  None, # -366
  None, # -365
  None, # -364
  None, # -363
  None, # -362
  None, # -361
  None, # -360
  None, # -359
  None, # -358
  None, # -357
  None, # -356
  None, # -355
  None, # -354
  None, # -353
  None, # -352
  None, # -351
  None, # -350
  None, # -349
  None, # -348
  None, # -347
  None, # -346
  None, # -345
  None, # -344
  None, # -343
  None, # -342
  None, # -341
  None, # -340
  None, # -339
  None, # -338
  None, # -337
  None, # -336
  None, # -335
  None, # -334
  None, # -333
  None, # -332
  None, # -331
  None, # -330
  None, # -329
  None, # -328
  None, # -327
  None, # -326
  None, # -325
  None, # -324
  None, # -323
  None, # -322
  None, # -321
  None, # -320
  None, # -319
  None, # -318
  None, # -317
  None, # -316
  None, # -315
  None, # -314
  None, # -313
  None, # -312
  None, # -311
  None, # -310
  None, # -309
  None, # -308
  None, # -307
  None, # -306
  None, # -305
  None, # -304
  None, # -303
  None, # -302
  None, # -301
  None, # -300
  None, # -299
  None, # -298
  None, # -297
  None, # -296
  None, # -295
  None, # -294
  None, # -293
  None, # -292
  None, # -291
  None, # -290
  None, # -289
  None, # -288
  None, # -287
  None, # -286
  None, # -285
  None, # -284
  None, # -283
  None, # -282
  None, # -281
  None, # -280
  None, # -279
  None, # -278
  None, # -277
  None, # -276
  None, # -275
  None, # -274
  None, # -273
  None, # -272
  None, # -271
  None, # -270
  None, # -269
  None, # -268
  None, # -267
  None, # -266
  None, # -265
  None, # -264
  None, # -263
  None, # -262
  None, # -261
  None, # -260
  None, # -259
  None, # -258
  None, # -257
  None, # -256
  None, # -255
  None, # -254
  None, # -253
  None, # -252
  None, # -251
  None, # -250
  None, # -249
  None, # -248
  None, # -247
  None, # -246
  None, # -245
  None, # -244
  None, # -243
  None, # -242
  None, # -241
  None, # -240
  None, # -239
  None, # -238
  None, # -237
  None, # -236
  None, # -235
  None, # -234
  None, # -233
  None, # -232
  None, # -231
  None, # -230
  None, # -229
  None, # -228
  None, # -227
  None, # -226
  None, # -225
  None, # -224
  None, # -223
  None, # -222
  None, # -221
  None, # -220
  None, # -219
  None, # -218
  None, # -217
  None, # -216
  None, # -215
  None, # -214
  None, # -213
  None, # -212
  None, # -211
  None, # -210
  None, # -209
  None, # -208
  None, # -207
  None, # -206
  None, # -205
  None, # -204
  None, # -203
  None, # -202
  None, # -201
  None, # -200
  None, # -199
  None, # -198
  None, # -197
  None, # -196
  None, # -195
  None, # -194
  None, # -193
  None, # -192
  None, # -191
  None, # -190
  None, # -189
  None, # -188
  None, # -187
  None, # -186
  None, # -185
  None, # -184
  None, # -183
  None, # -182
  None, # -181
  None, # -180
  None, # -179
  None, # -178
  None, # -177
  None, # -176
  None, # -175
  None, # -174
  None, # -173
  None, # -172
  None, # -171
  None, # -170
  None, # -169
  None, # -168
  None, # -167
  None, # -166
  None, # -165
  None, # -164
  None, # -163
  None, # -162
  None, # -161
  None, # -160
  None, # -159
  None, # -158
  None, # -157
  None, # -156
  None, # -155
  None, # -154
  None, # -153
  None, # -152
  None, # -151
  None, # -150
  None, # -149
  None, # -148
  None, # -147
  None, # -146
  None, # -145
  None, # -144
  None, # -143
  None, # -142
  None, # -141
  None, # -140
  None, # -139
  None, # -138
  None, # -137
  None, # -136
  None, # -135
  None, # -134
  None, # -133
  None, # -132
  None, # -131
  None, # -130
  None, # -129
  None, # -128
  None, # -127
  None, # -126
  None, # -125
  None, # -124
  None, # -123
  None, # -122
  None, # -121
  None, # -120
  None, # -119
  None, # -118
  None, # -117
  None, # -116
  None, # -115
  None, # -114
  None, # -113
  None, # -112
  None, # -111
  None, # -110
  None, # -109
  None, # -108
  None, # -107
  None, # -106
  None, # -105
  None, # -104
  None, # -103
  None, # -102
  None, # -101
  None, # -100
  None, # -99
  None, # -98
  None, # -97
  None, # -96
  None, # -95
  None, # -94
  None, # -93
  None, # -92
  None, # -91
  None, # -90
  None, # -89
  None, # -88
  None, # -87
  None, # -86
  None, # -85
  None, # -84
  None, # -83
  None, # -82
  None, # -81
  None, # -80
  None, # -79
  None, # -78
  None, # -77
  None, # -76
  None, # -75
  None, # -74
  None, # -73
  None, # -72
  None, # -71
  None, # -70
  None, # -69
  None, # -68
  None, # -67
  None, # -66
  None, # -65
  None, # -64
  None, # -63
  None, # -62
  None, # -61
  None, # -60
  None, # -59
  None, # -58
  None, # -57
  None, # -56
  None, # -55
  None, # -54
  None, # -53
  None, # -52
  None, # -51
  None, # -50
  None, # -49
  None, # -48
  None, # -47
  None, # -46
  None, # -45
  None, # -44
  None, # -43
  None, # -42
  None, # -41
  None, # -40
  None, # -39
  None, # -38
  None, # -37
  None, # -36
  None, # -35
  None, # -34
  None, # -33
  None, # -32
  None, # -31
  None, # -30
  None, # -29
  None, # -28
  None, # -27
  None, # -26
  None, # -25
  None, # -24
  None, # -23
  None, # -22
  None, # -21
  None, # -20
  None, # -19
  None, # -18
  None, # -17
  None, # -16
  None, # -15
  None, # -14
  None, # -13
  None, # -12
  None, # -11
  None, # -10
  None, # -9
  None, # -8
  None, # -7
  None, # -6
  None, # -5
  None, # -4
  None, # -3
  None, # -2
  None, # -1
  None, # 0
  (1, TType.STRING, 'string_field', True, None, 2, ), # 1
)

FieldsInjectedToStruct.thrift_struct_annotations = {
}
FieldsInjectedToStruct.thrift_field_annotations = {
}

def FieldsInjectedToStruct__init__(self, string_field=None, injected_field=None,):
  self.string_field = string_field
  self.injected_field = injected_field

FieldsInjectedToStruct.__init__ = FieldsInjectedToStruct__init__

def FieldsInjectedToStruct__setstate__(self, state):
  state.setdefault('string_field', None)
  state.setdefault('injected_field', None)
  self.__dict__ = state

FieldsInjectedToStruct.__getstate__ = lambda self: self.__dict__.copy()
FieldsInjectedToStruct.__setstate__ = FieldsInjectedToStruct__setstate__

all_structs.append(FieldsInjectedWithIncludedStruct)
FieldsInjectedWithIncludedStruct.thrift_spec = (
  (-1102, TType.STRING, 'injected_unstructured_annotation_field', True, None, 1, ), # -1102
  (-1101, TType.STRING, 'injected_structured_annotation_field', True, None, 1, ), # -1101
  (-1100, TType.STRING, 'injected_field', True, None, 2, ), # -1100
  None, # -1099
  None, # -1098
  None, # -1097
  None, # -1096
  None, # -1095
  None, # -1094
  None, # -1093
  None, # -1092
  None, # -1091
  None, # -1090
  None, # -1089
  None, # -1088
  None, # -1087
  None, # -1086
  None, # -1085
  None, # -1084
  None, # -1083
  None, # -1082
  None, # -1081
  None, # -1080
  None, # -1079
  None, # -1078
  None, # -1077
  None, # -1076
  None, # -1075
  None, # -1074
  None, # -1073
  None, # -1072
  None, # -1071
  None, # -1070
  None, # -1069
  None, # -1068
  None, # -1067
  None, # -1066
  None, # -1065
  None, # -1064
  None, # -1063
  None, # -1062
  None, # -1061
  None, # -1060
  None, # -1059
  None, # -1058
  None, # -1057
  None, # -1056
  None, # -1055
  None, # -1054
  None, # -1053
  None, # -1052
  None, # -1051
  None, # -1050
  None, # -1049
  None, # -1048
  None, # -1047
  None, # -1046
  None, # -1045
  None, # -1044
  None, # -1043
  None, # -1042
  None, # -1041
  None, # -1040
  None, # -1039
  None, # -1038
  None, # -1037
  None, # -1036
  None, # -1035
  None, # -1034
  None, # -1033
  None, # -1032
  None, # -1031
  None, # -1030
  None, # -1029
  None, # -1028
  None, # -1027
  None, # -1026
  None, # -1025
  None, # -1024
  None, # -1023
  None, # -1022
  None, # -1021
  None, # -1020
  None, # -1019
  None, # -1018
  None, # -1017
  None, # -1016
  None, # -1015
  None, # -1014
  None, # -1013
  None, # -1012
  None, # -1011
  None, # -1010
  None, # -1009
  None, # -1008
  None, # -1007
  None, # -1006
  None, # -1005
  None, # -1004
  None, # -1003
  None, # -1002
  None, # -1001
  None, # -1000
  None, # -999
  None, # -998
  None, # -997
  None, # -996
  None, # -995
  None, # -994
  None, # -993
  None, # -992
  None, # -991
  None, # -990
  None, # -989
  None, # -988
  None, # -987
  None, # -986
  None, # -985
  None, # -984
  None, # -983
  None, # -982
  None, # -981
  None, # -980
  None, # -979
  None, # -978
  None, # -977
  None, # -976
  None, # -975
  None, # -974
  None, # -973
  None, # -972
  None, # -971
  None, # -970
  None, # -969
  None, # -968
  None, # -967
  None, # -966
  None, # -965
  None, # -964
  None, # -963
  None, # -962
  None, # -961
  None, # -960
  None, # -959
  None, # -958
  None, # -957
  None, # -956
  None, # -955
  None, # -954
  None, # -953
  None, # -952
  None, # -951
  None, # -950
  None, # -949
  None, # -948
  None, # -947
  None, # -946
  None, # -945
  None, # -944
  None, # -943
  None, # -942
  None, # -941
  None, # -940
  None, # -939
  None, # -938
  None, # -937
  None, # -936
  None, # -935
  None, # -934
  None, # -933
  None, # -932
  None, # -931
  None, # -930
  None, # -929
  None, # -928
  None, # -927
  None, # -926
  None, # -925
  None, # -924
  None, # -923
  None, # -922
  None, # -921
  None, # -920
  None, # -919
  None, # -918
  None, # -917
  None, # -916
  None, # -915
  None, # -914
  None, # -913
  None, # -912
  None, # -911
  None, # -910
  None, # -909
  None, # -908
  None, # -907
  None, # -906
  None, # -905
  None, # -904
  None, # -903
  None, # -902
  None, # -901
  None, # -900
  None, # -899
  None, # -898
  None, # -897
  None, # -896
  None, # -895
  None, # -894
  None, # -893
  None, # -892
  None, # -891
  None, # -890
  None, # -889
  None, # -888
  None, # -887
  None, # -886
  None, # -885
  None, # -884
  None, # -883
  None, # -882
  None, # -881
  None, # -880
  None, # -879
  None, # -878
  None, # -877
  None, # -876
  None, # -875
  None, # -874
  None, # -873
  None, # -872
  None, # -871
  None, # -870
  None, # -869
  None, # -868
  None, # -867
  None, # -866
  None, # -865
  None, # -864
  None, # -863
  None, # -862
  None, # -861
  None, # -860
  None, # -859
  None, # -858
  None, # -857
  None, # -856
  None, # -855
  None, # -854
  None, # -853
  None, # -852
  None, # -851
  None, # -850
  None, # -849
  None, # -848
  None, # -847
  None, # -846
  None, # -845
  None, # -844
  None, # -843
  None, # -842
  None, # -841
  None, # -840
  None, # -839
  None, # -838
  None, # -837
  None, # -836
  None, # -835
  None, # -834
  None, # -833
  None, # -832
  None, # -831
  None, # -830
  None, # -829
  None, # -828
  None, # -827
  None, # -826
  None, # -825
  None, # -824
  None, # -823
  None, # -822
  None, # -821
  None, # -820
  None, # -819
  None, # -818
  None, # -817
  None, # -816
  None, # -815
  None, # -814
  None, # -813
  None, # -812
  None, # -811
  None, # -810
  None, # -809
  None, # -808
  None, # -807
  None, # -806
  None, # -805
  None, # -804
  None, # -803
  None, # -802
  None, # -801
  None, # -800
  None, # -799
  None, # -798
  None, # -797
  None, # -796
  None, # -795
  None, # -794
  None, # -793
  None, # -792
  None, # -791
  None, # -790
  None, # -789
  None, # -788
  None, # -787
  None, # -786
  None, # -785
  None, # -784
  None, # -783
  None, # -782
  None, # -781
  None, # -780
  None, # -779
  None, # -778
  None, # -777
  None, # -776
  None, # -775
  None, # -774
  None, # -773
  None, # -772
  None, # -771
  None, # -770
  None, # -769
  None, # -768
  None, # -767
  None, # -766
  None, # -765
  None, # -764
  None, # -763
  None, # -762
  None, # -761
  None, # -760
  None, # -759
  None, # -758
  None, # -757
  None, # -756
  None, # -755
  None, # -754
  None, # -753
  None, # -752
  None, # -751
  None, # -750
  None, # -749
  None, # -748
  None, # -747
  None, # -746
  None, # -745
  None, # -744
  None, # -743
  None, # -742
  None, # -741
  None, # -740
  None, # -739
  None, # -738
  None, # -737
  None, # -736
  None, # -735
  None, # -734
  None, # -733
  None, # -732
  None, # -731
  None, # -730
  None, # -729
  None, # -728
  None, # -727
  None, # -726
  None, # -725
  None, # -724
  None, # -723
  None, # -722
  None, # -721
  None, # -720
  None, # -719
  None, # -718
  None, # -717
  None, # -716
  None, # -715
  None, # -714
  None, # -713
  None, # -712
  None, # -711
  None, # -710
  None, # -709
  None, # -708
  None, # -707
  None, # -706
  None, # -705
  None, # -704
  None, # -703
  None, # -702
  None, # -701
  None, # -700
  None, # -699
  None, # -698
  None, # -697
  None, # -696
  None, # -695
  None, # -694
  None, # -693
  None, # -692
  None, # -691
  None, # -690
  None, # -689
  None, # -688
  None, # -687
  None, # -686
  None, # -685
  None, # -684
  None, # -683
  None, # -682
  None, # -681
  None, # -680
  None, # -679
  None, # -678
  None, # -677
  None, # -676
  None, # -675
  None, # -674
  None, # -673
  None, # -672
  None, # -671
  None, # -670
  None, # -669
  None, # -668
  None, # -667
  None, # -666
  None, # -665
  None, # -664
  None, # -663
  None, # -662
  None, # -661
  None, # -660
  None, # -659
  None, # -658
  None, # -657
  None, # -656
  None, # -655
  None, # -654
  None, # -653
  None, # -652
  None, # -651
  None, # -650
  None, # -649
  None, # -648
  None, # -647
  None, # -646
  None, # -645
  None, # -644
  None, # -643
  None, # -642
  None, # -641
  None, # -640
  None, # -639
  None, # -638
  None, # -637
  None, # -636
  None, # -635
  None, # -634
  None, # -633
  None, # -632
  None, # -631
  None, # -630
  None, # -629
  None, # -628
  None, # -627
  None, # -626
  None, # -625
  None, # -624
  None, # -623
  None, # -622
  None, # -621
  None, # -620
  None, # -619
  None, # -618
  None, # -617
  None, # -616
  None, # -615
  None, # -614
  None, # -613
  None, # -612
  None, # -611
  None, # -610
  None, # -609
  None, # -608
  None, # -607
  None, # -606
  None, # -605
  None, # -604
  None, # -603
  None, # -602
  None, # -601
  None, # -600
  None, # -599
  None, # -598
  None, # -597
  None, # -596
  None, # -595
  None, # -594
  None, # -593
  None, # -592
  None, # -591
  None, # -590
  None, # -589
  None, # -588
  None, # -587
  None, # -586
  None, # -585
  None, # -584
  None, # -583
  None, # -582
  None, # -581
  None, # -580
  None, # -579
  None, # -578
  None, # -577
  None, # -576
  None, # -575
  None, # -574
  None, # -573
  None, # -572
  None, # -571
  None, # -570
  None, # -569
  None, # -568
  None, # -567
  None, # -566
  None, # -565
  None, # -564
  None, # -563
  None, # -562
  None, # -561
  None, # -560
  None, # -559
  None, # -558
  None, # -557
  None, # -556
  None, # -555
  None, # -554
  None, # -553
  None, # -552
  None, # -551
  None, # -550
  None, # -549
  None, # -548
  None, # -547
  None, # -546
  None, # -545
  None, # -544
  None, # -543
  None, # -542
  None, # -541
  None, # -540
  None, # -539
  None, # -538
  None, # -537
  None, # -536
  None, # -535
  None, # -534
  None, # -533
  None, # -532
  None, # -531
  None, # -530
  None, # -529
  None, # -528
  None, # -527
  None, # -526
  None, # -525
  None, # -524
  None, # -523
  None, # -522
  None, # -521
  None, # -520
  None, # -519
  None, # -518
  None, # -517
  None, # -516
  None, # -515
  None, # -514
  None, # -513
  None, # -512
  None, # -511
  None, # -510
  None, # -509
  None, # -508
  None, # -507
  None, # -506
  None, # -505
  None, # -504
  None, # -503
  None, # -502
  None, # -501
  None, # -500
  None, # -499
  None, # -498
  None, # -497
  None, # -496
  None, # -495
  None, # -494
  None, # -493
  None, # -492
  None, # -491
  None, # -490
  None, # -489
  None, # -488
  None, # -487
  None, # -486
  None, # -485
  None, # -484
  None, # -483
  None, # -482
  None, # -481
  None, # -480
  None, # -479
  None, # -478
  None, # -477
  None, # -476
  None, # -475
  None, # -474
  None, # -473
  None, # -472
  None, # -471
  None, # -470
  None, # -469
  None, # -468
  None, # -467
  None, # -466
  None, # -465
  None, # -464
  None, # -463
  None, # -462
  None, # -461
  None, # -460
  None, # -459
  None, # -458
  None, # -457
  None, # -456
  None, # -455
  None, # -454
  None, # -453
  None, # -452
  None, # -451
  None, # -450
  None, # -449
  None, # -448
  None, # -447
  None, # -446
  None, # -445
  None, # -444
  None, # -443
  None, # -442
  None, # -441
  None, # -440
  None, # -439
  None, # -438
  None, # -437
  None, # -436
  None, # -435
  None, # -434
  None, # -433
  None, # -432
  None, # -431
  None, # -430
  None, # -429
  None, # -428
  None, # -427
  None, # -426
  None, # -425
  None, # -424
  None, # -423
  None, # -422
  None, # -421
  None, # -420
  None, # -419
  None, # -418
  None, # -417
  None, # -416
  None, # -415
  None, # -414
  None, # -413
  None, # -412
  None, # -411
  None, # -410
  None, # -409
  None, # -408
  None, # -407
  None, # -406
  None, # -405
  None, # -404
  None, # -403
  None, # -402
  None, # -401
  None, # -400
  None, # -399
  None, # -398
  None, # -397
  None, # -396
  None, # -395
  None, # -394
  None, # -393
  None, # -392
  None, # -391
  None, # -390
  None, # -389
  None, # -388
  None, # -387
  None, # -386
  None, # -385
  None, # -384
  None, # -383
  None, # -382
  None, # -381
  None, # -380
  None, # -379
  None, # -378
  None, # -377
  None, # -376
  None, # -375
  None, # -374
  None, # -373
  None, # -372
  None, # -371
  None, # -370
  None, # -369
  None, # -368
  None, # -367
  None, # -366
  None, # -365
  None, # -364
  None, # -363
  None, # -362
  None, # -361
  None, # -360
  None, # -359
  None, # -358
  None, # -357
  None, # -356
  None, # -355
  None, # -354
  None, # -353
  None, # -352
  None, # -351
  None, # -350
  None, # -349
  None, # -348
  None, # -347
  None, # -346
  None, # -345
  None, # -344
  None, # -343
  None, # -342
  None, # -341
  None, # -340
  None, # -339
  None, # -338
  None, # -337
  None, # -336
  None, # -335
  None, # -334
  None, # -333
  None, # -332
  None, # -331
  None, # -330
  None, # -329
  None, # -328
  None, # -327
  None, # -326
  None, # -325
  None, # -324
  None, # -323
  None, # -322
  None, # -321
  None, # -320
  None, # -319
  None, # -318
  None, # -317
  None, # -316
  None, # -315
  None, # -314
  None, # -313
  None, # -312
  None, # -311
  None, # -310
  None, # -309
  None, # -308
  None, # -307
  None, # -306
  None, # -305
  None, # -304
  None, # -303
  None, # -302
  None, # -301
  None, # -300
  None, # -299
  None, # -298
  None, # -297
  None, # -296
  None, # -295
  None, # -294
  None, # -293
  None, # -292
  None, # -291
  None, # -290
  None, # -289
  None, # -288
  None, # -287
  None, # -286
  None, # -285
  None, # -284
  None, # -283
  None, # -282
  None, # -281
  None, # -280
  None, # -279
  None, # -278
  None, # -277
  None, # -276
  None, # -275
  None, # -274
  None, # -273
  None, # -272
  None, # -271
  None, # -270
  None, # -269
  None, # -268
  None, # -267
  None, # -266
  None, # -265
  None, # -264
  None, # -263
  None, # -262
  None, # -261
  None, # -260
  None, # -259
  None, # -258
  None, # -257
  None, # -256
  None, # -255
  None, # -254
  None, # -253
  None, # -252
  None, # -251
  None, # -250
  None, # -249
  None, # -248
  None, # -247
  None, # -246
  None, # -245
  None, # -244
  None, # -243
  None, # -242
  None, # -241
  None, # -240
  None, # -239
  None, # -238
  None, # -237
  None, # -236
  None, # -235
  None, # -234
  None, # -233
  None, # -232
  None, # -231
  None, # -230
  None, # -229
  None, # -228
  None, # -227
  None, # -226
  None, # -225
  None, # -224
  None, # -223
  None, # -222
  None, # -221
  None, # -220
  None, # -219
  None, # -218
  None, # -217
  None, # -216
  None, # -215
  None, # -214
  None, # -213
  None, # -212
  None, # -211
  None, # -210
  None, # -209
  None, # -208
  None, # -207
  None, # -206
  None, # -205
  None, # -204
  None, # -203
  None, # -202
  None, # -201
  None, # -200
  None, # -199
  None, # -198
  None, # -197
  None, # -196
  None, # -195
  None, # -194
  None, # -193
  None, # -192
  None, # -191
  None, # -190
  None, # -189
  None, # -188
  None, # -187
  None, # -186
  None, # -185
  None, # -184
  None, # -183
  None, # -182
  None, # -181
  None, # -180
  None, # -179
  None, # -178
  None, # -177
  None, # -176
  None, # -175
  None, # -174
  None, # -173
  None, # -172
  None, # -171
  None, # -170
  None, # -169
  None, # -168
  None, # -167
  None, # -166
  None, # -165
  None, # -164
  None, # -163
  None, # -162
  None, # -161
  None, # -160
  None, # -159
  None, # -158
  None, # -157
  None, # -156
  None, # -155
  None, # -154
  None, # -153
  None, # -152
  None, # -151
  None, # -150
  None, # -149
  None, # -148
  None, # -147
  None, # -146
  None, # -145
  None, # -144
  None, # -143
  None, # -142
  None, # -141
  None, # -140
  None, # -139
  None, # -138
  None, # -137
  None, # -136
  None, # -135
  None, # -134
  None, # -133
  None, # -132
  None, # -131
  None, # -130
  None, # -129
  None, # -128
  None, # -127
  None, # -126
  None, # -125
  None, # -124
  None, # -123
  None, # -122
  None, # -121
  None, # -120
  None, # -119
  None, # -118
  None, # -117
  None, # -116
  None, # -115
  None, # -114
  None, # -113
  None, # -112
  None, # -111
  None, # -110
  None, # -109
  None, # -108
  None, # -107
  None, # -106
  None, # -105
  None, # -104
  None, # -103
  None, # -102
  None, # -101
  None, # -100
  None, # -99
  None, # -98
  None, # -97
  None, # -96
  None, # -95
  None, # -94
  None, # -93
  None, # -92
  None, # -91
  None, # -90
  None, # -89
  None, # -88
  None, # -87
  None, # -86
  None, # -85
  None, # -84
  None, # -83
  None, # -82
  None, # -81
  None, # -80
  None, # -79
  None, # -78
  None, # -77
  None, # -76
  None, # -75
  None, # -74
  None, # -73
  None, # -72
  None, # -71
  None, # -70
  None, # -69
  None, # -68
  None, # -67
  None, # -66
  None, # -65
  None, # -64
  None, # -63
  None, # -62
  None, # -61
  None, # -60
  None, # -59
  None, # -58
  None, # -57
  None, # -56
  None, # -55
  None, # -54
  None, # -53
  None, # -52
  None, # -51
  None, # -50
  None, # -49
  None, # -48
  None, # -47
  None, # -46
  None, # -45
  None, # -44
  None, # -43
  None, # -42
  None, # -41
  None, # -40
  None, # -39
  None, # -38
  None, # -37
  None, # -36
  None, # -35
  None, # -34
  None, # -33
  None, # -32
  None, # -31
  None, # -30
  None, # -29
  None, # -28
  None, # -27
  None, # -26
  None, # -25
  None, # -24
  None, # -23
  None, # -22
  None, # -21
  None, # -20
  None, # -19
  None, # -18
  None, # -17
  None, # -16
  None, # -15
  None, # -14
  None, # -13
  None, # -12
  None, # -11
  None, # -10
  None, # -9
  None, # -8
  None, # -7
  None, # -6
  None, # -5
  None, # -4
  None, # -3
  None, # -2
  None, # -1
  None, # 0
  (1, TType.STRING, 'string_field', True, None, 2, ), # 1
)

FieldsInjectedWithIncludedStruct.thrift_struct_annotations = {
}
FieldsInjectedWithIncludedStruct.thrift_field_annotations = {
  -1102: {
    "thrift.box": "1",
  },
}

def FieldsInjectedWithIncludedStruct__init__(self, string_field=None, injected_field=None, injected_structured_annotation_field=None, injected_unstructured_annotation_field=None,):
  self.string_field = string_field
  self.injected_field = injected_field
  self.injected_structured_annotation_field = injected_structured_annotation_field
  self.injected_unstructured_annotation_field = injected_unstructured_annotation_field

FieldsInjectedWithIncludedStruct.__init__ = FieldsInjectedWithIncludedStruct__init__

def FieldsInjectedWithIncludedStruct__setstate__(self, state):
  state.setdefault('string_field', None)
  state.setdefault('injected_field', None)
  state.setdefault('injected_structured_annotation_field', None)
  state.setdefault('injected_unstructured_annotation_field', None)
  self.__dict__ = state

FieldsInjectedWithIncludedStruct.__getstate__ = lambda self: self.__dict__.copy()
FieldsInjectedWithIncludedStruct.__setstate__ = FieldsInjectedWithIncludedStruct__setstate__

fix_spec(all_structs)
del all_structs
