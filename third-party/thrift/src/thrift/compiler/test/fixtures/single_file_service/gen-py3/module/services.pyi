#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import folly.iobuf as _fbthrift_iobuf
import typing as _typing
from thrift.py3.server import RequestContext, ServiceInterface
from abc import abstractmethod, ABCMeta

import module.types as _module_types

_AInterfaceT = _typing.TypeVar('_AInterfaceT', bound='AInterface')


class AInterface(
    ServiceInterface,
    metaclass=ABCMeta,
):


    @abstractmethod
    async def foo(
        self
    ) -> _module_types.Foo: ...
    pass


_BInterfaceT = _typing.TypeVar('_BInterfaceT', bound='BInterface')


class BInterface(
AInterface,
    metaclass=ABCMeta,
):


    @abstractmethod
    async def bar(
        self,
        foo: _module_types.Foo
    ) -> None: ...

    @staticmethod
    def createPublisher_stream_stuff(callback=None) -> _typing.Tuple[
        _typing.AsyncGenerator[int, None],
        _module_types.ServerPublisher_cint32_t
    ]: ...


    @abstractmethod
    def stream_stuff(
        self
    ) -> _typing.Union[_typing.Awaitable[_typing.AsyncGenerator[int, None]],_typing.AsyncGenerator[int, None]]: ...
    pass


_CInterfaceT = _typing.TypeVar('_CInterfaceT', bound='CInterface')


class CInterface(
    ServiceInterface,
    metaclass=ABCMeta,
):
    pass


