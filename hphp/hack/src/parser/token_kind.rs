/**
 * Copyright (c) 2016, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the "hack" directory of this source tree. An additional
 * directory.
 *
 **
 *
 * THIS FILE IS @generated; DO NOT EDIT IT
 * To regenerate this file, run
 *
 *   buck run //hphp/hack/src:generate_full_fidelity
 *
 **
 *
 */

#[allow(non_camel_case_types)] // allow Include_once and Require_once
#[derive(Debug, Copy, Clone, PartialEq)]
pub enum TokenKind {
    // No text tokens
    EndOfFile,
    // Given text tokens
    Abstract,
    Array,
    Arraykey,
    As,
    Async,
    Attribute,
    Await,
    Backslash,
    Binary,
    Bool,
    Boolean,
    Break,
    Case,
    Catch,
    Category,
    Children,
    Class,
    Classname,
    Clone,
    Const,
    Construct,
    Continue,
    Coroutine,
    Darray,
    Default,
    Define,
    Dict,
    Do,
    Double,
    Echo,
    Else,
    Elseif,
    Empty,
    Endfor,
    Endforeach,
    Endif,
    Endswitch,
    Endwhile,
    Enum,
    Eval,
    Extends,
    Fallthrough,
    Float,
    File,
    Final,
    Finally,
    For,
    Foreach,
    From,
    Function,
    Global,
    Concurrent,
    Goto,
    HaltCompiler,
    If,
    Implements,
    Include,
    Include_once,
    Inout,
    Instanceof,
    Insteadof,
    Int,
    Integer,
    Interface,
    Is,
    Isset,
    Keyset,
    Let,
    List,
    Mixed,
    Namespace,
    New,
    Newtype,
    Noreturn,
    Num,
    Object,
    Parent,
    Print,
    Private,
    Protected,
    Public,
    Real,
    Reify,
    Record,
    RecordDec,
    Require,
    Require_once,
    Required,
    Lateinit,
    Resource,
    Return,
    SelfToken,
    Shape,
    Static,
    String,
    Super,
    Suspend,
    Switch,
    This,
    Throw,
    Trait,
    Try,
    Tuple,
    Type,
    Unset,
    Use,
    Using,
    Var,
    Varray,
    Vec,
    Void,
    Where,
    While,
    Yield,
    NullLiteral,
    LeftBracket,
    RightBracket,
    LeftParen,
    RightParen,
    LeftBrace,
    RightBrace,
    Dot,
    MinusGreaterThan,
    PlusPlus,
    MinusMinus,
    StarStar,
    Star,
    Plus,
    Minus,
    Tilde,
    Exclamation,
    Dollar,
    Slash,
    Percent,
    LessThanEqualGreaterThan,
    LessThanLessThan,
    GreaterThanGreaterThan,
    LessThan,
    GreaterThan,
    LessThanEqual,
    GreaterThanEqual,
    EqualEqual,
    EqualEqualEqual,
    ExclamationEqual,
    ExclamationEqualEqual,
    Carat,
    Bar,
    Ampersand,
    AmpersandAmpersand,
    BarBar,
    Question,
    QuestionAs,
    QuestionColon,
    QuestionQuestion,
    QuestionQuestionEqual,
    Colon,
    Semicolon,
    Equal,
    StarStarEqual,
    StarEqual,
    SlashEqual,
    PercentEqual,
    PlusEqual,
    MinusEqual,
    DotEqual,
    LessThanLessThanEqual,
    GreaterThanGreaterThanEqual,
    AmpersandEqual,
    CaratEqual,
    BarEqual,
    Comma,
    At,
    ColonColon,
    EqualGreaterThan,
    EqualEqualGreaterThan,
    QuestionMinusGreaterThan,
    DotDotDot,
    DollarDollar,
    BarGreaterThan,
    SlashGreaterThan,
    LessThanSlash,
    LessThanQuestion,
    QuestionGreaterThan,
    ColonAt,
    // Variable text tokens
    ErrorToken,
    Name,
    Variable,
    DecimalLiteral,
    OctalLiteral,
    HexadecimalLiteral,
    BinaryLiteral,
    FloatingLiteral,
    SingleQuotedStringLiteral,
    DoubleQuotedStringLiteral,
    DoubleQuotedStringLiteralHead,
    StringLiteralBody,
    DoubleQuotedStringLiteralTail,
    HeredocStringLiteral,
    HeredocStringLiteralHead,
    HeredocStringLiteralTail,
    NowdocStringLiteral,
    BooleanLiteral,
    XHPCategoryName,
    XHPElementName,
    XHPClassName,
    XHPStringLiteral,
    XHPBody,
    XHPComment,
    Markup,
}

impl TokenKind {
    pub fn to_string(&self) -> &str {
        match self {
            // No text tokens
            TokenKind::EndOfFile => "end_of_file",
            // Given text tokens
            TokenKind::Abstract => "abstract",
            TokenKind::Array => "array",
            TokenKind::Arraykey => "arraykey",
            TokenKind::As => "as",
            TokenKind::Async => "async",
            TokenKind::Attribute => "attribute",
            TokenKind::Await => "await",
            TokenKind::Backslash => "\\",
            TokenKind::Binary => "binary",
            TokenKind::Bool => "bool",
            TokenKind::Boolean => "boolean",
            TokenKind::Break => "break",
            TokenKind::Case => "case",
            TokenKind::Catch => "catch",
            TokenKind::Category => "category",
            TokenKind::Children => "children",
            TokenKind::Class => "class",
            TokenKind::Classname => "classname",
            TokenKind::Clone => "clone",
            TokenKind::Const => "const",
            TokenKind::Construct => "__construct",
            TokenKind::Continue => "continue",
            TokenKind::Coroutine => "coroutine",
            TokenKind::Darray => "darray",
            TokenKind::Default => "default",
            TokenKind::Define => "define",
            TokenKind::Dict => "dict",
            TokenKind::Do => "do",
            TokenKind::Double => "double",
            TokenKind::Echo => "echo",
            TokenKind::Else => "else",
            TokenKind::Elseif => "elseif",
            TokenKind::Empty => "empty",
            TokenKind::Endfor => "endfor",
            TokenKind::Endforeach => "endforeach",
            TokenKind::Endif => "endif",
            TokenKind::Endswitch => "endswitch",
            TokenKind::Endwhile => "endwhile",
            TokenKind::Enum => "enum",
            TokenKind::Eval => "eval",
            TokenKind::Extends => "extends",
            TokenKind::Fallthrough => "fallthrough",
            TokenKind::Float => "float",
            TokenKind::File => "file",
            TokenKind::Final => "final",
            TokenKind::Finally => "finally",
            TokenKind::For => "for",
            TokenKind::Foreach => "foreach",
            TokenKind::From => "from",
            TokenKind::Function => "function",
            TokenKind::Global => "global",
            TokenKind::Concurrent => "concurrent",
            TokenKind::Goto => "goto",
            TokenKind::HaltCompiler => "__halt_compiler",
            TokenKind::If => "if",
            TokenKind::Implements => "implements",
            TokenKind::Include => "include",
            TokenKind::Include_once => "include_once",
            TokenKind::Inout => "inout",
            TokenKind::Instanceof => "instanceof",
            TokenKind::Insteadof => "insteadof",
            TokenKind::Int => "int",
            TokenKind::Integer => "integer",
            TokenKind::Interface => "interface",
            TokenKind::Is => "is",
            TokenKind::Isset => "isset",
            TokenKind::Keyset => "keyset",
            TokenKind::Let => "let",
            TokenKind::List => "list",
            TokenKind::Mixed => "mixed",
            TokenKind::Namespace => "namespace",
            TokenKind::New => "new",
            TokenKind::Newtype => "newtype",
            TokenKind::Noreturn => "noreturn",
            TokenKind::Num => "num",
            TokenKind::Object => "object",
            TokenKind::Parent => "parent",
            TokenKind::Print => "print",
            TokenKind::Private => "private",
            TokenKind::Protected => "protected",
            TokenKind::Public => "public",
            TokenKind::Real => "real",
            TokenKind::Reify => "reify",
            TokenKind::Record => "recordname",
            TokenKind::RecordDec => "record",
            TokenKind::Require => "require",
            TokenKind::Require_once => "require_once",
            TokenKind::Required => "required",
            TokenKind::Lateinit => "lateinit",
            TokenKind::Resource => "resource",
            TokenKind::Return => "return",
            TokenKind::SelfToken => "self",
            TokenKind::Shape => "shape",
            TokenKind::Static => "static",
            TokenKind::String => "string",
            TokenKind::Super => "super",
            TokenKind::Suspend => "suspend",
            TokenKind::Switch => "switch",
            TokenKind::This => "this",
            TokenKind::Throw => "throw",
            TokenKind::Trait => "trait",
            TokenKind::Try => "try",
            TokenKind::Tuple => "tuple",
            TokenKind::Type => "type",
            TokenKind::Unset => "unset",
            TokenKind::Use => "use",
            TokenKind::Using => "using",
            TokenKind::Var => "var",
            TokenKind::Varray => "varray",
            TokenKind::Vec => "vec",
            TokenKind::Void => "void",
            TokenKind::Where => "where",
            TokenKind::While => "while",
            TokenKind::Yield => "yield",
            TokenKind::NullLiteral => "null",
            TokenKind::LeftBracket => "[",
            TokenKind::RightBracket => "]",
            TokenKind::LeftParen => "(",
            TokenKind::RightParen => ")",
            TokenKind::LeftBrace => "{",
            TokenKind::RightBrace => "}",
            TokenKind::Dot => ".",
            TokenKind::MinusGreaterThan => "->",
            TokenKind::PlusPlus => "++",
            TokenKind::MinusMinus => "--",
            TokenKind::StarStar => "**",
            TokenKind::Star => "*",
            TokenKind::Plus => "+",
            TokenKind::Minus => "-",
            TokenKind::Tilde => "~",
            TokenKind::Exclamation => "!",
            TokenKind::Dollar => "$",
            TokenKind::Slash => "/",
            TokenKind::Percent => "%",
            TokenKind::LessThanEqualGreaterThan => "<=>",
            TokenKind::LessThanLessThan => "<<",
            TokenKind::GreaterThanGreaterThan => ">>",
            TokenKind::LessThan => "<",
            TokenKind::GreaterThan => ">",
            TokenKind::LessThanEqual => "<=",
            TokenKind::GreaterThanEqual => ">=",
            TokenKind::EqualEqual => "==",
            TokenKind::EqualEqualEqual => "===",
            TokenKind::ExclamationEqual => "!=",
            TokenKind::ExclamationEqualEqual => "!==",
            TokenKind::Carat => "^",
            TokenKind::Bar => "|",
            TokenKind::Ampersand => "&",
            TokenKind::AmpersandAmpersand => "&&",
            TokenKind::BarBar => "||",
            TokenKind::Question => "?",
            TokenKind::QuestionAs => "?as",
            TokenKind::QuestionColon => "?:",
            TokenKind::QuestionQuestion => "??",
            TokenKind::QuestionQuestionEqual => "??=",
            TokenKind::Colon => ":",
            TokenKind::Semicolon => ";",
            TokenKind::Equal => "=",
            TokenKind::StarStarEqual => "**=",
            TokenKind::StarEqual => "*=",
            TokenKind::SlashEqual => "/=",
            TokenKind::PercentEqual => "%=",
            TokenKind::PlusEqual => "+=",
            TokenKind::MinusEqual => "-=",
            TokenKind::DotEqual => ".=",
            TokenKind::LessThanLessThanEqual => "<<=",
            TokenKind::GreaterThanGreaterThanEqual => ">>=",
            TokenKind::AmpersandEqual => "&=",
            TokenKind::CaratEqual => "^=",
            TokenKind::BarEqual => "|=",
            TokenKind::Comma => ",",
            TokenKind::At => "@",
            TokenKind::ColonColon => "::",
            TokenKind::EqualGreaterThan => "=>",
            TokenKind::EqualEqualGreaterThan => "==>",
            TokenKind::QuestionMinusGreaterThan => "?->",
            TokenKind::DotDotDot => "...",
            TokenKind::DollarDollar => "$$",
            TokenKind::BarGreaterThan => "|>",
            TokenKind::SlashGreaterThan => "/>",
            TokenKind::LessThanSlash => "</",
            TokenKind::LessThanQuestion => "<?",
            TokenKind::QuestionGreaterThan => "?>",
            TokenKind::ColonAt => ":@",
            // Variable text tokes
            TokenKind::ErrorToken => "error_token",
            TokenKind::Name => "name",
            TokenKind::Variable => "variable",
            TokenKind::DecimalLiteral => "decimal_literal",
            TokenKind::OctalLiteral => "octal_literal",
            TokenKind::HexadecimalLiteral => "hexadecimal_literal",
            TokenKind::BinaryLiteral => "binary_literal",
            TokenKind::FloatingLiteral => "floating_literal",
            TokenKind::SingleQuotedStringLiteral => "single_quoted_string_literal",
            TokenKind::DoubleQuotedStringLiteral => "double_quoted_string_literal",
            TokenKind::DoubleQuotedStringLiteralHead => "double_quoted_string_literal_head",
            TokenKind::StringLiteralBody => "string_literal_body",
            TokenKind::DoubleQuotedStringLiteralTail => "double_quoted_string_literal_tail",
            TokenKind::HeredocStringLiteral => "heredoc_string_literal",
            TokenKind::HeredocStringLiteralHead => "heredoc_string_literal_head",
            TokenKind::HeredocStringLiteralTail => "heredoc_string_literal_tail",
            TokenKind::NowdocStringLiteral => "nowdoc_string_literal",
            TokenKind::BooleanLiteral => "boolean_literal",
            TokenKind::XHPCategoryName => "XHP_category_name",
            TokenKind::XHPElementName => "XHP_element_name",
            TokenKind::XHPClassName => "XHP_class_name",
            TokenKind::XHPStringLiteral => "XHP_string_literal",
            TokenKind::XHPBody => "XHP_body",
            TokenKind::XHPComment => "XHP_comment",
            TokenKind::Markup => "markup",
        }
    }

    pub fn from_string(
        keyword: &[u8],
        only_reserved: bool,
    ) -> Option<Self> {
        let keyword = unsafe { std::str::from_utf8_unchecked(keyword) };
        match keyword {
            "true" if !only_reserved => Some(TokenKind::BooleanLiteral),
            "false" if !only_reserved => Some(TokenKind::BooleanLiteral),
            "abstract" => Some(TokenKind::Abstract),
            "array" => Some(TokenKind::Array),
            "arraykey" if !only_reserved => Some(TokenKind::Arraykey),
            "as" => Some(TokenKind::As),
            "async" => Some(TokenKind::Async),
            "attribute" if !only_reserved => Some(TokenKind::Attribute),
            "await" => Some(TokenKind::Await),
            "\\" => Some(TokenKind::Backslash),
            "binary" if !only_reserved => Some(TokenKind::Binary),
            "bool" if !only_reserved => Some(TokenKind::Bool),
            "boolean" if !only_reserved => Some(TokenKind::Boolean),
            "break" => Some(TokenKind::Break),
            "case" => Some(TokenKind::Case),
            "catch" => Some(TokenKind::Catch),
            "category" if !only_reserved => Some(TokenKind::Category),
            "children" if !only_reserved => Some(TokenKind::Children),
            "class" => Some(TokenKind::Class),
            "classname" if !only_reserved => Some(TokenKind::Classname),
            "clone" => Some(TokenKind::Clone),
            "const" => Some(TokenKind::Const),
            "__construct" => Some(TokenKind::Construct),
            "continue" => Some(TokenKind::Continue),
            "coroutine" if !only_reserved => Some(TokenKind::Coroutine),
            "darray" if !only_reserved => Some(TokenKind::Darray),
            "default" => Some(TokenKind::Default),
            "define" if !only_reserved => Some(TokenKind::Define),
            "dict" if !only_reserved => Some(TokenKind::Dict),
            "do" => Some(TokenKind::Do),
            "double" if !only_reserved => Some(TokenKind::Double),
            "echo" => Some(TokenKind::Echo),
            "else" => Some(TokenKind::Else),
            "elseif" => Some(TokenKind::Elseif),
            "empty" => Some(TokenKind::Empty),
            "endfor" => Some(TokenKind::Endfor),
            "endforeach" => Some(TokenKind::Endforeach),
            "endif" => Some(TokenKind::Endif),
            "endswitch" => Some(TokenKind::Endswitch),
            "endwhile" => Some(TokenKind::Endwhile),
            "enum" if !only_reserved => Some(TokenKind::Enum),
            "eval" => Some(TokenKind::Eval),
            "extends" => Some(TokenKind::Extends),
            "fallthrough" if !only_reserved => Some(TokenKind::Fallthrough),
            "float" if !only_reserved => Some(TokenKind::Float),
            "file" if !only_reserved => Some(TokenKind::File),
            "final" => Some(TokenKind::Final),
            "finally" => Some(TokenKind::Finally),
            "for" => Some(TokenKind::For),
            "foreach" => Some(TokenKind::Foreach),
            "from" if !only_reserved => Some(TokenKind::From),
            "function" => Some(TokenKind::Function),
            "global" => Some(TokenKind::Global),
            "concurrent" => Some(TokenKind::Concurrent),
            "goto" => Some(TokenKind::Goto),
            "__halt_compiler" => Some(TokenKind::HaltCompiler),
            "if" => Some(TokenKind::If),
            "implements" => Some(TokenKind::Implements),
            "include" => Some(TokenKind::Include),
            "include_once" => Some(TokenKind::Include_once),
            "inout" => Some(TokenKind::Inout),
            "instanceof" => Some(TokenKind::Instanceof),
            "insteadof" => Some(TokenKind::Insteadof),
            "int" if !only_reserved => Some(TokenKind::Int),
            "integer" if !only_reserved => Some(TokenKind::Integer),
            "interface" => Some(TokenKind::Interface),
            "is" if !only_reserved => Some(TokenKind::Is),
            "isset" => Some(TokenKind::Isset),
            "keyset" if !only_reserved => Some(TokenKind::Keyset),
            "let" if !only_reserved => Some(TokenKind::Let),
            "list" => Some(TokenKind::List),
            "mixed" if !only_reserved => Some(TokenKind::Mixed),
            "namespace" if !only_reserved => Some(TokenKind::Namespace),
            "new" => Some(TokenKind::New),
            "newtype" if !only_reserved => Some(TokenKind::Newtype),
            "noreturn" if !only_reserved => Some(TokenKind::Noreturn),
            "num" if !only_reserved => Some(TokenKind::Num),
            "object" if !only_reserved => Some(TokenKind::Object),
            "parent" if !only_reserved => Some(TokenKind::Parent),
            "print" => Some(TokenKind::Print),
            "private" => Some(TokenKind::Private),
            "protected" => Some(TokenKind::Protected),
            "public" => Some(TokenKind::Public),
            "real" if !only_reserved => Some(TokenKind::Real),
            "reify" if !only_reserved => Some(TokenKind::Reify),
            "recordname" => Some(TokenKind::Record),
            "record" => Some(TokenKind::RecordDec),
            "require" => Some(TokenKind::Require),
            "require_once" => Some(TokenKind::Require_once),
            "required" => Some(TokenKind::Required),
            "lateinit" => Some(TokenKind::Lateinit),
            "resource" if !only_reserved => Some(TokenKind::Resource),
            "return" => Some(TokenKind::Return),
            "self" if !only_reserved => Some(TokenKind::SelfToken),
            "shape" => Some(TokenKind::Shape),
            "static" => Some(TokenKind::Static),
            "string" if !only_reserved => Some(TokenKind::String),
            "super" if !only_reserved => Some(TokenKind::Super),
            "suspend" if !only_reserved => Some(TokenKind::Suspend),
            "switch" => Some(TokenKind::Switch),
            "this" if !only_reserved => Some(TokenKind::This),
            "throw" => Some(TokenKind::Throw),
            "trait" => Some(TokenKind::Trait),
            "try" => Some(TokenKind::Try),
            "tuple" => Some(TokenKind::Tuple),
            "type" if !only_reserved => Some(TokenKind::Type),
            "unset" => Some(TokenKind::Unset),
            "use" => Some(TokenKind::Use),
            "using" => Some(TokenKind::Using),
            "var" => Some(TokenKind::Var),
            "varray" if !only_reserved => Some(TokenKind::Varray),
            "vec" if !only_reserved => Some(TokenKind::Vec),
            "void" if !only_reserved => Some(TokenKind::Void),
            "where" if !only_reserved => Some(TokenKind::Where),
            "while" => Some(TokenKind::While),
            "yield" => Some(TokenKind::Yield),
            "null" if !only_reserved => Some(TokenKind::NullLiteral),
            "[" => Some(TokenKind::LeftBracket),
            "]" => Some(TokenKind::RightBracket),
            "(" => Some(TokenKind::LeftParen),
            ")" => Some(TokenKind::RightParen),
            "{" => Some(TokenKind::LeftBrace),
            "}" => Some(TokenKind::RightBrace),
            "." => Some(TokenKind::Dot),
            "->" => Some(TokenKind::MinusGreaterThan),
            "++" => Some(TokenKind::PlusPlus),
            "--" => Some(TokenKind::MinusMinus),
            "**" => Some(TokenKind::StarStar),
            "*" => Some(TokenKind::Star),
            "+" => Some(TokenKind::Plus),
            "-" => Some(TokenKind::Minus),
            "~" => Some(TokenKind::Tilde),
            "!" => Some(TokenKind::Exclamation),
            "$" => Some(TokenKind::Dollar),
            "/" => Some(TokenKind::Slash),
            "%" => Some(TokenKind::Percent),
            "<=>" => Some(TokenKind::LessThanEqualGreaterThan),
            "<<" => Some(TokenKind::LessThanLessThan),
            ">>" => Some(TokenKind::GreaterThanGreaterThan),
            "<" => Some(TokenKind::LessThan),
            ">" => Some(TokenKind::GreaterThan),
            "<=" => Some(TokenKind::LessThanEqual),
            ">=" => Some(TokenKind::GreaterThanEqual),
            "==" => Some(TokenKind::EqualEqual),
            "===" => Some(TokenKind::EqualEqualEqual),
            "!=" => Some(TokenKind::ExclamationEqual),
            "!==" => Some(TokenKind::ExclamationEqualEqual),
            "^" => Some(TokenKind::Carat),
            "|" => Some(TokenKind::Bar),
            "&" => Some(TokenKind::Ampersand),
            "&&" => Some(TokenKind::AmpersandAmpersand),
            "||" => Some(TokenKind::BarBar),
            "?" => Some(TokenKind::Question),
            "?as" => Some(TokenKind::QuestionAs),
            "?:" => Some(TokenKind::QuestionColon),
            "??" => Some(TokenKind::QuestionQuestion),
            "??=" => Some(TokenKind::QuestionQuestionEqual),
            ":" => Some(TokenKind::Colon),
            ";" => Some(TokenKind::Semicolon),
            "=" => Some(TokenKind::Equal),
            "**=" => Some(TokenKind::StarStarEqual),
            "*=" => Some(TokenKind::StarEqual),
            "/=" => Some(TokenKind::SlashEqual),
            "%=" => Some(TokenKind::PercentEqual),
            "+=" => Some(TokenKind::PlusEqual),
            "-=" => Some(TokenKind::MinusEqual),
            ".=" => Some(TokenKind::DotEqual),
            "<<=" => Some(TokenKind::LessThanLessThanEqual),
            ">>=" => Some(TokenKind::GreaterThanGreaterThanEqual),
            "&=" => Some(TokenKind::AmpersandEqual),
            "^=" => Some(TokenKind::CaratEqual),
            "|=" => Some(TokenKind::BarEqual),
            "," => Some(TokenKind::Comma),
            "@" => Some(TokenKind::At),
            "::" => Some(TokenKind::ColonColon),
            "=>" => Some(TokenKind::EqualGreaterThan),
            "==>" => Some(TokenKind::EqualEqualGreaterThan),
            "?->" => Some(TokenKind::QuestionMinusGreaterThan),
            "..." => Some(TokenKind::DotDotDot),
            "$$" => Some(TokenKind::DollarDollar),
            "|>" => Some(TokenKind::BarGreaterThan),
            "/>" => Some(TokenKind::SlashGreaterThan),
            "</" => Some(TokenKind::LessThanSlash),
            "<?" => Some(TokenKind::LessThanQuestion),
            "?>" => Some(TokenKind::QuestionGreaterThan),
            ":@" => Some(TokenKind::ColonAt),
            _ => None,
        }
    }

    pub fn ocaml_tag(self) -> u8 {
        match self {
            TokenKind::EndOfFile => 0,
            TokenKind::Abstract => 1,
            TokenKind::Array => 2,
            TokenKind::Arraykey => 3,
            TokenKind::As => 4,
            TokenKind::Async => 5,
            TokenKind::Attribute => 6,
            TokenKind::Await => 7,
            TokenKind::Backslash => 8,
            TokenKind::Binary => 9,
            TokenKind::Bool => 10,
            TokenKind::Boolean => 11,
            TokenKind::Break => 12,
            TokenKind::Case => 13,
            TokenKind::Catch => 14,
            TokenKind::Category => 15,
            TokenKind::Children => 16,
            TokenKind::Class => 17,
            TokenKind::Classname => 18,
            TokenKind::Clone => 19,
            TokenKind::Const => 20,
            TokenKind::Construct => 21,
            TokenKind::Continue => 22,
            TokenKind::Coroutine => 23,
            TokenKind::Darray => 24,
            TokenKind::Default => 25,
            TokenKind::Define => 26,
            TokenKind::Dict => 27,
            TokenKind::Do => 28,
            TokenKind::Double => 29,
            TokenKind::Echo => 30,
            TokenKind::Else => 31,
            TokenKind::Elseif => 32,
            TokenKind::Empty => 33,
            TokenKind::Endfor => 34,
            TokenKind::Endforeach => 35,
            TokenKind::Endif => 36,
            TokenKind::Endswitch => 37,
            TokenKind::Endwhile => 38,
            TokenKind::Enum => 39,
            TokenKind::Eval => 40,
            TokenKind::Extends => 41,
            TokenKind::Fallthrough => 42,
            TokenKind::Float => 43,
            TokenKind::File => 44,
            TokenKind::Final => 45,
            TokenKind::Finally => 46,
            TokenKind::For => 47,
            TokenKind::Foreach => 48,
            TokenKind::From => 49,
            TokenKind::Function => 50,
            TokenKind::Global => 51,
            TokenKind::Concurrent => 52,
            TokenKind::Goto => 53,
            TokenKind::HaltCompiler => 54,
            TokenKind::If => 55,
            TokenKind::Implements => 56,
            TokenKind::Include => 57,
            TokenKind::Include_once => 58,
            TokenKind::Inout => 59,
            TokenKind::Instanceof => 60,
            TokenKind::Insteadof => 61,
            TokenKind::Int => 62,
            TokenKind::Integer => 63,
            TokenKind::Interface => 64,
            TokenKind::Is => 65,
            TokenKind::Isset => 66,
            TokenKind::Keyset => 67,
            TokenKind::Let => 68,
            TokenKind::List => 69,
            TokenKind::Mixed => 70,
            TokenKind::Namespace => 71,
            TokenKind::New => 72,
            TokenKind::Newtype => 73,
            TokenKind::Noreturn => 74,
            TokenKind::Num => 75,
            TokenKind::Object => 76,
            TokenKind::Parent => 77,
            TokenKind::Print => 78,
            TokenKind::Private => 79,
            TokenKind::Protected => 80,
            TokenKind::Public => 81,
            TokenKind::Real => 82,
            TokenKind::Reify => 83,
            TokenKind::Record => 84,
            TokenKind::RecordDec => 85,
            TokenKind::Require => 86,
            TokenKind::Require_once => 87,
            TokenKind::Required => 88,
            TokenKind::Lateinit => 89,
            TokenKind::Resource => 90,
            TokenKind::Return => 91,
            TokenKind::SelfToken => 92,
            TokenKind::Shape => 93,
            TokenKind::Static => 94,
            TokenKind::String => 95,
            TokenKind::Super => 96,
            TokenKind::Suspend => 97,
            TokenKind::Switch => 98,
            TokenKind::This => 99,
            TokenKind::Throw => 100,
            TokenKind::Trait => 101,
            TokenKind::Try => 102,
            TokenKind::Tuple => 103,
            TokenKind::Type => 104,
            TokenKind::Unset => 105,
            TokenKind::Use => 106,
            TokenKind::Using => 107,
            TokenKind::Var => 108,
            TokenKind::Varray => 109,
            TokenKind::Vec => 110,
            TokenKind::Void => 111,
            TokenKind::Where => 112,
            TokenKind::While => 113,
            TokenKind::Yield => 114,
            TokenKind::NullLiteral => 115,
            TokenKind::LeftBracket => 116,
            TokenKind::RightBracket => 117,
            TokenKind::LeftParen => 118,
            TokenKind::RightParen => 119,
            TokenKind::LeftBrace => 120,
            TokenKind::RightBrace => 121,
            TokenKind::Dot => 122,
            TokenKind::MinusGreaterThan => 123,
            TokenKind::PlusPlus => 124,
            TokenKind::MinusMinus => 125,
            TokenKind::StarStar => 126,
            TokenKind::Star => 127,
            TokenKind::Plus => 128,
            TokenKind::Minus => 129,
            TokenKind::Tilde => 130,
            TokenKind::Exclamation => 131,
            TokenKind::Dollar => 132,
            TokenKind::Slash => 133,
            TokenKind::Percent => 134,
            TokenKind::LessThanEqualGreaterThan => 135,
            TokenKind::LessThanLessThan => 136,
            TokenKind::GreaterThanGreaterThan => 137,
            TokenKind::LessThan => 138,
            TokenKind::GreaterThan => 139,
            TokenKind::LessThanEqual => 140,
            TokenKind::GreaterThanEqual => 141,
            TokenKind::EqualEqual => 142,
            TokenKind::EqualEqualEqual => 143,
            TokenKind::ExclamationEqual => 144,
            TokenKind::ExclamationEqualEqual => 145,
            TokenKind::Carat => 146,
            TokenKind::Bar => 147,
            TokenKind::Ampersand => 148,
            TokenKind::AmpersandAmpersand => 149,
            TokenKind::BarBar => 150,
            TokenKind::Question => 151,
            TokenKind::QuestionAs => 152,
            TokenKind::QuestionColon => 153,
            TokenKind::QuestionQuestion => 154,
            TokenKind::QuestionQuestionEqual => 155,
            TokenKind::Colon => 156,
            TokenKind::Semicolon => 157,
            TokenKind::Equal => 158,
            TokenKind::StarStarEqual => 159,
            TokenKind::StarEqual => 160,
            TokenKind::SlashEqual => 161,
            TokenKind::PercentEqual => 162,
            TokenKind::PlusEqual => 163,
            TokenKind::MinusEqual => 164,
            TokenKind::DotEqual => 165,
            TokenKind::LessThanLessThanEqual => 166,
            TokenKind::GreaterThanGreaterThanEqual => 167,
            TokenKind::AmpersandEqual => 168,
            TokenKind::CaratEqual => 169,
            TokenKind::BarEqual => 170,
            TokenKind::Comma => 171,
            TokenKind::At => 172,
            TokenKind::ColonColon => 173,
            TokenKind::EqualGreaterThan => 174,
            TokenKind::EqualEqualGreaterThan => 175,
            TokenKind::QuestionMinusGreaterThan => 176,
            TokenKind::DotDotDot => 177,
            TokenKind::DollarDollar => 178,
            TokenKind::BarGreaterThan => 179,
            TokenKind::SlashGreaterThan => 180,
            TokenKind::LessThanSlash => 181,
            TokenKind::LessThanQuestion => 182,
            TokenKind::QuestionGreaterThan => 183,
            TokenKind::ColonAt => 184,
            TokenKind::ErrorToken => 185,
            TokenKind::Name => 186,
            TokenKind::Variable => 187,
            TokenKind::DecimalLiteral => 188,
            TokenKind::OctalLiteral => 189,
            TokenKind::HexadecimalLiteral => 190,
            TokenKind::BinaryLiteral => 191,
            TokenKind::FloatingLiteral => 192,
            TokenKind::SingleQuotedStringLiteral => 193,
            TokenKind::DoubleQuotedStringLiteral => 194,
            TokenKind::DoubleQuotedStringLiteralHead => 195,
            TokenKind::StringLiteralBody => 196,
            TokenKind::DoubleQuotedStringLiteralTail => 197,
            TokenKind::HeredocStringLiteral => 198,
            TokenKind::HeredocStringLiteralHead => 199,
            TokenKind::HeredocStringLiteralTail => 200,
            TokenKind::NowdocStringLiteral => 201,
            TokenKind::BooleanLiteral => 202,
            TokenKind::XHPCategoryName => 203,
            TokenKind::XHPElementName => 204,
            TokenKind::XHPClassName => 205,
            TokenKind::XHPStringLiteral => 206,
            TokenKind::XHPBody => 207,
            TokenKind::XHPComment => 208,
            TokenKind::Markup => 209,
        }
    }
}
