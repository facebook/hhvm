#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations

import typing as _typing
import builtins


import folly.iobuf as _fbthrift_iobuf
import module.thrift_abstract_types as _fbthrift_python_abstract_types
import thrift.python.types as _fbthrift_python_types
import thrift.python.mutable_types as _fbthrift_python_mutable_types
import thrift.python.mutable_exceptions as _fbthrift_python_mutable_exceptions
import thrift.python.mutable_containers as _fbthrift_python_mutable_containers


@_typing.final
class InitialResponse(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.InitialResponse):
    @property
    def content(self) -> builtins.str: ...
    @content.setter
    def content(self, value: builtins.str) -> None: ...

    def __init__(
        self, *,
        content: _typing.Optional[builtins.str]=...
    ) -> None: ...

    def __call__(
        self, *,
        content: _typing.Optional[builtins.str]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.str]]]: ...
    def _to_python(self) -> "module.thrift_types.InitialResponse": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "module.types.InitialResponse": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.InitialResponse": ...  # type: ignore
_fbthrift_InitialResponse = InitialResponse

@_typing.final
class FinalResponse(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.FinalResponse):
    @property
    def content(self) -> builtins.str: ...
    @content.setter
    def content(self, value: builtins.str) -> None: ...

    def __init__(
        self, *,
        content: _typing.Optional[builtins.str]=...
    ) -> None: ...

    def __call__(
        self, *,
        content: _typing.Optional[builtins.str]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.str]]]: ...
    def _to_python(self) -> "module.thrift_types.FinalResponse": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "module.types.FinalResponse": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.FinalResponse": ...  # type: ignore
_fbthrift_FinalResponse = FinalResponse

@_typing.final
class SinkPayload(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.SinkPayload):
    @property
    def content(self) -> builtins.str: ...
    @content.setter
    def content(self, value: builtins.str) -> None: ...

    def __init__(
        self, *,
        content: _typing.Optional[builtins.str]=...
    ) -> None: ...

    def __call__(
        self, *,
        content: _typing.Optional[builtins.str]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.str]]]: ...
    def _to_python(self) -> "module.thrift_types.SinkPayload": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "module.types.SinkPayload": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.SinkPayload": ...  # type: ignore
_fbthrift_SinkPayload = SinkPayload

@_typing.final
class CompatibleWithKeywordSink(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.CompatibleWithKeywordSink):
    @property
    def sink(self) -> builtins.str: ...
    @sink.setter
    def sink(self, value: builtins.str) -> None: ...

    def __init__(
        self, *,
        sink: _typing.Optional[builtins.str]=...
    ) -> None: ...

    def __call__(
        self, *,
        sink: _typing.Optional[builtins.str]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.str]]]: ...
    def _to_python(self) -> "module.thrift_types.CompatibleWithKeywordSink": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "module.types.CompatibleWithKeywordSink": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.CompatibleWithKeywordSink": ...  # type: ignore
_fbthrift_CompatibleWithKeywordSink = CompatibleWithKeywordSink

@_typing.final
class InitialException(_fbthrift_python_mutable_exceptions.MutableGeneratedError, _fbthrift_python_abstract_types.InitialException):
    @property
    def reason(self) -> builtins.str: ...
    @reason.setter
    def reason(self, value: builtins.str) -> None: ...

    def __init__(
        self, *,
        reason: _typing.Optional[builtins.str]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.str]]]: ...
    def _to_python(self) -> "module.thrift_types.InitialException": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "module.types.InitialException": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.InitialException": ...  # type: ignore
_fbthrift_InitialException = InitialException

@_typing.final
class SinkException1(_fbthrift_python_mutable_exceptions.MutableGeneratedError, _fbthrift_python_abstract_types.SinkException1):
    @property
    def reason(self) -> builtins.str: ...
    @reason.setter
    def reason(self, value: builtins.str) -> None: ...

    def __init__(
        self, *,
        reason: _typing.Optional[builtins.str]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.str]]]: ...
    def _to_python(self) -> "module.thrift_types.SinkException1": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "module.types.SinkException1": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.SinkException1": ...  # type: ignore
_fbthrift_SinkException1 = SinkException1

@_typing.final
class SinkException2(_fbthrift_python_mutable_exceptions.MutableGeneratedError, _fbthrift_python_abstract_types.SinkException2):
    @property
    def reason(self) -> builtins.int: ...
    @reason.setter
    def reason(self, value: builtins.int) -> None: ...

    def __init__(
        self, *,
        reason: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.int]]]: ...
    def _to_python(self) -> "module.thrift_types.SinkException2": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "module.types.SinkException2": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.SinkException2": ...  # type: ignore
_fbthrift_SinkException2 = SinkException2
