Builtin calls:
ksort() expects parameter 1 by reference, but the call was not annotated with '&' on line 25
array(3) {
  ["red"]=>
  int(4)
  ["apple"]=>
  int(12)
  ["foo"]=>
  int(1)
}
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(4)
  [2]=>
  int(12)
}
Literal calls:
foo() expects parameter 3 by reference, but the call was not annotated with '&' on line 32
array(1) {
  ["x"]=>
  array(1) {
    ["y"]=>
    string(1) "z"
  }
}
array(2) {
  ["x"]=>
  array(1) {
    ["y"]=>
    string(1) "z"
  }
  ["a"]=>
  array(1) {
    ["b"]=>
    int(0)
  }
}
Plain calls:
foo() expects parameter 3 by reference, but the call was not annotated with '&' on line 41
foo() expects parameter 2 by value, but the call was annotated with '&' on line 43
foo() expects parameter 2 by value, but the call was annotated with '&' on line 44
foo() expects parameter 1 by value, but the call was annotated with '&' on line 45
foo() expects parameter 1 by value, but the call was annotated with '&' on line 46
foo() expects parameter 1 by value, but the call was annotated with '&' on line 47
foo() expects parameter 1 by value, but the call was annotated with '&' on line 48
$b[$c][$d] = $b[q][r] = 1
Dynamic calls:
foo() expects parameter 1 by value, but the call was annotated with '&' on line 52
foo() expects parameter 2 by value, but the call was annotated with '&' on line 53
foo() expects parameter 3 by reference, but the call was not annotated with '&' on line 54
$b[$c][$d] = $b[q][r] = 2
CUF/dynamic-CUF calls:
foo() expects parameter 3 by reference, but the call was not annotated with '&' on line 59
foo() expects parameter 3 by reference, but the call was not annotated with '&' on line 60
$b[$c][$d] = $b[q][r] = 2
CUF + ref calls:
foo() expects parameter 3 by reference, but the call was not annotated with '&' on line 64
call_user_func() expects parameter 1 by value, but the call was annotated with '&' on line 65
call_user_func() expects parameter 2 by value, but the call was annotated with '&' on line 66
call_user_func() expects parameter 3 by value, but the call was annotated with '&' on line 67
call_user_func() expects parameter 4 by value, but the call was annotated with '&' on line 68
$b[$c][$d] = $b[q][r] = 2
dynamic-CUF + ref calls:
foo() expects parameter 3 by reference, but the call was not annotated with '&' on line 72
call_user_func() expects parameter 1 by value, but the call was annotated with '&' on line 73
call_user_func() expects parameter 2 by value, but the call was annotated with '&' on line 74
call_user_func() expects parameter 3 by value, but the call was annotated with '&' on line 75
call_user_func() expects parameter 4 by value, but the call was annotated with '&' on line 76
$b[$c][$d] = $b[q][r] = 2
CUFA calls:
foo() expects parameter 3 by reference, but the call was not annotated with '&' on line 84
foo() expects parameter 3 by reference, but the call was not annotated with '&' on line 85
foo() expects parameter 3 by reference, but the call was not annotated with '&' on line 86
$b[$c][$d] = $b[q][r] = 2
CUFA + ref calls:
call_user_func_array() expects parameter 1 by value, but the call was annotated with '&' on line 90
call_user_func_array() expects parameter 2 by value, but the call was annotated with '&' on line 91
$b[$c][$d] = $b[q][r] = 2
dynamic-CUFA calls:
foo() expects parameter 3 by reference, but the call was not annotated with '&' on line 95
foo() expects parameter 3 by reference, but the call was not annotated with '&' on line 96
foo() expects parameter 3 by reference, but the call was not annotated with '&' on line 97
$b[$c][$d] = $b[q][r] = 2
dynamic-CUFA + ref calls:
call_user_func_array() expects parameter 1 by value, but the call was annotated with '&' on line 101
call_user_func_array() expects parameter 2 by value, but the call was annotated with '&' on line 102
$b[$c][$d] = $b[q][r] = 2
fb_intercept:
Fatal call:
foo() expects parameter 3 by reference, but the call was not annotated with '&' on line 109
