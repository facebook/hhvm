/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "thrift/compiler/test/fixtures/cpp2-struct-footprint/gen-cpp2/ExtendedFootprintServiceAsyncClient.h"
#include "thrift/compiler/test/fixtures/cpp2-struct-footprint/gen-cpp2/module_types.h"
#if __has_include("thrift/compiler/test/fixtures/cpp2-struct-footprint/gen-cpp2/FootprintTestService.h")
#include "thrift/compiler/test/fixtures/cpp2-struct-footprint/gen-cpp2/FootprintTestService.h"
#else
#include "thrift/compiler/test/fixtures/cpp2-struct-footprint/gen-cpp2/module_handlers.h"
#endif

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace cpp2_struct_footprint {
class ExtendedFootprintService;
class ExtendedFootprintServiceAsyncProcessor;

class ExtendedFootprintServiceServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
} // namespace cpp2_struct_footprint

namespace apache::thrift {
template <>
class ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService> : virtual public ::cpp2_struct_footprint::FootprintTestServiceSvIf {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2_struct_footprint::ExtendedFootprintService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");

 public:
  std::string_view getGeneratedName() const override { return "ExtendedFootprintService"; }

  typedef ::cpp2_struct_footprint::ExtendedFootprintServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:

  virtual void sync_getComplexMap(::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>& /*_return*/);
  [[deprecated("Use sync_getComplexMap instead")]] virtual void getComplexMap(::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>& /*_return*/);
  virtual folly::Future<std::unique_ptr<::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>>> future_getComplexMap();
  virtual folly::SemiFuture<std::unique_ptr<::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>>> semifuture_getComplexMap();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>>> co_getComplexMap();
  virtual folly::coro::Task<std::unique_ptr<::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>>> co_getComplexMap(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_getComplexMap(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>>> callback);
 private:
  static ::cpp2_struct_footprint::ExtendedFootprintServiceServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_getComplexMap{apache::thrift::detail::si::InvocationType::AsyncTm};
 public:
  void fbthrift_execute_decorators_before_processIOBuf(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorArgType<::cpp2_struct_footprint::IOBuf>::type /*p_buf*/, apache::thrift::detail::DecoratorArgType<::cpp2_struct_footprint::IOBufPtr>::type /*p_ptr*/, apache::thrift::detail::DecoratorArgType<::cpp2_struct_footprint::I32Alias>::type /*p_alias*/) override {}
  void fbthrift_execute_decorators_after_processIOBuf(apache::thrift::Cpp2RequestContext& /*requestCtx*/) override {}
  void fbthrift_execute_decorators_before_getStruct(apache::thrift::Cpp2RequestContext& /*requestCtx*/) override {}
  void fbthrift_execute_decorators_after_getStruct(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::cpp2_struct_footprint::SimpleStruct>::type /*result*/) override {}
  void fbthrift_execute_decorators_before_setStruct(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorArgType<::cpp2_struct_footprint::SimpleStruct>::type /*p_input*/) override {}
  void fbthrift_execute_decorators_after_setStruct(apache::thrift::Cpp2RequestContext& /*requestCtx*/) override {}
  void fbthrift_execute_decorators_before_setStructList(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorArgType<::std::vector<::cpp2_struct_footprint::SimpleStruct>>::type /*p_items*/) override {}
  void fbthrift_execute_decorators_after_setStructList(apache::thrift::Cpp2RequestContext& /*requestCtx*/) override {}
  void fbthrift_execute_decorators_before_getStructList(apache::thrift::Cpp2RequestContext& /*requestCtx*/) override {}
  void fbthrift_execute_decorators_after_getStructList(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::std::vector<::cpp2_struct_footprint::SimpleStruct>>::type /*result*/) override {}
  void fbthrift_execute_decorators_before_getNestedContainer(apache::thrift::Cpp2RequestContext& /*requestCtx*/) override {}
  void fbthrift_execute_decorators_after_getNestedContainer(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::std::map<::std::string, ::std::vector<::cpp2_struct_footprint::SimpleStruct>>>::type /*result*/) override {}
  void fbthrift_execute_decorators_before_getTypedefStruct(apache::thrift::Cpp2RequestContext& /*requestCtx*/) override {}
  void fbthrift_execute_decorators_after_getTypedefStruct(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::cpp2_struct_footprint::MyStruct>::type /*result*/) override {}
  void fbthrift_execute_decorators_before_getTypedefList(apache::thrift::Cpp2RequestContext& /*requestCtx*/) override {}
  void fbthrift_execute_decorators_after_getTypedefList(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::cpp2_struct_footprint::StructList>::type /*result*/) override {}
  void fbthrift_execute_decorators_before_getUnion(apache::thrift::Cpp2RequestContext& /*requestCtx*/) override {}
  void fbthrift_execute_decorators_after_getUnion(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::cpp2_struct_footprint::TestUnion>::type /*result*/) override {}
  void fbthrift_execute_decorators_before_getCalculator(apache::thrift::Cpp2RequestContext& /*requestCtx*/) override {}
  void fbthrift_execute_decorators_after_getCalculator(apache::thrift::Cpp2RequestContext& /*requestCtx*/) override {}
  void fbthrift_execute_decorators_before_streamStructs(apache::thrift::Cpp2RequestContext& /*requestCtx*/) override {}
  void fbthrift_execute_decorators_after_streamStructs(apache::thrift::Cpp2RequestContext& /*requestCtx*/) override {}
  void fbthrift_execute_decorators_before_streamWithSinkInitial(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorArgType<::std::int32_t>::type /*p_input*/) override {}
  void fbthrift_execute_decorators_after_streamWithSinkInitial(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>>::type /*result*/) override {}
  void fbthrift_execute_decorators_before_streamWithSinkException(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorArgType<::std::int32_t>::type /*p_input*/) override {}
  void fbthrift_execute_decorators_after_streamWithSinkException(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>>::type /*result*/) override {}

  virtual void fbthrift_execute_decorators_before_getComplexMap(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_getComplexMap(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>>::type /*result*/) {}
  static void fbthrift_invoke_decorator_after_getComplexMap(void* iface, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::detail::DecoratorReturnType<::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>>::type result) {
    static_cast<ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService>*>(iface)->fbthrift_execute_decorators_after_getComplexMap(*ctx, result);
  }
};

namespace detail {
template <> struct TSchemaAssociation<::cpp2_struct_footprint::ExtendedFootprintService, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -2016535262471784061;
  static constexpr ::std::string_view definitionKey = {"\x87\x7f\xce\xad\xc6\x08\x35\xe8\xc9\x7d\xe6\x96\xad\x65\xa6\xf4", 16};
};
}
} // namespace apache::thrift

namespace cpp2_struct_footprint {
using ExtendedFootprintServiceSvIf [[deprecated("Use apache::thrift::ServiceHandler<ExtendedFootprintService> instead")]] = ::apache::thrift::ServiceHandler<ExtendedFootprintService>;
} // namespace cpp2_struct_footprint

namespace cpp2_struct_footprint {
class ExtendedFootprintServiceSvNull : public ::apache::thrift::ServiceHandler<ExtendedFootprintService>, virtual public ::apache::thrift::ServiceHandler<::cpp2_struct_footprint::FootprintTestService> {
 public:
  void getComplexMap(::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>>& /*_return*/) override;
};

class ExtendedFootprintServiceAsyncProcessor : public ::cpp2_struct_footprint::FootprintTestServiceAsyncProcessor {
 public:
  std::string_view getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = ::cpp2_struct_footprint::FootprintTestServiceAsyncProcessor;
 protected:
  ::apache::thrift::ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<ExtendedFootprintServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  static const ExtendedFootprintServiceAsyncProcessor::ProcessMap& getOwnProcessMap();
 private:
  static const ExtendedFootprintServiceAsyncProcessor::ProcessMap kOwnProcessMap_;
 private:
  //
  // Service Methods
  //

  //
  // Method 'getComplexMap'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getComplexMap(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_getComplexMap(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_getComplexMap(
      apache::thrift::ContextStack* ctx,
      ::std::map<::std::int32_t, ::std::vector<::cpp2_struct_footprint::ComplexStruct>> const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getComplexMap(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'getComplexMap'
  //

  //
  // End of Service Methods
  //
 public:
  ExtendedFootprintServiceAsyncProcessor(::apache::thrift::ServiceHandler<::cpp2_struct_footprint::ExtendedFootprintService>* iface) :
      ::cpp2_struct_footprint::FootprintTestServiceAsyncProcessor(iface),
      iface_(iface) {}
  ~ExtendedFootprintServiceAsyncProcessor() override {}
};

} // namespace cpp2_struct_footprint
