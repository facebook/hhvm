<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

namespace facebook\thrift\test;

/**
 * Original thrift enum:-
 * Result
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/Result'))>>
enum Result: int {
  OK = 0;
  SO_SO = 1;
  GOOD = 2;
}

class Result_TEnumStaticMetadata implements \IThriftEnumStaticMetadata {
  public static function getEnumMetadata()[]: \tmeta_ThriftEnum {
    return \tmeta_ThriftEnum::fromShape(
      shape(
        "name" => "module.Result",
        "elements" => dict[
          0 => "OK",
          1 => "SO_SO",
          2 => "GOOD",
        ],
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TEnumAnnotations {
    return shape(
      'enum' => dict[],
      'constants' => dict[
      ],
    );
  }
}

/**
 * Original thrift exception:-
 * CustomException
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/CustomException'))>>
class CustomException extends \TException implements \IThriftSyncStruct, \IThriftExceptionMetadata {
  use \ThriftSerializationTrait;

  const \ThriftStructTypes::TSpec SPEC = dict[
    1 => shape(
      'var' => 'name',
      'type' => \TType::STRING,
    ),
    2 => shape(
      'var' => 'result',
      'type' => \TType::I32,
      'enum' => \facebook\thrift\test\Result::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'name' => 1,
    'result' => 2,
  ];

  const type TConstructorShape = shape(
    ?'name' => ?string,
    ?'result' => ?\facebook\thrift\test\Result,
  );

  const int STRUCTURAL_ID = 669503619523194995;
  /**
   * Original thrift field:-
   * 1: string name
   */
  public string $name;
  /**
   * Original thrift field:-
   * 2: module.Result result
   */
  public ?\facebook\thrift\test\Result $result;

  public function __construct(?string $name = null, ?\facebook\thrift\test\Result $result = null)[] {
    parent::__construct();
    $this->name = $name ?? '';
    $this->result = $result ?? \facebook\thrift\test\Result::SO_SO;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'name'),
      Shapes::idx($shape, 'result'),
    );
  }

  public function getName()[]: string {
    return 'CustomException';
  }

  public static function getExceptionMetadata()[]: \tmeta_ThriftException {
    return \tmeta_ThriftException::fromShape(
      shape(
        "name" => "module.CustomException",
        "fields" => vec[
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "name",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_enum" => \tmeta_ThriftEnumType::fromShape(
                    shape(
                      "name" => "module.Result",
                    )
                  ),
                )
              ),
              "name" => "result",
            )
          ),
        ],
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

