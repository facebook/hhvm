/**
 * Autogenerated by Thrift for src/deprecated_tag_incompatible_terse_write.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_data_h.h>

#include "thrift/compiler/test/fixtures/terse_write/gen-cpp2/deprecated_tag_incompatible_terse_write_types.h"

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum> {
  using type = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum;
  static constexpr const std::size_t size = 2;
  static const std::array<type, size> values;
  static const std::array<folly::StringPiece, size> names;
};

template <> struct TStructDataStorage<::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct> {
  static constexpr const std::size_t fields_size = 0;
  static const std::array<folly::StringPiece, fields_size> fields_names;
  static const std::array<int16_t, fields_size> fields_ids;
  static const std::array<protocol::TType, fields_size> fields_types;
};

template <> struct TStructDataStorage<::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStructWithCustomDefault> {
  static constexpr const std::size_t fields_size = 1;
  static const std::array<folly::StringPiece, fields_size> fields_names;
  static const std::array<int16_t, fields_size> fields_ids;
  static const std::array<protocol::TType, fields_size> fields_types;
};

template <> struct TStructDataStorage<::facebook::thrift::test::terse_write::deprecated_tag_incompatible::StructLevelTerseStruct> {
  static constexpr const std::size_t fields_size = 14;
  static const std::array<folly::StringPiece, fields_size> fields_names;
  static const std::array<int16_t, fields_size> fields_ids;
  static const std::array<protocol::TType, fields_size> fields_types;
};

template <> struct TStructDataStorage<::facebook::thrift::test::terse_write::deprecated_tag_incompatible::FieldLevelTerseStruct> {
  static constexpr const std::size_t fields_size = 28;
  static const std::array<folly::StringPiece, fields_size> fields_names;
  static const std::array<int16_t, fields_size> fields_ids;
  static const std::array<protocol::TType, fields_size> fields_types;
};

template <> struct TStructDataStorage<::facebook::thrift::test::terse_write::deprecated_tag_incompatible::TerseStructWithCustomDefault> {
  static constexpr const std::size_t fields_size = 14;
  static const std::array<folly::StringPiece, fields_size> fields_names;
  static const std::array<int16_t, fields_size> fields_ids;
  static const std::array<protocol::TType, fields_size> fields_types;
};

template <> struct TStructDataStorage<::facebook::thrift::test::terse_write::deprecated_tag_incompatible::AdaptedFields> {
  static constexpr const std::size_t fields_size = 3;
  static const std::array<folly::StringPiece, fields_size> fields_names;
  static const std::array<int16_t, fields_size> fields_ids;
  static const std::array<protocol::TType, fields_size> fields_types;
};

}} // apache::thrift
